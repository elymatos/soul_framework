-- MySQL Script generated by MySQL Workbench
-- s√°b 06 set 2025 16:15:18
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema webtool42_db
-- -----------------------------------------------------
-- FNBR Webtool 4.0 Database
-- check https://github.com/FrameNetBrasil/database/blob/main/versions.md
-- 

-- -----------------------------------------------------
-- Schema webtool42_db
--
-- FNBR Webtool 4.0 Database
-- check https://github.com/FrameNetBrasil/database/blob/main/versions.md
-- 
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `webtool42_db` ;
USE `webtool42_db` ;

-- -----------------------------------------------------
-- Table `webtool42_db`.`entity`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`entity` (
  `idEntity` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `type` CHAR(3) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_bin' NULL DEFAULT NULL,
  `idOld` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idEntity`))
ENGINE = InnoDB
AUTO_INCREMENT = 1554362
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`color`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`color` (
  `idColor` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `rgbFg` CHAR(6) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `rgbBg` CHAR(6) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  PRIMARY KEY (`idColor`))
ENGINE = InnoDB
AUTO_INCREMENT = 116
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`type` (
  `idType` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idType`),
  INDEX `idx_Type_entry` (`entry` ASC) VISIBLE,
  INDEX `idx_Type_Entity` (`idEntity` ASC) VISIBLE,
  CONSTRAINT `fk_Type_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 17
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`typeinstance`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`typeinstance` (
  `idTypeInstance` INT(11) NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `info` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `flag` TINYINT(1) NULL DEFAULT NULL,
  `idType` INT(11) UNSIGNED NOT NULL,
  `idColor` INT(11) UNSIGNED NOT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  `idTypeGroup` INT(11) UNSIGNED NULL,
  PRIMARY KEY (`idTypeInstance`),
  INDEX `idx_TypeInstance_Type` (`idType` ASC) VISIBLE,
  INDEX `idx_TypeInstance_Color` (`idColor` ASC) VISIBLE,
  INDEX `idx_TypeInstance_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_TypeInstance_Entry` (`entry` ASC) VISIBLE,
  CONSTRAINT `fk_TypeInstance_Color`
    FOREIGN KEY (`idColor`)
    REFERENCES `webtool42_db`.`color` (`idColor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TypeInstance_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TypeInstance_Type`
    FOREIGN KEY (`idType`)
    REFERENCES `webtool42_db`.`type` (`idType`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 114
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`frame`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`frame` (
  `idFrame` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `active` TINYINT(1) NULL DEFAULT NULL,
  `defaultName` VARCHAR(255) NULL DEFAULT NULL,
  `defaultDefinition` TEXT NULL DEFAULT NULL,
  `fnVersion` VARCHAR(50) NULL DEFAULT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idFrame`),
  INDEX `idx_Frame_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_Frame_Entry` (`entry` ASC) VISIBLE,
  CONSTRAINT `fk_Frame_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 1491
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`language`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`language` (
  `idLanguage` INT(11) UNSIGNED NOT NULL,
  `language` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'Two-letter ISO 639-1 language codes + region, See: http://www.w3.org/International/articles/language-tags/',
  `description` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  PRIMARY KEY (`idLanguage`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`pos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`pos` (
  `idPOS` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `POS` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idPOS`),
  INDEX `idx_POS_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_POS_Entry` (`entry` ASC) VISIBLE,
  CONSTRAINT `fk_POS_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 101
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`udpos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`udpos` (
  `idUDPOS` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `POS` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idUDPOS`),
  INDEX `idx_udpos_pos` (`POS` ASC) VISIBLE,
  INDEX `fk_UDPOS_Entity_idx` (`idEntity` ASC) VISIBLE,
  CONSTRAINT `fk_UDPOS_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 18
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`lemma`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`lemma` (
  `idLemma` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_general_ci' NULL DEFAULT NULL,
  `idOld` INT(11) NULL DEFAULT NULL,
  `version` INT(11) NULL DEFAULT NULL,
  `idPOS` INT(11) UNSIGNED NOT NULL,
  `idLanguage` INT(11) UNSIGNED NOT NULL,
  `idEntity` INT(11) UNSIGNED NULL DEFAULT NULL,
  `idUDPOS` INT(11) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`idLemma`),
  INDEX `idx_Lemma_Language` (`idLanguage` ASC) VISIBLE,
  INDEX `idx_Lemma_POS` (`idPOS` ASC) VISIBLE,
  INDEX `idx_Lemma_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_Lemma_name` (`name` ASC) VISIBLE,
  INDEX `idx_Lemma_UDPOS` (`idUDPOS` ASC) VISIBLE,
  INDEX `idx_Lemma_version` (`version` ASC) VISIBLE,
  CONSTRAINT `fk_Lemma_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Lemma_Language`
    FOREIGN KEY (`idLanguage`)
    REFERENCES `webtool42_db`.`language` (`idLanguage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Lemma_POS`
    FOREIGN KEY (`idPOS`)
    REFERENCES `webtool42_db`.`pos` (`idPOS`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Lemma_UDPOS`
    FOREIGN KEY (`idUDPOS`)
    REFERENCES `webtool42_db`.`udpos` (`idUDPOS`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 229282
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`lexicon_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`lexicon_group` (
  `idLexiconGroup` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idLexiconGroup`),
  INDEX `fk_lexicongroup_entity1_idx` (`idEntity` ASC) VISIBLE,
  INDEX `idx_lexicongroup_name` (`name` ASC) VISIBLE,
  CONSTRAINT `fk_lexicongroup_entity1`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`lexicon`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`lexicon` (
  `idLexicon` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `form` VARCHAR(255) NULL,
  `idLexiconGroup` INT NOT NULL,
  `idEntity` INT(11) UNSIGNED NULL,
  `idPOS` INT(11) UNSIGNED NULL,
  `idUDPOS` INT(11) UNSIGNED NULL,
  `idLanguage` INT(11) UNSIGNED NOT NULL,
  `idLemma` INT(11) UNSIGNED NULL,
  PRIMARY KEY (`idLexicon`),
  INDEX `fk_lexicon_lexicongroup1_idx` (`idLexiconGroup` ASC) VISIBLE,
  INDEX `fk_lexicon_entity1_idx` (`idEntity` ASC) VISIBLE,
  INDEX `fk_lexicon_pos1_idx` (`idPOS` ASC) VISIBLE,
  INDEX `fk_lexicon_udpos1_idx` (`idUDPOS` ASC) VISIBLE,
  INDEX `fk_lexicon_language1_idx` (`idLanguage` ASC) VISIBLE,
  INDEX `idx_lexicon_form` (`form` ASC) VISIBLE,
  INDEX `fk_lexicon_lemma1_idx` (`idLemma` ASC) VISIBLE,
  CONSTRAINT `fk_lexicon_lexicongroup1`
    FOREIGN KEY (`idLexiconGroup`)
    REFERENCES `webtool42_db`.`lexicon_group` (`idLexiconGroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lexicon_entity1`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lexicon_pos1`
    FOREIGN KEY (`idPOS`)
    REFERENCES `webtool42_db`.`pos` (`idPOS`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lexicon_udpos1`
    FOREIGN KEY (`idUDPOS`)
    REFERENCES `webtool42_db`.`udpos` (`idUDPOS`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lexicon_language1`
    FOREIGN KEY (`idLanguage`)
    REFERENCES `webtool42_db`.`language` (`idLanguage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lexicon_lemma1`
    FOREIGN KEY (`idLemma`)
    REFERENCES `webtool42_db`.`lemma` (`idLemma`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `webtool42_db`.`corpus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`corpus` (
  `idCorpus` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `active` TINYINT(1) NULL DEFAULT 1,
  `idEntity` INT(11) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`idCorpus`),
  INDEX `idx_Corpus_Entry` (`entry` ASC) VISIBLE,
  INDEX `idx_Corpus_Entity` (`idEntity` ASC) VISIBLE,
  CONSTRAINT `fk_Corpus_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 153
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`genretype`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`genretype` (
  `idGenreType` INT(11) NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `idEntity` INT(11) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`idGenreType`),
  INDEX `idx_GenreType_Entity` (`idEntity` ASC) VISIBLE,
  CONSTRAINT `fk_GenreType_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`genre`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`genre` (
  `idGenre` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `idGenreType` INT(11) NOT NULL,
  `idEntity` INT(11) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`idGenre`),
  INDEX `idx_Genre_Entry` (`entry` ASC) VISIBLE,
  INDEX `idx_Genre_GenreType` (`idGenreType` ASC) VISIBLE,
  INDEX `idx_Genre_Entity` (`idEntity` ASC) VISIBLE,
  CONSTRAINT `fk_Genre_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Genre_GenreType`
    FOREIGN KEY (`idGenreType`)
    REFERENCES `webtool42_db`.`genretype` (`idGenreType`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 31
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`document`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`document` (
  `idDocument` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `author` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `active` TINYINT(1) NULL DEFAULT 1,
  `idGenre` INT(11) UNSIGNED NOT NULL,
  `idCorpus` INT(11) UNSIGNED NOT NULL,
  `idEntity` INT(11) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`idDocument`),
  INDEX `idx_Document_Genre` (`idGenre` ASC) VISIBLE,
  INDEX `idx_Document_Corpus` (`idCorpus` ASC) VISIBLE,
  INDEX `idx_Document_Entry` (`entry` ASC) VISIBLE,
  INDEX `idx_Document_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_document_corpus_entity_language` (`idCorpus` ASC, `idEntity` ASC) VISIBLE,
  CONSTRAINT `fk_Document_Corpus`
    FOREIGN KEY (`idCorpus`)
    REFERENCES `webtool42_db`.`corpus` (`idCorpus`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Document_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Document_Genre`
    FOREIGN KEY (`idGenre`)
    REFERENCES `webtool42_db`.`genre` (`idGenre`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 1080
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`paragraph`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`paragraph` (
  `idParagraph` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `documentOrder` INT(11) NULL DEFAULT NULL,
  `idDocument` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idParagraph`),
  INDEX `idx_Paragraph_Document` (`idDocument` ASC) VISIBLE,
  CONSTRAINT `fk_Paragraph_Document`
    FOREIGN KEY (`idDocument`)
    REFERENCES `webtool42_db`.`document` (`idDocument`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 400849
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`originmm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`originmm` (
  `idOriginMM` INT(11) NOT NULL AUTO_INCREMENT,
  `origin` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`idOriginMM`))
ENGINE = InnoDB
AUTO_INCREMENT = 8
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`rls_label`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`rls_label` (
  `idRLSLabel` INT(11) NOT NULL AUTO_INCREMENT,
  `label` VARCHAR(45) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_general_ci' NULL DEFAULT NULL,
  `value` TINYINT UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`idRLSLabel`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `webtool42_db`.`sentence`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`sentence` (
  `idSentence` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `text` VARCHAR(4000) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `paragraphOrder` INT(11) NULL DEFAULT NULL,
  `idParagraph` INT(11) UNSIGNED NULL,
  `idLanguage` INT(11) UNSIGNED NOT NULL,
  `idOriginMM` INT(11) NULL,
  `idRLSLabel` INT(11) NOT NULL,
  PRIMARY KEY (`idSentence`),
  INDEX `idx_Sentence_Paragraph` (`idParagraph` ASC) VISIBLE,
  INDEX `idx_Sentence_Language` (`idLanguage` ASC) VISIBLE,
  INDEX `fk_sentence_originmm1_idx` (`idOriginMM` ASC) VISIBLE,
  INDEX `fk_sentence_rls_label1_idx` (`idRLSLabel` ASC) VISIBLE,
  CONSTRAINT `fk_Sentence_Language`
    FOREIGN KEY (`idLanguage`)
    REFERENCES `webtool42_db`.`language` (`idLanguage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Sentence_Paragraph`
    FOREIGN KEY (`idParagraph`)
    REFERENCES `webtool42_db`.`paragraph` (`idParagraph`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_sentence_originmm1`
    FOREIGN KEY (`idOriginMM`)
    REFERENCES `webtool42_db`.`originmm` (`idOriginMM`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_sentence_rls_label1`
    FOREIGN KEY (`idRLSLabel`)
    REFERENCES `webtool42_db`.`rls_label` (`idRLSLabel`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 628488
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`document_sentence`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`document_sentence` (
  `idDocumentSentence` INT NOT NULL AUTO_INCREMENT,
  `idDocument` INT(11) UNSIGNED NOT NULL,
  `idSentence` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idDocumentSentence`),
  INDEX `fk_document_sentence_document1_idx` (`idDocument` ASC) VISIBLE,
  INDEX `fk_document_sentence_sentence1_idx` (`idSentence` ASC) VISIBLE,
  INDEX `idx_document_sentence_document` (`idDocument` ASC, `idSentence` ASC) VISIBLE,
  INDEX `idx_document_sentence_sentence` USING BTREE (`idSentence`, `idDocument`) VISIBLE,
  CONSTRAINT `fk_document_sentence_document1`
    FOREIGN KEY (`idDocument`)
    REFERENCES `webtool42_db`.`document` (`idDocument`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_document_sentence_sentence1`
    FOREIGN KEY (`idSentence`)
    REFERENCES `webtool42_db`.`sentence` (`idSentence`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`layergroup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`layergroup` (
  `idLayerGroup` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `type` VARCHAR(255) NULL,
  PRIMARY KEY (`idLayerGroup`))
ENGINE = InnoDB
AUTO_INCREMENT = 26
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`layertype`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`layertype` (
  `idLayerType` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `allowsApositional` TINYINT(1) NULL DEFAULT NULL,
  `isAnnotation` TINYINT(1) NULL DEFAULT NULL,
  `layerOrder` INT(10) UNSIGNED NULL DEFAULT 0,
  `idLayerGroup` INT(11) UNSIGNED NOT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idLayerType`),
  INDEX `idx_LayerType_LayerGroup` (`idLayerGroup` ASC) VISIBLE,
  INDEX `idx_LayerType_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_LayerType_Entry` (`entry` ASC) VISIBLE,
  CONSTRAINT `fk_LayerType_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_LayerType_LayerGroup`
    FOREIGN KEY (`idLayerGroup`)
    REFERENCES `webtool42_db`.`layergroup` (`idLayerGroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 26
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`dynamicobject`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`dynamicobject` (
  `idDynamicObject` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `startFrame` INT NULL,
  `endFrame` INT NULL,
  `startTime` FLOAT NULL,
  `endTime` FLOAT NULL,
  `status` INT NULL,
  `origin` INT NULL,
  `idLayerType` INT(11) UNSIGNED NULL,
  PRIMARY KEY (`idDynamicObject`),
  INDEX `fk_dynamicobject_layertype1_idx` (`idLayerType` ASC) VISIBLE,
  INDEX `idx_dynamicobject_origin` (`origin` ASC) VISIBLE,
  CONSTRAINT `fk_dynamicobject_layertype1`
    FOREIGN KEY (`idLayerType`)
    REFERENCES `webtool42_db`.`layertype` (`idLayerType`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`staticobject`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`staticobject` (
  `idStaticObject` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NULL,
  `scene` TINYINT(1) NULL,
  `idFlickr30kEntitiesChain` INT NULL,
  `nobndbox` TINYINT(1) NULL,
  `idLayerType` INT(11) UNSIGNED NULL,
  `origin` INT(11) NULL,
  PRIMARY KEY (`idStaticObject`),
  INDEX `idx_staticobject_idFlickr30EntitiesChain` (`idFlickr30kEntitiesChain` ASC) VISIBLE,
  INDEX `fk_staticobject_layertype1_idx` (`idLayerType` ASC) VISIBLE,
  INDEX `idx_staticobject_origin` (`origin` ASC) VISIBLE,
  CONSTRAINT `fk_staticobject_layertype1`
    FOREIGN KEY (`idLayerType`)
    REFERENCES `webtool42_db`.`layertype` (`idLayerType`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`user` (
  `idUser` INT(11) NOT NULL AUTO_INCREMENT,
  `login` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `passMD5` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `active` TINYINT(1) NULL DEFAULT NULL,
  `status` CHAR(1) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `name` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `email` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `auth0IdUser` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `auth0CreatedAt` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `lastLogin` TIMESTAMP NULL DEFAULT NULL,
  `idLanguage` INT(11) UNSIGNED NOT NULL DEFAULT 1,
  `config` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`idUser`),
  INDEX `idx_User_Language` (`idLanguage` ASC) VISIBLE,
  CONSTRAINT `fk_User_Language`
    FOREIGN KEY (`idLanguage`)
    REFERENCES `webtool42_db`.`language` (`idLanguage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 499
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`lu`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`lu` (
  `idLU` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_bin' NULL DEFAULT NULL,
  `senseDescription` TEXT CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `active` TINYINT(1) NULL DEFAULT NULL,
  `importNum` INT(10) UNSIGNED NULL DEFAULT NULL,
  `incorporatedFE` INT(10) UNSIGNED NULL DEFAULT NULL,
  `bff` INT(11) NULL DEFAULT NULL,
  `bffOther` VARCHAR(4000) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  `idLemma` INT(11) UNSIGNED NULL,
  `idFrame` INT(11) UNSIGNED NULL,
  `idLexicon` INT UNSIGNED NOT NULL,
  `discussion` TEXT NULL,
  `createdAt` TIMESTAMP NULL,
  `updatedAt` TIMESTAMP NULL,
  `status` VARCHAR(45) NULL DEFAULT 'CREATED',
  `origin` VARCHAR(45) NULL DEFAULT 'WEBTOOL',
  `idDocumentSentence` INT NULL,
  `idDynamicObject` INT NULL,
  `idStaticObject` INT NULL,
  `idUser` INT(11) NULL,
  PRIMARY KEY (`idLU`),
  INDEX `idx_LU_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_LU_Lemma` (`idLemma` ASC) VISIBLE,
  INDEX `idx_LU_Frame` (`idFrame` ASC) VISIBLE,
  INDEX `fk_lu_lexicon1_idx` (`idLexicon` ASC) VISIBLE,
  INDEX `fk_lu_document_sentence1_idx` (`idDocumentSentence` ASC) VISIBLE,
  INDEX `fk_lu_dynamicobject1_idx` (`idDynamicObject` ASC) VISIBLE,
  INDEX `fk_lu_staticobject1_idx` (`idStaticObject` ASC) VISIBLE,
  INDEX `fk_lu_user1_idx` (`idUser` ASC) VISIBLE,
  CONSTRAINT `fk_LU_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_LU_Frame`
    FOREIGN KEY (`idFrame`)
    REFERENCES `webtool42_db`.`frame` (`idFrame`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_LU_Lemma`
    FOREIGN KEY (`idLemma`)
    REFERENCES `webtool42_db`.`lemma` (`idLemma`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lu_lexicon1`
    FOREIGN KEY (`idLexicon`)
    REFERENCES `webtool42_db`.`lexicon` (`idLexicon`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lu_document_sentence1`
    FOREIGN KEY (`idDocumentSentence`)
    REFERENCES `webtool42_db`.`document_sentence` (`idDocumentSentence`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lu_dynamicobject1`
    FOREIGN KEY (`idDynamicObject`)
    REFERENCES `webtool42_db`.`dynamicobject` (`idDynamicObject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lu_staticobject1`
    FOREIGN KEY (`idStaticObject`)
    REFERENCES `webtool42_db`.`staticobject` (`idStaticObject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lu_user1`
    FOREIGN KEY (`idUser`)
    REFERENCES `webtool42_db`.`user` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 38797
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`construction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`construction` (
  `idConstruction` INT(11) NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `abstract` TINYINT(1) NULL DEFAULT NULL,
  `active` TINYINT(1) NULL DEFAULT NULL,
  `idLanguage` INT(11) UNSIGNED NULL DEFAULT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idConstruction`),
  INDEX `idx_Construction_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_Construction_Entry` (`entry` ASC) VISIBLE,
  INDEX `idx_Construction_Language` (`idLanguage` ASC) VISIBLE,
  CONSTRAINT `fk_Construction_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Construction_Language`
    FOREIGN KEY (`idLanguage`)
    REFERENCES `webtool42_db`.`language` (`idLanguage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 363
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`annotationset`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`annotationset` (
  `idAnnotationSet` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `idSentence` INT(11) UNSIGNED NULL,
  `idAnnotationStatus` INT(11) NOT NULL,
  `idEntityRelated` INT(11) UNSIGNED NULL DEFAULT NULL,
  `idLU` INT(11) UNSIGNED NULL,
  `idConstruction` INT(11) NULL,
  `idDocumentSentence` INT NULL,
  `status` VARCHAR(45) NULL DEFAULT 'CREATED',
  `idUser` INT(11) NULL,
  PRIMARY KEY (`idAnnotationSet`),
  INDEX `idx_AnnotationSet_Sentence` (`idSentence` ASC) VISIBLE,
  INDEX `idx_AnnotationSet_TypeInstance` (`idAnnotationStatus` ASC) VISIBLE,
  INDEX `idx_AnnotationSet_EntityRelated` (`idEntityRelated` ASC) VISIBLE,
  INDEX `fk_annotationset_lu1_idx` (`idLU` ASC) VISIBLE,
  INDEX `fk_annotationset_construction1_idx` (`idConstruction` ASC) VISIBLE,
  INDEX `fk_annotationset_document_sentence1_idx` (`idDocumentSentence` ASC) VISIBLE,
  INDEX `fk_annotationset_user1_idx` (`idUser` ASC) VISIBLE,
  CONSTRAINT `fk_AnnotationSet_EntityRelated`
    FOREIGN KEY (`idEntityRelated`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AnnotationSet_TypeInstance`
    FOREIGN KEY (`idAnnotationStatus`)
    REFERENCES `webtool42_db`.`typeinstance` (`idTypeInstance`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotationset_lu1`
    FOREIGN KEY (`idLU`)
    REFERENCES `webtool42_db`.`lu` (`idLU`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotationset_construction1`
    FOREIGN KEY (`idConstruction`)
    REFERENCES `webtool42_db`.`construction` (`idConstruction`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotationset_sentence`
    FOREIGN KEY (`idSentence`)
    REFERENCES `webtool42_db`.`sentence` (`idSentence`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotationset_document_sentence1`
    FOREIGN KEY (`idDocumentSentence`)
    REFERENCES `webtool42_db`.`document_sentence` (`idDocumentSentence`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotationset_user1`
    FOREIGN KEY (`idUser`)
    REFERENCES `webtool42_db`.`user` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 141230
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`ascomments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`ascomments` (
  `idASComments` INT(11) NOT NULL AUTO_INCREMENT,
  `ExtraThematicFE` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `ExtraThematicFEOther` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `Comment` VARCHAR(4000) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `Construction` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `idAnnotationSet` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idASComments`),
  INDEX `idx_ASComment_idAnnotationSet` (`idAnnotationSet` ASC) VISIBLE,
  CONSTRAINT `fk_ASComments_AnnotationSet1`
    FOREIGN KEY (`idAnnotationSet`)
    REFERENCES `webtool42_db`.`annotationset` (`idAnnotationSet`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`concept`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`concept` (
  `idConcept` INT(11) NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `keyword` VARCHAR(255) NULL DEFAULT NULL,
  `aka` TEXT NULL DEFAULT NULL,
  `type` VARCHAR(255) NULL DEFAULT NULL,
  `status` VARCHAR(45) NULL DEFAULT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  `idTypeInstance` INT(11) NOT NULL,
  PRIMARY KEY (`idConcept`),
  INDEX `idx_Concept_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_Concept_TypeInstance` (`idTypeInstance` ASC) VISIBLE,
  CONSTRAINT `fk_Concept_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Concept_TypeInstance`
    FOREIGN KEY (`idTypeInstance`)
    REFERENCES `webtool42_db`.`typeinstance` (`idTypeInstance`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 2982
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`constructionelement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`constructionelement` (
  `idConstructionElement` INT(11) NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `active` TINYINT(1) NULL DEFAULT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  `idColor` INT(11) UNSIGNED NOT NULL,
  `optional` TINYINT(1) NULL DEFAULT 0,
  `head` TINYINT(1) NULL DEFAULT 0,
  `multiple` TINYINT(1) NULL DEFAULT 1,
  `idConstruction` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idConstructionElement`),
  INDEX `idx_ConstructionElement_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_ConstructionElement_Color` (`idColor` ASC) VISIBLE,
  INDEX `idx_ConstructionElement_Entry` (`entry` ASC) VISIBLE,
  INDEX `idx_ConstructionElement_Construction` (`idConstruction` ASC) VISIBLE,
  CONSTRAINT `fk_ConstructionElement_Color`
    FOREIGN KEY (`idColor`)
    REFERENCES `webtool42_db`.`color` (`idColor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ConstructionElement_Construction`
    FOREIGN KEY (`idConstruction`)
    REFERENCES `webtool42_db`.`construction` (`idConstruction`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ConstructionElement_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 1081
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`dataset`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`dataset` (
  `idDataset` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_bin' NULL,
  `description` TEXT CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_bin' NULL,
  PRIMARY KEY (`idDataset`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`image`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`image` (
  `idImage` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `width` INT NULL,
  `height` INT NULL,
  `depth` INT NULL,
  `currentURL` VARCHAR(255) NULL,
  `idLanguage` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idImage`),
  INDEX `fk_image_language1_idx` (`idLanguage` ASC) VISIBLE,
  INDEX `idx_image_name` (`name` ASC) VISIBLE,
  CONSTRAINT `fk_image_language1`
    FOREIGN KEY (`idLanguage`)
    REFERENCES `webtool42_db`.`language` (`idLanguage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`dataset_image`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`dataset_image` (
  `idDataset` INT(11) NOT NULL,
  `idImage` INT(11) NOT NULL,
  PRIMARY KEY (`idDataset`, `idImage`),
  INDEX `fk_dataset_has_image_image1_idx` (`idImage` ASC) VISIBLE,
  INDEX `fk_dataset_has_image_dataset1_idx` (`idDataset` ASC) VISIBLE,
  CONSTRAINT `fk_dataset_has_image_dataset1`
    FOREIGN KEY (`idDataset`)
    REFERENCES `webtool42_db`.`dataset` (`idDataset`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_dataset_has_image_image1`
    FOREIGN KEY (`idImage`)
    REFERENCES `webtool42_db`.`image` (`idImage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `webtool42_db`.`documentmm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`documentmm` (
  `idDocumentMM` INT(11) NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(255) NULL DEFAULT NULL,
  `originalFile` VARCHAR(255) NULL DEFAULT NULL,
  `sha1Name` VARCHAR(255) NULL DEFAULT NULL,
  `audioPath` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `videoPath` VARCHAR(255) NULL DEFAULT NULL,
  `alignPath` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `videoWidth` INT(11) NULL DEFAULT NULL,
  `videoHeight` INT(11) NULL DEFAULT NULL,
  `flickr30k` CHAR(1) NULL DEFAULT NULL,
  `enabled` CHAR(1) NULL DEFAULT NULL,
  `url` VARCHAR(255) NULL DEFAULT NULL,
  `idDocument` INT(11) UNSIGNED NOT NULL,
  `idLanguage` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idDocumentMM`),
  INDEX `idx_DocumentMM_Document` (`idDocument` ASC) VISIBLE,
  INDEX `idx_DocumentMM_Language` (`idLanguage` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 1340
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`domain`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`domain` (
  `idDomain` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idDomain`),
  INDEX `idx_Domain_Entity1` (`idEntity` ASC) VISIBLE,
  INDEX `idx_Domain_entry` (`entry` ASC) VISIBLE,
  CONSTRAINT `fk_Domain_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 17
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`relationgroup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`relationgroup` (
  `idRelationGroup` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `idEntity` INT(11) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`idRelationGroup`),
  INDEX `idx_RelationGroup_Entity` (`idEntity` ASC) VISIBLE,
  CONSTRAINT `fk_RelationGroup_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 12
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`relationtype`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`relationtype` (
  `idRelationType` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_bin' NOT NULL,
  `nameCanonical` VARCHAR(255) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_bin' NULL,
  `nameDirect` VARCHAR(45) NULL,
  `nameInverse` VARCHAR(45) NULL,
  `color` CHAR(7) NULL,
  `prefix` CHAR(3) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_bin' NULL,
  `idEntity` INT(11) UNSIGNED NULL DEFAULT NULL,
  `idRelationGroup` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idRelationType`),
  INDEX `idx_RelationType_RelationGroup` (`idRelationGroup` ASC) VISIBLE,
  INDEX `idx_RelationType_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_RelationType_Entry` (`entry` ASC) VISIBLE,
  CONSTRAINT `fk_RelationType_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RelationType_RelationGroup`
    FOREIGN KEY (`idRelationGroup`)
    REFERENCES `webtool42_db`.`relationgroup` (`idRelationGroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 215
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`entityrelation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`entityrelation` (
  `idEntityRelation` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `idRelationType` INT(11) UNSIGNED NOT NULL,
  `idEntity1` INT(11) UNSIGNED NOT NULL,
  `idEntity2` INT(11) UNSIGNED NOT NULL,
  `idEntity3` INT(11) UNSIGNED NULL DEFAULT NULL,
  `idRelation` INT(11) UNSIGNED NULL,
  PRIMARY KEY (`idEntityRelation`),
  INDEX `idx_EntityRelation_Entity1` (`idEntity1` ASC) VISIBLE,
  INDEX `idx_EntityRelation_Entity2` (`idEntity2` ASC) VISIBLE,
  INDEX `idx_EntityRelation_Entity3` (`idEntity3` ASC) VISIBLE,
  INDEX `idx_EntityRelation_RelationType` (`idRelationType` ASC) VISIBLE,
  INDEX `idx_EntityRelation_EntityRelation` (`idRelation` ASC) VISIBLE,
  CONSTRAINT `fk_EntityRelation_Entity1`
    FOREIGN KEY (`idEntity1`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_EntityRelation_Entity2`
    FOREIGN KEY (`idEntity2`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_EntityRelation_Entity3`
    FOREIGN KEY (`idEntity3`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_EntityRelation_RelationType`
    FOREIGN KEY (`idRelationType`)
    REFERENCES `webtool42_db`.`relationtype` (`idRelationType`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_entityrelation_entityrelation`
    FOREIGN KEY (`idRelation`)
    REFERENCES `webtool42_db`.`entityrelation` (`idEntityRelation`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 5223607
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`entry`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`entry` (
  `idEntry` INT(11) NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `name` VARCHAR(255) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_general_ci' NULL DEFAULT NULL,
  `description` TEXT CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `nick` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `idLanguage` INT(11) UNSIGNED NOT NULL,
  `idEntity` INT(11) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`idEntry`),
  INDEX `idx_Entry_Language` (`idLanguage` ASC) VISIBLE,
  INDEX `idx_Entry_Entry` (`entry` ASC) VISIBLE,
  INDEX `idx_Entry_Name` (`name` ASC) VISIBLE,
  INDEX `idx_Entry_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_entry_entity_language_name` (`idEntity` ASC, `idLanguage` ASC, `name` ASC) VISIBLE,
  CONSTRAINT `fk_Entry_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Entry_Language`
    FOREIGN KEY (`idLanguage`)
    REFERENCES `webtool42_db`.`language` (`idLanguage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 155799
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`frameelement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`frameelement` (
  `idFrameElement` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `coreType` VARCHAR(50) NULL DEFAULT NULL,
  `active` TINYINT(1) NULL DEFAULT NULL,
  `defaultName` VARCHAR(255) NULL DEFAULT NULL,
  `defaultDefinition` TEXT NULL DEFAULT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  `idFrame` INT(11) UNSIGNED NOT NULL,
  `idColor` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idFrameElement`),
  INDEX `idx_FrameElement_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_FrameElement_Color` (`idColor` ASC) VISIBLE,
  INDEX `idx_FrameElement_Entry` (`entry` ASC) VISIBLE,
  INDEX `idx_FrameElement_Frame` (`idFrame` ASC) VISIBLE,
  CONSTRAINT `fk_FrameElement_Color`
    FOREIGN KEY (`idColor`)
    REFERENCES `webtool42_db`.`color` (`idColor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_FrameElement_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_FrameElement_Frame`
    FOREIGN KEY (`idFrame`)
    REFERENCES `webtool42_db`.`frame` (`idFrame`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 13457
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`genericlabel`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`genericlabel` (
  `idGenericLabel` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `definition` VARCHAR(4000) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `example` TEXT CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  `idColor` INT(11) UNSIGNED NOT NULL,
  `idLanguage` INT(11) UNSIGNED NOT NULL,
  `idLayerType` INT(11) UNSIGNED NULL,
  PRIMARY KEY (`idGenericLabel`),
  INDEX `idx_GenericLabel_Language` (`idLanguage` ASC) VISIBLE,
  INDEX `idx_GenericLabel_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_GenericLabel_Color` (`idColor` ASC) VISIBLE,
  INDEX `idx_GenericLabel_Name` (`name` ASC) VISIBLE,
  INDEX `idx_GenericLabel_LayerYype` (`idLayerType` ASC) VISIBLE,
  CONSTRAINT `fk_GenericLabel_Color`
    FOREIGN KEY (`idColor`)
    REFERENCES `webtool42_db`.`color` (`idColor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_GenericLabel_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_GenericLabel_Language`
    FOREIGN KEY (`idLanguage`)
    REFERENCES `webtool42_db`.`language` (`idLanguage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_GenericLabel_Layertype1`
    FOREIGN KEY (`idLayerType`)
    REFERENCES `webtool42_db`.`layertype` (`idLayerType`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 860
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`gfequivalence`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`gfequivalence` (
  `idGFEquivalence` INT(11) NOT NULL AUTO_INCREMENT,
  `LangSource` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `LangDest` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `LabelSource` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `LabelDest` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  PRIMARY KEY (`idGFEquivalence`))
ENGINE = InnoDB
AUTO_INCREMENT = 65
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`group` (
  `idGroup` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `description` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  PRIMARY KEY (`idGroup`))
ENGINE = InnoDB
AUTO_INCREMENT = 13
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`imagemm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`imagemm` (
  `idImageMM` INT(11) NOT NULL DEFAULT 0,
  `name` VARCHAR(255) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_bin' NULL DEFAULT NULL,
  `width` INT(11) NULL DEFAULT NULL,
  `height` INT(11) NULL DEFAULT NULL,
  `depth` INT(11) NULL DEFAULT NULL,
  `imagePath` VARCHAR(255) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_bin' NULL DEFAULT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `webtool42_db`.`layer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`layer` (
  `idLayer` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `rank` INT(11) NULL DEFAULT NULL,
  `idAnnotationSet` INT(11) UNSIGNED NOT NULL,
  `idLayerType` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idLayer`),
  INDEX `idx_Layer_AnnotationSet` (`idAnnotationSet` ASC) VISIBLE,
  INDEX `idx_Layer_LayerType` (`idLayerType` ASC) VISIBLE,
  CONSTRAINT `fk_Layer_AnnotationSet`
    FOREIGN KEY (`idAnnotationSet`)
    REFERENCES `webtool42_db`.`annotationset` (`idAnnotationSet`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Layer_LayerType`
    FOREIGN KEY (`idLayerType`)
    REFERENCES `webtool42_db`.`layertype` (`idLayerType`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 585253
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`lexeme`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`lexeme` (
  `idLexeme` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_general_ci' NULL DEFAULT NULL,
  `idPOS` INT(11) UNSIGNED NOT NULL,
  `idLanguage` INT(11) UNSIGNED NOT NULL,
  `idEntity` INT(11) UNSIGNED NULL DEFAULT NULL,
  `idUDPOS` INT(11) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`idLexeme`),
  INDEX `idx_Lexeme_POS` (`idPOS` ASC) VISIBLE,
  INDEX `idx_Lexeme_Language` (`idLanguage` ASC) VISIBLE,
  INDEX `idx_Lexeme_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_Lexeme_name` (`name` ASC) VISIBLE,
  INDEX `fk_Lexeme_UDPOS_idx` (`idUDPOS` ASC) VISIBLE,
  INDEX `idx_Lexeme_name_lang_pos` (`name` ASC, `idLanguage` ASC, `idPOS` ASC) VISIBLE,
  CONSTRAINT `fk_Lexeme_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Lexeme_Language`
    FOREIGN KEY (`idLanguage`)
    REFERENCES `webtool42_db`.`language` (`idLanguage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Lexeme_POS`
    FOREIGN KEY (`idPOS`)
    REFERENCES `webtool42_db`.`pos` (`idPOS`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Lexeme_UDPOS`
    FOREIGN KEY (`idUDPOS`)
    REFERENCES `webtool42_db`.`udpos` (`idUDPOS`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 150299
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`wordform`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`wordform` (
  `idWordForm` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `form` VARCHAR(255) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_bin' NULL DEFAULT NULL,
  `md5` CHAR(32) NULL DEFAULT NULL,
  `idLexeme` INT(11) UNSIGNED NOT NULL,
  `idEntity` INT(11) UNSIGNED NULL DEFAULT NULL,
  `altSpell` TINYINT(1) NULL DEFAULT NULL,
  PRIMARY KEY (`idWordForm`),
  INDEX `idx_WordForm_Lexeme` (`idLexeme` ASC) VISIBLE,
  INDEX `idx_WordForm_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_WordForm_form` (`form` ASC) VISIBLE,
  INDEX `idx_WordForm_md5` (`md5` ASC) VISIBLE,
  CONSTRAINT `fk_WordForm_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_WordForm_Lexeme`
    FOREIGN KEY (`idLexeme`)
    REFERENCES `webtool42_db`.`lexeme` (`idLexeme`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 1134195
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `webtool42_db`.`lexemeentry`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`lexemeentry` (
  `idLexemeEntry` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `lexemeOrder` INT(11) NULL DEFAULT NULL,
  `breakBefore` TINYINT(1) NULL DEFAULT NULL,
  `headWord` TINYINT(1) NULL DEFAULT NULL,
  `idLexeme` INT(11) UNSIGNED NOT NULL,
  `idLemma` INT(11) UNSIGNED NOT NULL,
  `idWordForm` INT(11) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`idLexemeEntry`),
  INDEX `idx_LexemeEntry_Lexeme` (`idLexeme` ASC) VISIBLE,
  INDEX `idx_LexemeEntry_Lemma` (`idLemma` ASC) VISIBLE,
  INDEX `idx_LexemeEntry_WordForm` (`idWordForm` ASC) VISIBLE,
  CONSTRAINT `fk_LexemeEntry_Lemma`
    FOREIGN KEY (`idLemma`)
    REFERENCES `webtool42_db`.`lemma` (`idLemma`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_LexemeEntry_Lexeme`
    FOREIGN KEY (`idLexeme`)
    REFERENCES `webtool42_db`.`lexeme` (`idLexeme`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_LexemeEntry_WordForm`
    FOREIGN KEY (`idWordForm`)
    REFERENCES `webtool42_db`.`wordform` (`idWordForm`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 209478
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`luequivalence`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`luequivalence` (
  `idLUEquivalence` INT(11) NOT NULL AUTO_INCREMENT,
  `score` DECIMAL(10,9) NULL DEFAULT NULL,
  `variance` DECIMAL(10,9) NULL DEFAULT NULL,
  `idLUSource` INT(11) UNSIGNED NOT NULL,
  `idLUTarget` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idLUEquivalence`),
  INDEX `fk_LUEquivalence_LU1_idx` (`idLUSource` ASC) VISIBLE,
  INDEX `fk_LUEquivalence_LU2_idx` (`idLUTarget` ASC) VISIBLE,
  CONSTRAINT `fk_LUEquivalence_LU1`
    FOREIGN KEY (`idLUSource`)
    REFERENCES `webtool42_db`.`lu` (`idLU`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_LUEquivalence_LU2`
    FOREIGN KEY (`idLUTarget`)
    REFERENCES `webtool42_db`.`lu` (`idLU`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = dec8
COMMENT = '		';


-- -----------------------------------------------------
-- Table `webtool42_db`.`pos_udpos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`pos_udpos` (
  `idPOS` INT(11) UNSIGNED NOT NULL,
  `idUDPOS` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idPOS`, `idUDPOS`),
  INDEX `fk_POS_has_UDPOS_UDPOS1_idx` (`idUDPOS` ASC) VISIBLE,
  INDEX `fk_POS_has_UDPOS_POS1_idx` (`idPOS` ASC) VISIBLE,
  CONSTRAINT `fk_POS_has_UDPOS_POS1`
    FOREIGN KEY (`idPOS`)
    REFERENCES `webtool42_db`.`pos` (`idPOS`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_POS_has_UDPOS_UDPOS1`
    FOREIGN KEY (`idUDPOS`)
    REFERENCES `webtool42_db`.`udpos` (`idUDPOS`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`ptequivalence`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`ptequivalence` (
  `idPTEquivalence` INT(11) NOT NULL AUTO_INCREMENT,
  `LangSource` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `LangDest` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `LabelSource` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `LabelDest` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  PRIMARY KEY (`idPTEquivalence`))
ENGINE = InnoDB
AUTO_INCREMENT = 213
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`qualia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`qualia` (
  `idQualia` INT(11) NOT NULL AUTO_INCREMENT,
  `info` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `infoInverse` VARCHAR(50) NULL DEFAULT NULL,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `idTypeInstance` INT(11) NOT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  `idFrame` INT(11) UNSIGNED NULL DEFAULT NULL,
  `idFrameElement1` INT(11) UNSIGNED NULL DEFAULT NULL,
  `idFrameElement2` INT(11) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`idQualia`),
  INDEX `idx_Qualia_TypeInstance` (`idTypeInstance` ASC) VISIBLE,
  INDEX `idx_Qualia_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `Idx_Qualia_Entry` (`entry` ASC) VISIBLE,
  INDEX `idx_Qualia_Frame` (`idFrame` ASC) VISIBLE,
  INDEX `idx_Qualia_FrameElement1` (`idFrameElement1` ASC) VISIBLE,
  INDEX `idx_Qualia_FrameElement2` (`idFrameElement2` ASC) VISIBLE,
  CONSTRAINT `fk_Qualia_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Qualia_Frame`
    FOREIGN KEY (`idFrame`)
    REFERENCES `webtool42_db`.`frame` (`idFrame`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Qualia_FrameElement1`
    FOREIGN KEY (`idFrameElement1`)
    REFERENCES `webtool42_db`.`frameelement` (`idFrameElement`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Qualia_FrameElement2`
    FOREIGN KEY (`idFrameElement2`)
    REFERENCES `webtool42_db`.`frameelement` (`idFrameElement`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Qualia_TypeInstance`
    FOREIGN KEY (`idTypeInstance`)
    REFERENCES `webtool42_db`.`typeinstance` (`idTypeInstance`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 85
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`rls_access`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`rls_access` (
  `idRLSAccess` INT(11) NOT NULL AUTO_INCREMENT,
  `user` VARCHAR(45) NULL DEFAULT NULL,
  `value` TINYINT UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`idRLSAccess`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `webtool42_db`.`semantictype`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`semantictype` (
  `idSemanticType` INT(11) NOT NULL AUTO_INCREMENT,
  `entry` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  `idDomain` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idSemanticType`),
  INDEX `idx_SemanticType_Entity` (`idEntity` ASC) VISIBLE,
  INDEX `idx_SemanticType_Domain` (`idDomain` ASC) VISIBLE,
  INDEX `idx_SemanticType_Entry` (`entry` ASC) VISIBLE,
  CONSTRAINT `fk_SemanticType_Domain`
    FOREIGN KEY (`idDomain`)
    REFERENCES `webtool42_db`.`domain` (`idDomain`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SemanticType_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 982
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`sentence_translation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`sentence_translation` (
  `idSentenceBase` INT(11) UNSIGNED NOT NULL,
  `idSentenceTranslation` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idSentenceBase`, `idSentenceTranslation`),
  INDEX `idx_Sentence_SentenceTranslation` (`idSentenceTranslation` ASC) VISIBLE,
  INDEX `idx_Sentence_SentenceBase` (`idSentenceBase` ASC) VISIBLE,
  CONSTRAINT `fk_Sentence_Translation_Sentence1`
    FOREIGN KEY (`idSentenceBase`)
    REFERENCES `webtool42_db`.`sentence` (`idSentence`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Sentence_Translation_Sentence2`
    FOREIGN KEY (`idSentenceTranslation`)
    REFERENCES `webtool42_db`.`sentence` (`idSentence`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`timeline`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`timeline` (
  `idTimeline` INT(11) NOT NULL AUTO_INCREMENT,
  `tlDateTime` DATETIME NULL DEFAULT NULL,
  `author` VARCHAR(50) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `operation` CHAR(1) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `tableName` VARCHAR(45) NULL DEFAULT NULL,
  `id` INT(11) NULL DEFAULT NULL,
  `idUser` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idTimeline`),
  INDEX `idx_Timeline_User` (`idUser` ASC) VISIBLE,
  INDEX `idx_Timeline_Operation` (`operation` ASC) VISIBLE,
  INDEX `idx_Timeline_Table` (`tableName` ASC, `id` ASC) VISIBLE,
  INDEX `idx_Timeline_Author` (`author` ASC) VISIBLE,
  INDEX `idx_Timeline_DateTime` (`tlDateTime` ASC) VISIBLE,
  CONSTRAINT `fk_Timeline_User`
    FOREIGN KEY (`idUser`)
    REFERENCES `webtool42_db`.`user` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 1341671
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`topframe`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`topframe` (
  `idTopFrame` INT(11) NOT NULL AUTO_INCREMENT,
  `frameBase` VARCHAR(255) NULL DEFAULT NULL,
  `frameTop` VARCHAR(255) NULL DEFAULT NULL,
  `frameCategory` VARCHAR(45) NULL DEFAULT NULL,
  `score` FLOAT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idTopFrame`),
  INDEX `idx_TopFrame_frameBase` (`frameBase` ASC) VISIBLE,
  INDEX `idx_TopFrame_frameTop` (`frameTop` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 4252
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`udfeature`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`udfeature` (
  `idUDFeature` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NULL DEFAULT NULL,
  `info` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  `idTypeInstance` INT(11) NOT NULL,
  PRIMARY KEY (`idUDFeature`),
  INDEX `idx_UDFeature_Entity1_idx` (`idEntity` ASC) VISIBLE,
  INDEX `idx_UDFeature_TypeInstance1_idx` (`idTypeInstance` ASC) VISIBLE,
  CONSTRAINT `fk_UDFeature_TypeInstance`
    FOREIGN KEY (`idTypeInstance`)
    REFERENCES `webtool42_db`.`typeinstance` (`idTypeInstance`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_udfeature_Entity`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 509
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`udrelation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`udrelation` (
  `idUDRelation` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `info` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  `idTypeInstance` INT(11) NOT NULL,
  PRIMARY KEY (`idUDRelation`),
  INDEX `fk_UDRelation_TypeInstance1_idx` (`idTypeInstance` ASC) VISIBLE,
  INDEX `fk_UDRelation_Entity1_idx` (`idEntity` ASC) VISIBLE,
  CONSTRAINT `fk_UDRelation_TypeInstance`
    FOREIGN KEY (`idTypeInstance`)
    REFERENCES `webtool42_db`.`typeinstance` (`idTypeInstance`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 38
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`user_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`user_group` (
  `idUser` INT(11) NOT NULL,
  `idGroup` INT(11) NOT NULL,
  PRIMARY KEY (`idUser`, `idGroup`),
  INDEX `idx_user_group_group` (`idGroup` ASC) VISIBLE,
  INDEX `idx_user_group_user` (`idUser` ASC) VISIBLE,
  CONSTRAINT `fk_group_user`
    FOREIGN KEY (`idGroup`)
    REFERENCES `webtool42_db`.`group` (`idGroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_group`
    FOREIGN KEY (`idUser`)
    REFERENCES `webtool42_db`.`user` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`userannotation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`userannotation` (
  `idUserAnnotation` INT(11) NOT NULL AUTO_INCREMENT,
  `idUser` INT(11) NOT NULL,
  `idSentenceStart` INT(11) UNSIGNED NOT NULL,
  `idSentenceEnd` INT(11) UNSIGNED NOT NULL,
  `idDocument` INT(11) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`idUserAnnotation`),
  INDEX `idx_UserAnnotation_User` (`idUser` ASC) VISIBLE,
  INDEX `idx_UserAnnotation_Sentence1` (`idSentenceStart` ASC) VISIBLE,
  INDEX `idx_UserAnnotation_Sentence2` (`idSentenceEnd` ASC) VISIBLE,
  INDEX `idx_UserAnnotation_Document` (`idDocument` ASC) VISIBLE,
  CONSTRAINT `fk_UserAnnotation_Document`
    FOREIGN KEY (`idDocument`)
    REFERENCES `webtool42_db`.`document` (`idDocument`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_UserAnnotation_User`
    FOREIGN KEY (`idUser`)
    REFERENCES `webtool42_db`.`user` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 319
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`valencelu`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`valencelu` (
  `idValenceLU` INT(11) NOT NULL AUTO_INCREMENT,
  `idLanguage` INT(11) UNSIGNED NOT NULL,
  `idFrame` INT(11) UNSIGNED NOT NULL,
  `idLU` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idValenceLU`),
  INDEX `idx_ValenceLU_Language` (`idLanguage` ASC) VISIBLE,
  INDEX `idx_ValenceLU_Frame` (`idFrame` ASC) VISIBLE,
  INDEX `idx_ValenceLU_LU` (`idLU` ASC) VISIBLE,
  CONSTRAINT `fk_ValenceLU_Frame1`
    FOREIGN KEY (`idFrame`)
    REFERENCES `webtool42_db`.`frame` (`idFrame`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ValenceLU_LU1`
    FOREIGN KEY (`idLU`)
    REFERENCES `webtool42_db`.`lu` (`idLU`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ValenceLU_Language1`
    FOREIGN KEY (`idLanguage`)
    REFERENCES `webtool42_db`.`language` (`idLanguage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`valencepattern`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`valencepattern` (
  `idValencePattern` INT(11) NOT NULL AUTO_INCREMENT,
  `countPattern` INT(11) NULL DEFAULT 0,
  `idValenceLU` INT(11) NOT NULL,
  PRIMARY KEY (`idValencePattern`),
  INDEX `idx_ValencePattern_ValenceLU` (`idValenceLU` ASC) VISIBLE,
  CONSTRAINT `fk_ValencePattern_ValenceLU1`
    FOREIGN KEY (`idValenceLU`)
    REFERENCES `webtool42_db`.`valencelu` (`idValenceLU`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`valencevalent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`valencevalent` (
  `idValenceValent` INT(11) NOT NULL AUTO_INCREMENT,
  `idFrameElement` INT(11) UNSIGNED NOT NULL,
  `GF` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `GFSource` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `PT` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `idValencePattern` INT(11) NOT NULL,
  PRIMARY KEY (`idValenceValent`),
  INDEX `idx_ValencePattern_FrameElement` (`idFrameElement` ASC) VISIBLE,
  INDEX `idx_ValenceValent_ValencePattern` (`idValencePattern` ASC) VISIBLE,
  CONSTRAINT `fk_ValencePattern_FrameElement1`
    FOREIGN KEY (`idFrameElement`)
    REFERENCES `webtool42_db`.`frameelement` (`idFrameElement`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ValenceValent_ValencePattern1`
    FOREIGN KEY (`idValencePattern`)
    REFERENCES `webtool42_db`.`valencepattern` (`idValencePattern`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`video`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`video` (
  `idVideo` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(255) NULL,
  `originalFile` VARCHAR(255) NULL,
  `sha1Name` VARCHAR(45) NULL,
  `currentURL` VARCHAR(255) NULL,
  `width` INT NULL,
  `height` INT NULL,
  `idLanguage` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idVideo`),
  INDEX `fk_video_language1_idx` (`idLanguage` ASC) VISIBLE,
  CONSTRAINT `fk_video_language1`
    FOREIGN KEY (`idLanguage`)
    REFERENCES `webtool42_db`.`language` (`idLanguage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`wordmm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`wordmm` (
  `idWordMM` INT(11) NOT NULL AUTO_INCREMENT,
  `word` VARCHAR(255) NULL DEFAULT NULL,
  `startTimestamp` VARCHAR(255) NULL DEFAULT NULL,
  `endTimestamp` VARCHAR(255) NULL DEFAULT NULL,
  `startTime` FLOAT(11) NULL DEFAULT NULL,
  `endTime` FLOAT(11) NULL DEFAULT NULL,
  `origin` INT(11) NULL DEFAULT NULL,
  `idSentenceMM` INT(11) NULL DEFAULT NULL,
  `idDocumentMM` INT(11) NOT NULL,
  `idDynamicSentenceMM` INT(11) NULL DEFAULT NULL,
  `idDocumentSentence` INT NULL,
  `idVideo` INT NOT NULL,
  PRIMARY KEY (`idWordMM`),
  INDEX `idx_WordMM_SentenceMM` (`idSentenceMM` ASC) VISIBLE,
  INDEX `idx_wordmm_dynamicsentencemm` (`idDynamicSentenceMM` ASC) VISIBLE,
  INDEX `fk_wordmm_video1_idx` (`idVideo` ASC) VISIBLE,
  CONSTRAINT `fk_wordmm_video1`
    FOREIGN KEY (`idVideo`)
    REFERENCES `webtool42_db`.`video` (`idVideo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 80584
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`projectgroup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`projectgroup` (
  `idProjectGroup` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `description` TEXT NULL,
  PRIMARY KEY (`idProjectGroup`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`project`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`project` (
  `idProject` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_bin' NULL,
  `description` TEXT CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_bin' NULL,
  `idProjectGroup` INT NOT NULL,
  PRIMARY KEY (`idProject`),
  INDEX `fk_project_projectgroup1_idx` (`idProjectGroup` ASC) VISIBLE,
  CONSTRAINT `fk_project_projectgroup1`
    FOREIGN KEY (`idProjectGroup`)
    REFERENCES `webtool42_db`.`projectgroup` (`idProjectGroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`dashboard`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`dashboard` (
  `idDashboard` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `timeLastUpdate` DATETIME NOT NULL,
  PRIMARY KEY (`idDashboard`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `webtool42_db`.`staticobjectmm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`staticobjectmm` (
  `idStaticObjectMM` INT(11) NOT NULL AUTO_INCREMENT,
  `scene` INT(11) NULL DEFAULT NULL,
  `nobndbox` INT(11) NULL DEFAULT NULL,
  `idFlickr30kEntitiesChain` INT(11) NULL DEFAULT NULL,
  `idImageMM` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idStaticObjectMM`),
  INDEX `idx_staticobjectmm_imagemm` (`idImageMM` ASC) VISIBLE,
  INDEX `idx_staticobjectmm_idFlickr30kEntitiesChain` (`idFlickr30kEntitiesChain` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 645865
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`staticobjectsentencemm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`staticobjectsentencemm` (
  `idStaticObjectSentenceMM` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(2555) CHARACTER SET 'utf8' NULL DEFAULT NULL,
  `startWord` INT(11) NULL DEFAULT NULL,
  `endWord` INT(11) NULL DEFAULT NULL,
  `idStaticObjectMM` INT(11) NOT NULL,
  `idStaticSentenceMM` INT(11) NOT NULL,
  PRIMARY KEY (`idStaticObjectSentenceMM`),
  INDEX `idx_staticobjectsentencemm_staticobjectmm` (`idStaticObjectMM` ASC) VISIBLE,
  INDEX `idx_staticobjectsentencemm_staticsentencemm` (`idStaticSentenceMM` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 2730535
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`staticsentencemm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`staticsentencemm` (
  `idStaticSentenceMM` INT(11) NOT NULL AUTO_INCREMENT,
  `idFlickr30k` INT(11) NULL DEFAULT NULL,
  `idSentence` INT(11) UNSIGNED NOT NULL,
  `idImageMM` INT(11) NOT NULL,
  `idDocument` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idStaticSentenceMM`),
  INDEX `idx_sentenceflickr30k_sentence` (`idSentence` ASC) VISIBLE,
  INDEX `idx_sentenceflickr30k_imagemm` (`idImageMM` ASC) VISIBLE,
  INDEX `idx_sentenceflickr30k_document` (`idDocument` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 951169
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`taskgroup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`taskgroup` (
  `idTaskGroup` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `description` TEXT NULL,
  PRIMARY KEY (`idTaskGroup`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`task`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`task` (
  `idTask` INT NOT NULL AUTO_INCREMENT,
  `size` INT NULL,
  `isActive` TINYINT(1) NULL,
  `type` VARCHAR(45) NULL,
  `createdAt` TIMESTAMP NULL,
  `name` VARCHAR(255) NULL,
  `description` TEXT NULL,
  `idProject` INT NULL,
  `idTaskGroup` INT NOT NULL,
  PRIMARY KEY (`idTask`),
  INDEX `fk_task_project1_idx` (`idProject` ASC) VISIBLE,
  INDEX `fk_task_taskgroup1_idx` (`idTaskGroup` ASC) VISIBLE,
  CONSTRAINT `fk_task_project1`
    FOREIGN KEY (`idProject`)
    REFERENCES `webtool42_db`.`project` (`idProject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_task_taskgroup1`
    FOREIGN KEY (`idTaskGroup`)
    REFERENCES `webtool42_db`.`taskgroup` (`idTaskGroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`usertask`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`usertask` (
  `idUserTask` INT NOT NULL AUTO_INCREMENT,
  `idUser` INT(11) NOT NULL,
  `idTask` INT NOT NULL,
  `isIgnore` TINYINT(1) NULL,
  `isActive` TINYINT(1) NULL,
  `createdAt` TIMESTAMP NULL,
  PRIMARY KEY (`idUserTask`),
  INDEX `idx_usertask_task` (`idTask` ASC) VISIBLE,
  INDEX `idx_usertask_user` (`idUser` ASC) VISIBLE,
  CONSTRAINT `fk_user_has_task_user`
    FOREIGN KEY (`idUser`)
    REFERENCES `webtool42_db`.`user` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_task_task`
    FOREIGN KEY (`idTask`)
    REFERENCES `webtool42_db`.`task` (`idTask`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`annotationmm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`annotationmm` (
  `idAnnotationMM` INT(11) NOT NULL AUTO_INCREMENT,
  `idObjectSentenceMM` INT(11) NOT NULL,
  `idFrameElement` INT(11) UNSIGNED NULL DEFAULT NULL,
  `idFrame` INT(11) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`idAnnotationMM`),
  INDEX `idx_annotationmm_objectsentencemm` (`idObjectSentenceMM` ASC) VISIBLE,
  INDEX `idx_annotationmm_frameelement` (`idFrameElement` ASC) VISIBLE,
  INDEX `idx_annotationmm_frame` (`idFrame` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 376
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`boundingbox`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`boundingbox` (
  `idBoundingBox` INT NOT NULL AUTO_INCREMENT,
  `frameNumber` INT NULL,
  `frameTime` FLOAT NULL,
  `x` INT NULL,
  `y` INT NULL,
  `width` INT NULL,
  `height` INT NULL,
  `blocked` INT NULL,
  `isGroundTruth` INT NULL,
  PRIMARY KEY (`idBoundingBox`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`tokenizedsentence`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`tokenizedsentence` (
  `idTokenizedSentence` INT NOT NULL,
  `createdAt` TIMESTAMP NULL,
  `tokenizer` VARCHAR(45) NULL,
  `idSentence` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idTokenizedSentence`),
  INDEX `fk_tokenizedsentence_sentence1_idx` (`idSentence` ASC) VISIBLE,
  CONSTRAINT `fk_tokenizedsentence_sentence`
    FOREIGN KEY (`idSentence`)
    REFERENCES `webtool42_db`.`sentence` (`idSentence`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`token`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`token` (
  `idToken` INT NOT NULL AUTO_INCREMENT,
  `token` VARCHAR(45) NULL,
  `idTokenizedSentence` INT NOT NULL,
  PRIMARY KEY (`idToken`),
  INDEX `fk_token_tokenizedsentence1_idx` (`idTokenizedSentence` ASC) VISIBLE,
  CONSTRAINT `fk_token_tokenizedsentence1`
    FOREIGN KEY (`idTokenizedSentence`)
    REFERENCES `webtool42_db`.`tokenizedsentence` (`idTokenizedSentence`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`textspan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`textspan` (
  `idTextSpan` INT NOT NULL AUTO_INCREMENT,
  `startChar` INT NULL,
  `endChar` INT NULL,
  `multi` TINYINT(1) NULL,
  `idLayer` INT(11) UNSIGNED NULL,
  `idInstantiationType` INT(11) NULL,
  `startWord` INT NULL,
  `endWord` INT NULL,
  `idSentence` INT(11) UNSIGNED NOT NULL,
  `idLayerType` INT(11) UNSIGNED NULL,
  `idAnnotationSet` INT(11) UNSIGNED NULL,
  PRIMARY KEY (`idTextSpan`),
  INDEX `fk_textspan_layer1_idx` (`idLayer` ASC) VISIBLE,
  INDEX `fk_textspan_typeinstance1_idx` (`idInstantiationType` ASC) VISIBLE,
  INDEX `fk_textspan_sentence1_idx` (`idSentence` ASC) VISIBLE,
  INDEX `fk_textspan_layertype1_idx` (`idLayerType` ASC) VISIBLE,
  INDEX `fk_textspan_annotationset1_idx` (`idAnnotationSet` ASC) VISIBLE,
  CONSTRAINT `fk_textspan_layer1`
    FOREIGN KEY (`idLayer`)
    REFERENCES `webtool42_db`.`layer` (`idLayer`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_textspan_typeinstance1`
    FOREIGN KEY (`idInstantiationType`)
    REFERENCES `webtool42_db`.`typeinstance` (`idTypeInstance`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_textspan_sentence1`
    FOREIGN KEY (`idSentence`)
    REFERENCES `webtool42_db`.`sentence` (`idSentence`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_textspan_layertype1`
    FOREIGN KEY (`idLayerType`)
    REFERENCES `webtool42_db`.`layertype` (`idLayerType`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_textspan_annotationset1`
    FOREIGN KEY (`idAnnotationSet`)
    REFERENCES `webtool42_db`.`annotationset` (`idAnnotationSet`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`annotation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`annotation` (
  `idAnnotation` INT NOT NULL AUTO_INCREMENT,
  `idEntity` INT(11) UNSIGNED NOT NULL,
  `idUserTask` INT NULL,
  `idUser` INT(11) NULL,
  `idTextSpan` INT NULL,
  `idStaticObject` INT NULL,
  `idDynamicObject` INT NULL,
  `createdAt` TIMESTAMP NULL,
  `status` VARCHAR(45) NULL,
  PRIMARY KEY (`idAnnotation`),
  INDEX `idx_annotationobjectentity_entity` (`idEntity` ASC) VISIBLE,
  INDEX `fk_annotation_usertask1_idx` (`idUserTask` ASC) VISIBLE,
  INDEX `fk_annotation_user1_idx` (`idUser` ASC) VISIBLE,
  INDEX `fk_annotation_textspan1_idx` (`idTextSpan` ASC) VISIBLE,
  INDEX `fk_annotation_staticobject1_idx` (`idStaticObject` ASC) VISIBLE,
  INDEX `fk_annotation_dynamicobject1_idx` (`idDynamicObject` ASC) VISIBLE,
  INDEX `idx_annotation_entity_dynamic` (`idEntity` ASC, `idDynamicObject` ASC) VISIBLE,
  INDEX `idx_annotation_entity_static` (`idEntity` ASC, `idStaticObject` ASC) VISIBLE,
  INDEX `idx_annotation_entity_textspan` (`idEntity` ASC, `idTextSpan` ASC) VISIBLE,
  CONSTRAINT `fk_annotationobjectentity_entity1`
    FOREIGN KEY (`idEntity`)
    REFERENCES `webtool42_db`.`entity` (`idEntity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotation_usertask1`
    FOREIGN KEY (`idUserTask`)
    REFERENCES `webtool42_db`.`usertask` (`idUserTask`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotation_user1`
    FOREIGN KEY (`idUser`)
    REFERENCES `webtool42_db`.`user` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotation_textspan1`
    FOREIGN KEY (`idTextSpan`)
    REFERENCES `webtool42_db`.`textspan` (`idTextSpan`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotation_staticobject1`
    FOREIGN KEY (`idStaticObject`)
    REFERENCES `webtool42_db`.`staticobject` (`idStaticObject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotation_dynamicobject1`
    FOREIGN KEY (`idDynamicObject`)
    REFERENCES `webtool42_db`.`dynamicobject` (`idDynamicObject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`project_dataset`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`project_dataset` (
  `idProject` INT NOT NULL,
  `idDataset` INT NOT NULL,
  `isSource` TINYINT(1) NULL DEFAULT 0,
  PRIMARY KEY (`idProject`, `idDataset`),
  INDEX `fk_project_has_dataset_dataset1_idx` (`idDataset` ASC) VISIBLE,
  INDEX `fk_project_has_dataset_project1_idx` (`idProject` ASC) VISIBLE,
  INDEX `idx_project_dataset_covering` (`idProject` ASC, `idDataset` ASC) VISIBLE,
  CONSTRAINT `fk_project_has_dataset_project1`
    FOREIGN KEY (`idProject`)
    REFERENCES `webtool42_db`.`project` (`idProject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_project_has_dataset_dataset1`
    FOREIGN KEY (`idDataset`)
    REFERENCES `webtool42_db`.`dataset` (`idDataset`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`timespan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`timespan` (
  `idTimespan` INT NOT NULL AUTO_INCREMENT,
  `startTime` FLOAT NULL,
  `endTime` FLOAT NULL,
  PRIMARY KEY (`idTimespan`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`dataset_corpus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`dataset_corpus` (
  `idCorpus` INT(11) UNSIGNED NOT NULL,
  `idDataset` INT NOT NULL,
  `isSource` TINYINT(1) NULL DEFAULT 0,
  PRIMARY KEY (`idCorpus`, `idDataset`),
  INDEX `fk_corpus_has_dataset_dataset1_idx` (`idDataset` ASC) VISIBLE,
  INDEX `fk_corpus_has_dataset_corpus1_idx` (`idCorpus` ASC) VISIBLE,
  INDEX `idx_dataset_corpus_covering` (`idDataset` ASC, `idCorpus` ASC) VISIBLE,
  CONSTRAINT `fk_corpus_has_dataset_corpus1`
    FOREIGN KEY (`idCorpus`)
    REFERENCES `webtool42_db`.`corpus` (`idCorpus`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_corpus_has_dataset_dataset1`
    FOREIGN KEY (`idDataset`)
    REFERENCES `webtool42_db`.`dataset` (`idDataset`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`usertask_document`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`usertask_document` (
  `idUserTaskDocument` INT NOT NULL AUTO_INCREMENT,
  `idUserTask` INT NOT NULL,
  `idDocument` INT(11) UNSIGNED NULL,
  `idCorpus` INT(11) UNSIGNED NULL,
  PRIMARY KEY (`idUserTaskDocument`),
  INDEX `fk_document_has_usertask_usertask1_idx` (`idUserTask` ASC) VISIBLE,
  INDEX `fk_document_has_usertask_document1_idx` (`idDocument` ASC) VISIBLE,
  INDEX `fk_usertask_document_corpus1_idx` (`idCorpus` ASC) VISIBLE,
  CONSTRAINT `fk_document_has_usertask_document1`
    FOREIGN KEY (`idDocument`)
    REFERENCES `webtool42_db`.`document` (`idDocument`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_document_has_usertask_usertask1`
    FOREIGN KEY (`idUserTask`)
    REFERENCES `webtool42_db`.`usertask` (`idUserTask`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_usertask_document_corpus1`
    FOREIGN KEY (`idCorpus`)
    REFERENCES `webtool42_db`.`corpus` (`idCorpus`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`staticannotationmm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`staticannotationmm` (
  `idStaticAnnotationMM` INT(11) NOT NULL AUTO_INCREMENT,
  `idFrameElement` INT(11) UNSIGNED NULL DEFAULT NULL,
  `idLemma` INT(11) UNSIGNED NULL DEFAULT NULL,
  `idLU` INT(11) UNSIGNED NULL DEFAULT NULL,
  `idFrame` INT(11) UNSIGNED NULL DEFAULT NULL,
  `idStaticObjectSentenceMM` INT(11) NOT NULL,
  PRIMARY KEY (`idStaticAnnotationMM`),
  INDEX `idx_annotationflickr30k_frameelement` (`idFrameElement` ASC) VISIBLE,
  INDEX `idx_annotationflickr30k_lemma` (`idLemma` ASC) VISIBLE,
  INDEX `idx_annotationflickr30k_lu` (`idLU` ASC) VISIBLE,
  INDEX `idx_annotationflickr30k_frame` (`idFrame` ASC) VISIBLE,
  INDEX `idx_staticannotationmm_staticobjectsentencemm` (`idStaticObjectSentenceMM` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 2201319
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`staticbboxmm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`staticbboxmm` (
  `idStaticBBoxMM` INT(11) NOT NULL AUTO_INCREMENT,
  `x` INT(11) NULL DEFAULT NULL,
  `y` INT(11) NULL DEFAULT NULL,
  `width` INT(11) NULL DEFAULT NULL,
  `height` INT(11) NULL DEFAULT NULL,
  `idStaticObjectMM` INT(11) NOT NULL,
  PRIMARY KEY (`idStaticBBoxMM`),
  INDEX `idx_staticbboxmm_staticobjectmm` (`idStaticObjectMM` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 8354113
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`annotationcomment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`annotationcomment` (
  `idAnnotationComment` INT NOT NULL AUTO_INCREMENT,
  `comment` TEXT NULL,
  `createdAt` TIMESTAMP NULL DEFAULT NULL,
  `updatedAt` TIMESTAMP NULL DEFAULT NULL,
  `idDynamicObject` INT(11) NULL DEFAULT NULL,
  `idStaticObject` INT(11) NULL DEFAULT NULL,
  `idAnnotationSet` INT(11) UNSIGNED NULL DEFAULT NULL,
  `idUser` INT(11) NULL DEFAULT NULL,
  `idDocument` INT(11) UNSIGNED NULL,
  `idObject` INT(11) NULL,
  `annotationType` VARCHAR(45) NULL,
  PRIMARY KEY (`idAnnotationComment`),
  INDEX `fk_annotationcomment_annotationset1_idx` (`idAnnotationSet` ASC) VISIBLE,
  INDEX `fk_annotationcomment_user1_idx` (`idUser` ASC) VISIBLE,
  INDEX `fk_annotationcomment_dynamicobject1_idx` (`idDynamicObject` ASC) VISIBLE,
  INDEX `fk_annotationcomment_staticobject1_idx` (`idStaticObject` ASC) VISIBLE,
  INDEX `fk_annotationcomment_document1_idx` (`idDocument` ASC) VISIBLE,
  CONSTRAINT `fk_annotationcomment_annotationset1`
    FOREIGN KEY (`idAnnotationSet`)
    REFERENCES `webtool42_db`.`annotationset` (`idAnnotationSet`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotationcomment_dynamicobject1`
    FOREIGN KEY (`idDynamicObject`)
    REFERENCES `webtool42_db`.`dynamicobject` (`idDynamicObject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotationcomment_staticobject1`
    FOREIGN KEY (`idStaticObject`)
    REFERENCES `webtool42_db`.`staticobject` (`idStaticObject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotationcomment_user1`
    FOREIGN KEY (`idUser`)
    REFERENCES `webtool42_db`.`user` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotationcomment_document1`
    FOREIGN KEY (`idDocument`)
    REFERENCES `webtool42_db`.`document` (`idDocument`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`qualiarelation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`qualiarelation` (
  `idQualiaRelation` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `direct` VARCHAR(45) NULL,
  `inverse` VARCHAR(45) NULL,
  PRIMARY KEY (`idQualiaRelation`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`qualiastructure`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`qualiastructure` (
  `idQualiaStructure` INT NOT NULL AUTO_INCREMENT,
  `idFrame` INT(11) UNSIGNED NOT NULL,
  `idQualiaRelation` INT NOT NULL,
  PRIMARY KEY (`idQualiaStructure`),
  INDEX `fk_qualiastructure_frame1_idx` (`idFrame` ASC) VISIBLE,
  INDEX `fk_qualiastructure_qualiarelation1_idx` (`idQualiaRelation` ASC) VISIBLE,
  CONSTRAINT `fk_qualiastructure_frame1`
    FOREIGN KEY (`idFrame`)
    REFERENCES `webtool42_db`.`frame` (`idFrame`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_qualiastructure_qualiarelation1`
    FOREIGN KEY (`idQualiaRelation`)
    REFERENCES `webtool42_db`.`qualiarelation` (`idQualiaRelation`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`qualiaargument`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`qualiaargument` (
  `idQualiaArgument` INT NOT NULL AUTO_INCREMENT,
  `order` INT NULL DEFAULT 0,
  `type` VARCHAR(45) NULL,
  `idQualiaStructure` INT NOT NULL,
  `idFrameElement` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idQualiaArgument`),
  INDEX `fk_qualiaargument_qualiastructure1_idx` (`idQualiaStructure` ASC) VISIBLE,
  INDEX `fk_qualiaargument_frameelement1_idx` (`idFrameElement` ASC) VISIBLE,
  CONSTRAINT `fk_qualiaargument_qualiastructure1`
    FOREIGN KEY (`idQualiaStructure`)
    REFERENCES `webtool42_db`.`qualiastructure` (`idQualiaStructure`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_qualiaargument_frameelement1`
    FOREIGN KEY (`idFrameElement`)
    REFERENCES `webtool42_db`.`frameelement` (`idFrameElement`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`qualialu`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`qualialu` (
  `idQualiaLU` INT NOT NULL AUTO_INCREMENT,
  `idQualiaStructure` INT NOT NULL,
  `idLU1` INT(11) UNSIGNED NOT NULL,
  `idLU2` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idQualiaLU`),
  INDEX `fk_qualialu_qualiastructure1_idx` (`idQualiaStructure` ASC) VISIBLE,
  INDEX `fk_qualialu_lu1_idx` (`idLU1` ASC) VISIBLE,
  INDEX `fk_qualialu_lu2_idx` (`idLU2` ASC) VISIBLE,
  CONSTRAINT `fk_qualialu_qualiastructure1`
    FOREIGN KEY (`idQualiaStructure`)
    REFERENCES `webtool42_db`.`qualiastructure` (`idQualiaStructure`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_qualialu_lu1`
    FOREIGN KEY (`idLU1`)
    REFERENCES `webtool42_db`.`lu` (`idLU`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_qualialu_lu2`
    FOREIGN KEY (`idLU2`)
    REFERENCES `webtool42_db`.`lu` (`idLU`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`project_manager`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`project_manager` (
  `idProject` INT NOT NULL,
  `idUser` INT(11) NOT NULL,
  PRIMARY KEY (`idProject`, `idUser`),
  INDEX `fk_project_has_user_user1_idx` (`idUser` ASC) VISIBLE,
  INDEX `fk_project_has_user_project1_idx` (`idProject` ASC) VISIBLE,
  CONSTRAINT `fk_project_has_user_project1`
    FOREIGN KEY (`idProject`)
    REFERENCES `webtool42_db`.`project` (`idProject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_project_has_user_user1`
    FOREIGN KEY (`idUser`)
    REFERENCES `webtool42_db`.`user` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`lucandidate`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`lucandidate` (
  `idLUCandidate` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `senseDescription` VARCHAR(4000) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `frameCandidate` VARCHAR(45) NULL,
  `discussion` TEXT NULL,
  `idLemma` INT(11) UNSIGNED NULL,
  `idFrame` INT(11) UNSIGNED NULL,
  `idDocument` INT(11) UNSIGNED NULL,
  `idBoundingBox` INT(11) UNSIGNED NULL,
  `idDocumentSentence` INT(11) UNSIGNED NULL,
  `incorporatedFE` INT(11) UNSIGNED NULL,
  `idUser` INT(11) NOT NULL,
  `createdAt` TIMESTAMP NULL,
  `idLexicon` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idLUCandidate`),
  INDEX `idx_LU_Lemma` (`idLemma` ASC) VISIBLE,
  INDEX `idx_LU_Frame` (`idFrame` ASC) VISIBLE,
  INDEX `fk_lucandidate_user2_idx` (`idUser` ASC) VISIBLE,
  INDEX `fk_lucandidate_lexicon1_idx` (`idLexicon` ASC) VISIBLE,
  CONSTRAINT `fk_LU_Frame0`
    FOREIGN KEY (`idFrame`)
    REFERENCES `webtool42_db`.`frame` (`idFrame`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_LU_Lemma0`
    FOREIGN KEY (`idLemma`)
    REFERENCES `webtool42_db`.`lemma` (`idLemma`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lucandidate_user2`
    FOREIGN KEY (`idUser`)
    REFERENCES `webtool42_db`.`user` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lucandidate_lexicon1`
    FOREIGN KEY (`idLexicon`)
    REFERENCES `webtool42_db`.`lexicon` (`idLexicon`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 38797
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`message`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`message` (
  `idMessage` INT NOT NULL AUTO_INCREMENT,
  `text` TEXT NULL,
  `active` TINYINT(1) NULL,
  `createdAt` DATETIME NULL,
  `accessedAt` DATETIME NULL,
  `dismissedAt` DATETIME NULL,
  `class` VARCHAR(45) NULL,
  `idUserFrom` INT(11) NOT NULL,
  `idUserTo` INT(11) NOT NULL,
  PRIMARY KEY (`idMessage`),
  INDEX `fk_message_user1_idx` (`idUserFrom` ASC) VISIBLE,
  INDEX `fk_message_user2_idx` (`idUserTo` ASC) VISIBLE,
  CONSTRAINT `fk_message_user1`
    FOREIGN KEY (`idUserFrom`)
    REFERENCES `webtool42_db`.`user` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_message_user2`
    FOREIGN KEY (`idUserTo`)
    REFERENCES `webtool42_db`.`user` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`lexicon_expression`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`lexicon_expression` (
  `idLexiconExpression` INT NOT NULL AUTO_INCREMENT,
  `head` TINYINT(1) NULL,
  `breakBefore` TINYINT(1) NULL,
  `position` INT UNSIGNED NULL,
  `idLexicon` INT(11) UNSIGNED NOT NULL,
  `idExpression` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idLexiconExpression`),
  INDEX `fk_lexiconmwe_lexicon1_idx` (`idExpression` ASC) VISIBLE,
  INDEX `fk_lexiconmwe_lexicon2_idx` (`idLexicon` ASC) VISIBLE,
  CONSTRAINT `fk_lexiconmwe_lexicon1`
    FOREIGN KEY (`idExpression`)
    REFERENCES `webtool42_db`.`lexicon` (`idLexicon`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lexiconmwe_lexicon2`
    FOREIGN KEY (`idLexicon`)
    REFERENCES `webtool42_db`.`lexicon` (`idLexicon`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`lexicon_feature`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`lexicon_feature` (
  `idLexicon` INT(11) UNSIGNED NOT NULL,
  `idUDFeature` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idLexicon`, `idUDFeature`),
  INDEX `fk_lexicon_has_udfeature_udfeature1_idx` (`idUDFeature` ASC) VISIBLE,
  INDEX `fk_lexicon_has_udfeature_lexicon1_idx` (`idLexicon` ASC) VISIBLE,
  CONSTRAINT `fk_lexicon_has_udfeature_lexicon1`
    FOREIGN KEY (`idLexicon`)
    REFERENCES `webtool42_db`.`lexicon` (`idLexicon`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lexicon_has_udfeature_udfeature1`
    FOREIGN KEY (`idUDFeature`)
    REFERENCES `webtool42_db`.`udfeature` (`idUDFeature`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`dashboard_frame2`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`dashboard_frame2` (
  `idDashboardFrame2` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `text_sentence` INT(11) UNSIGNED NOT NULL,
  `text_frame` INT(11) UNSIGNED NOT NULL,
  `text_ef` INT(11) UNSIGNED NOT NULL,
  `text_lu` INT(11) UNSIGNED NOT NULL,
  `text_as` INT(11) UNSIGNED NOT NULL,
  `video_bbox` INT(11) UNSIGNED NOT NULL,
  `video_frame` INT(11) UNSIGNED NOT NULL,
  `video_ef` INT(11) UNSIGNED NOT NULL,
  `video_obj` INT(11) UNSIGNED NOT NULL,
  `avg_sentence` FLOAT(11) NOT NULL,
  `avg_obj` FLOAT(11) NOT NULL,
  PRIMARY KEY (`idDashboardFrame2`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `webtool42_db`.`dashboard_audition`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`dashboard_audition` (
  `idDashboardAudition` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `text_sentence` INT(11) UNSIGNED NOT NULL,
  `text_frame` INT(11) UNSIGNED NOT NULL,
  `text_ef` INT(11) UNSIGNED NOT NULL,
  `text_lu` INT(11) UNSIGNED NOT NULL,
  `text_as` INT(11) UNSIGNED NOT NULL,
  `video_bbox` INT(11) UNSIGNED NOT NULL,
  `video_frame` INT(11) UNSIGNED NOT NULL,
  `video_ef` INT(11) UNSIGNED NOT NULL,
  `video_obj` INT(11) UNSIGNED NOT NULL,
  `avg_sentence` FLOAT(11) NOT NULL,
  `avg_obj` FLOAT(11) NOT NULL,
  `origin` TEXT NULL,
  PRIMARY KEY (`idDashboardAudition`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `webtool42_db`.`dashboard_frame2ppm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`dashboard_frame2ppm` (
  `idDashboardFrame2PPM` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `text_sentence` INT(11) UNSIGNED NOT NULL,
  `text_frame` INT(11) UNSIGNED NOT NULL,
  `text_ef` INT(11) UNSIGNED NOT NULL,
  `text_lu` INT(11) UNSIGNED NOT NULL,
  `text_as` INT(11) UNSIGNED NOT NULL,
  `video_bbox` INT(11) UNSIGNED NOT NULL,
  `video_frame` INT(11) UNSIGNED NOT NULL,
  `video_ef` INT(11) UNSIGNED NOT NULL,
  `video_obj` INT(11) UNSIGNED NOT NULL,
  `avg_sentence` FLOAT(11) NOT NULL,
  `avg_obj` FLOAT(11) NOT NULL,
  PRIMARY KEY (`idDashboardFrame2PPM`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `webtool42_db`.`dashboard_frame2nlg`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`dashboard_frame2nlg` (
  `idDashboardFrame2NLG` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `text_sentence` INT(11) UNSIGNED NOT NULL,
  `text_frame` INT(11) UNSIGNED NOT NULL,
  `text_ef` INT(11) UNSIGNED NOT NULL,
  `text_lu` INT(11) UNSIGNED NOT NULL,
  `text_as` INT(11) UNSIGNED NOT NULL,
  `video_bbox` INT(11) UNSIGNED NOT NULL,
  `video_frame` INT(11) UNSIGNED NOT NULL,
  `video_ef` INT(11) UNSIGNED NOT NULL,
  `video_obj` INT(11) UNSIGNED NOT NULL,
  `avg_sentence` FLOAT(11) NOT NULL,
  `avg_obj` FLOAT(11) NOT NULL,
  PRIMARY KEY (`idDashboardFrame2NLG`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `webtool42_db`.`dashboard_frame2gesture`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`dashboard_frame2gesture` (
  `idDashboardFrame2Gesture` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `text_sentence` INT(11) UNSIGNED NOT NULL,
  `text_frame` INT(11) UNSIGNED NOT NULL,
  `text_ef` INT(11) UNSIGNED NOT NULL,
  `text_lu` INT(11) UNSIGNED NOT NULL,
  `text_as` INT(11) UNSIGNED NOT NULL,
  `video_bbox` INT(11) UNSIGNED NOT NULL,
  `video_frame` INT(11) UNSIGNED NOT NULL,
  `video_ef` INT(11) UNSIGNED NOT NULL,
  `video_obj` INT(11) UNSIGNED NOT NULL,
  `avg_sentence` FLOAT(11) NOT NULL,
  `avg_obj` FLOAT(11) NOT NULL,
  PRIMARY KEY (`idDashboardFrame2Gesture`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `webtool42_db`.`dashboard_multi30k`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`dashboard_multi30k` (
  `idDashboardMulti30k` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `multi30k_image_image` INT(11) UNSIGNED NOT NULL,
  `multi30k_image_bbox` INT(11) UNSIGNED NOT NULL,
  `multi30k_image_frame` INT(11) UNSIGNED NOT NULL,
  `multi30k_image_ef` INT(11) UNSIGNED NOT NULL,
  `multi30k_ptt_sentence` INT(11) UNSIGNED NOT NULL,
  `multi30k_ptt_lome` INT(11) UNSIGNED NOT NULL,
  `multi30k_pto_sentence` INT(11) UNSIGNED NOT NULL,
  `multi30k_pto_lome` INT(11) UNSIGNED NOT NULL,
  `multi30k_eno_sentence` INT(11) UNSIGNED NOT NULL,
  `multi30k_eno_lome` INT(11) UNSIGNED NOT NULL,
  `multi30kevent_image_image` INT(11) UNSIGNED NOT NULL,
  `multi30kevent_image_bbox` INT(11) UNSIGNED NOT NULL,
  `multi30kevent_image_frame` INT(11) UNSIGNED NOT NULL,
  `multi30kevent_image_ef` INT(11) UNSIGNED NOT NULL,
  `multi30kentity_image_image` INT(11) UNSIGNED NOT NULL,
  `multi30kentity_image_bbox` INT(11) UNSIGNED NOT NULL,
  `multi30kentity_image_frame` INT(11) UNSIGNED NOT NULL,
  `multi30kentity_image_ef` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idDashboardMulti30k`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `webtool42_db`.`lome_result`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`lome_result` (
  `idLOMEResult` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `position` VARCHAR(45) NULL,
  `value` FLOAT NULL,
  `idFrame` INT(11) UNSIGNED NOT NULL,
  `idDocumentSentence` INT NULL,
  PRIMARY KEY (`idLOMEResult`),
  INDEX `fk_lome_result_frame1_idx` (`idFrame` ASC) VISIBLE,
  CONSTRAINT `fk_lome_result_frame1`
    FOREIGN KEY (`idFrame`)
    REFERENCES `webtool42_db`.`frame` (`idFrame`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`lome_resultfe`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`lome_resultfe` (
  `idLOMEResultFE` INT NOT NULL AUTO_INCREMENT,
  `start` SMALLINT NULL,
  `end` SMALLINT NULL,
  `word` TEXT NULL,
  `type` CHAR(2) NULL,
  `idSpan` INT UNSIGNED NULL,
  `idLU` INT(11) UNSIGNED NULL,
  `idFrame` INT(11) UNSIGNED NULL,
  `idFrameElement` INT(11) UNSIGNED NULL,
  `idSentence` INT(11) UNSIGNED NULL,
  PRIMARY KEY (`idLOMEResultFE`),
  INDEX `fk_lome_resultfe_lu1_idx` (`idLU` ASC) VISIBLE,
  INDEX `fk_lome_resultfe_frame1_idx` (`idFrame` ASC) VISIBLE,
  INDEX `fk_lome_resultfe_frameelement1_idx` (`idFrameElement` ASC) VISIBLE,
  INDEX `fk_lome_resultfe_sentence1_idx` (`idSentence` ASC) VISIBLE,
  CONSTRAINT `fk_lome_resultfe_lu1`
    FOREIGN KEY (`idLU`)
    REFERENCES `webtool42_db`.`lu` (`idLU`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lome_resultfe_frame1`
    FOREIGN KEY (`idFrame`)
    REFERENCES `webtool42_db`.`frame` (`idFrame`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lome_resultfe_frameelement1`
    FOREIGN KEY (`idFrameElement`)
    REFERENCES `webtool42_db`.`frameelement` (`idFrameElement`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lome_resultfe_sentence1`
    FOREIGN KEY (`idSentence`)
    REFERENCES `webtool42_db`.`sentence` (`idSentence`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`cosine_node`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`cosine_node` (
  `idCosineNode` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NULL,
  `type` CHAR(3) NULL,
  `idFrame` INT(11) UNSIGNED NULL,
  `idDynamicObject` INT NULL,
  `idTimespan` INT NULL,
  `idSentence` INT(11) UNSIGNED NULL,
  `idDocument` INT(11) UNSIGNED NULL,
  `idConcept` INT(11) NULL,
  `idConstruction` INT(11) NULL,
  PRIMARY KEY (`idCosineNode`),
  INDEX `fk_cosine_node_frame1_idx` (`idFrame` ASC) VISIBLE,
  INDEX `fk_cosine_node_dynamicobject1_idx` (`idDynamicObject` ASC) VISIBLE,
  INDEX `fk_cosine_node_timespan1_idx` (`idTimespan` ASC) VISIBLE,
  INDEX `fk_cosine_node_sentence1_idx` (`idSentence` ASC) VISIBLE,
  INDEX `fk_cosine_node_document1_idx` (`idDocument` ASC) VISIBLE,
  INDEX `fk_cosine_node_concept1_idx` (`idConcept` ASC) VISIBLE,
  INDEX `fk_cosine_node_construction1_idx` (`idConstruction` ASC) VISIBLE,
  CONSTRAINT `fk_cosine_node_frame1`
    FOREIGN KEY (`idFrame`)
    REFERENCES `webtool42_db`.`frame` (`idFrame`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cosine_node_dynamicobject1`
    FOREIGN KEY (`idDynamicObject`)
    REFERENCES `webtool42_db`.`dynamicobject` (`idDynamicObject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cosine_node_timespan1`
    FOREIGN KEY (`idTimespan`)
    REFERENCES `webtool42_db`.`timespan` (`idTimespan`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cosine_node_sentence1`
    FOREIGN KEY (`idSentence`)
    REFERENCES `webtool42_db`.`sentence` (`idSentence`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cosine_node_document1`
    FOREIGN KEY (`idDocument`)
    REFERENCES `webtool42_db`.`document` (`idDocument`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cosine_node_concept1`
    FOREIGN KEY (`idConcept`)
    REFERENCES `webtool42_db`.`concept` (`idConcept`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cosine_node_construction1`
    FOREIGN KEY (`idConstruction`)
    REFERENCES `webtool42_db`.`construction` (`idConstruction`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`cosine_link`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`cosine_link` (
  `idCosineLink` INT NOT NULL AUTO_INCREMENT,
  `value` FLOAT NULL,
  `type` CHAR(2) NULL,
  `idCosineNodeSource` INT NOT NULL,
  `idCosineNodeTarget` INT NOT NULL,
  PRIMARY KEY (`idCosineLink`),
  INDEX `fk_cosine_link_cosine_node1_idx` (`idCosineNodeSource` ASC) VISIBLE,
  INDEX `fk_cosine_link_cosine_node2_idx` (`idCosineNodeTarget` ASC) VISIBLE,
  CONSTRAINT `fk_cosine_link_cosine_node1`
    FOREIGN KEY (`idCosineNodeSource`)
    REFERENCES `webtool42_db`.`cosine_node` (`idCosineNode`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cosine_link_cosine_node2`
    FOREIGN KEY (`idCosineNodeTarget`)
    REFERENCES `webtool42_db`.`cosine_node` (`idCosineNode`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `webtool42_db`.`task_manager`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`task_manager` (
  `idUser` INT(11) NOT NULL,
  `idTask` INT NOT NULL,
  PRIMARY KEY (`idUser`, `idTask`),
  INDEX `fk_user_has_task_task1_idx` (`idTask` ASC) VISIBLE,
  INDEX `fk_user_has_task_user1_idx` (`idUser` ASC) VISIBLE,
  CONSTRAINT `fk_user_has_task_user1`
    FOREIGN KEY (`idUser`)
    REFERENCES `webtool42_db`.`user` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_task_task1`
    FOREIGN KEY (`idTask`)
    REFERENCES `webtool42_db`.`task` (`idTask`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`sentence_timespan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`sentence_timespan` (
  `idSentence` INT(11) UNSIGNED NOT NULL,
  `idTimespan` INT NOT NULL,
  PRIMARY KEY (`idSentence`, `idTimespan`),
  INDEX `fk_sentence_has_timespan_timespan1_idx` (`idTimespan` ASC) VISIBLE,
  INDEX `fk_sentence_has_timespan_sentence1_idx` (`idSentence` ASC) VISIBLE,
  CONSTRAINT `fk_sentence_has_timespan_sentence1`
    FOREIGN KEY (`idSentence`)
    REFERENCES `webtool42_db`.`sentence` (`idSentence`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_sentence_has_timespan_timespan1`
    FOREIGN KEY (`idTimespan`)
    REFERENCES `webtool42_db`.`timespan` (`idTimespan`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`staticobject_textspan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`staticobject_textspan` (
  `idStaticObject` INT NOT NULL,
  `idTextSpan` INT NOT NULL,
  PRIMARY KEY (`idStaticObject`, `idTextSpan`),
  INDEX `fk_staticobject_has_textspan_textspan1_idx` (`idTextSpan` ASC) VISIBLE,
  INDEX `fk_staticobject_has_textspan_staticobject1_idx` (`idStaticObject` ASC) VISIBLE,
  CONSTRAINT `fk_staticobject_has_textspan_staticobject1`
    FOREIGN KEY (`idStaticObject`)
    REFERENCES `webtool42_db`.`staticobject` (`idStaticObject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_staticobject_has_textspan_textspan1`
    FOREIGN KEY (`idTextSpan`)
    REFERENCES `webtool42_db`.`textspan` (`idTextSpan`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`image_staticobject`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`image_staticobject` (
  `idImage` INT NOT NULL,
  `idStaticObject` INT NOT NULL,
  PRIMARY KEY (`idImage`, `idStaticObject`),
  INDEX `fk_image_has_staticobject_staticobject1_idx` (`idStaticObject` ASC) VISIBLE,
  INDEX `fk_image_has_staticobject_image1_idx` (`idImage` ASC) VISIBLE,
  CONSTRAINT `fk_image_has_staticobject_image1`
    FOREIGN KEY (`idImage`)
    REFERENCES `webtool42_db`.`image` (`idImage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_image_has_staticobject_staticobject1`
    FOREIGN KEY (`idStaticObject`)
    REFERENCES `webtool42_db`.`staticobject` (`idStaticObject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`staticobject_boundingbox`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`staticobject_boundingbox` (
  `idStaticObject` INT NOT NULL,
  `idBoundingBox` INT NOT NULL,
  PRIMARY KEY (`idStaticObject`, `idBoundingBox`),
  INDEX `fk_staticobject_has_boundingbox_boundingbox1_idx` (`idBoundingBox` ASC) VISIBLE,
  INDEX `fk_staticobject_has_boundingbox_staticobject1_idx` (`idStaticObject` ASC) VISIBLE,
  CONSTRAINT `fk_staticobject_has_boundingbox_staticobject1`
    FOREIGN KEY (`idStaticObject`)
    REFERENCES `webtool42_db`.`staticobject` (`idStaticObject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_staticobject_has_boundingbox_boundingbox1`
    FOREIGN KEY (`idBoundingBox`)
    REFERENCES `webtool42_db`.`boundingbox` (`idBoundingBox`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`image_sentence`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`image_sentence` (
  `idImage` INT NOT NULL,
  `idSentence` INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (`idImage`, `idSentence`),
  INDEX `fk_image_has_sentence_sentence1_idx` (`idSentence` ASC) VISIBLE,
  INDEX `fk_image_has_sentence_image1_idx` (`idImage` ASC) VISIBLE,
  CONSTRAINT `fk_image_has_sentence_image1`
    FOREIGN KEY (`idImage`)
    REFERENCES `webtool42_db`.`image` (`idImage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_image_has_sentence_sentence1`
    FOREIGN KEY (`idSentence`)
    REFERENCES `webtool42_db`.`sentence` (`idSentence`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`document_image`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`document_image` (
  `idDocument` INT(11) UNSIGNED NOT NULL,
  `idImage` INT NOT NULL,
  PRIMARY KEY (`idDocument`, `idImage`),
  INDEX `fk_document_has_image_image1_idx` (`idImage` ASC) VISIBLE,
  INDEX `fk_document_has_image_document1_idx` (`idDocument` ASC) VISIBLE,
  CONSTRAINT `fk_document_has_image_document1`
    FOREIGN KEY (`idDocument`)
    REFERENCES `webtool42_db`.`document` (`idDocument`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_document_has_image_image1`
    FOREIGN KEY (`idImage`)
    REFERENCES `webtool42_db`.`image` (`idImage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`document_video`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`document_video` (
  `idDocument` INT(11) UNSIGNED NOT NULL,
  `idVideo` INT NOT NULL,
  PRIMARY KEY (`idDocument`, `idVideo`),
  INDEX `fk_document_has_video_video1_idx` (`idVideo` ASC) VISIBLE,
  INDEX `fk_document_has_video_document1_idx` (`idDocument` ASC) VISIBLE,
  CONSTRAINT `fk_document_has_video_document1`
    FOREIGN KEY (`idDocument`)
    REFERENCES `webtool42_db`.`document` (`idDocument`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_document_has_video_video1`
    FOREIGN KEY (`idVideo`)
    REFERENCES `webtool42_db`.`video` (`idVideo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`video_dynamicobject`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`video_dynamicobject` (
  `idVideo` INT NOT NULL,
  `idDynamicObject` INT NOT NULL,
  PRIMARY KEY (`idVideo`, `idDynamicObject`),
  INDEX `fk_video_has_dynamicobject_dynamicobject1_idx` (`idDynamicObject` ASC) VISIBLE,
  INDEX `fk_video_has_dynamicobject_video1_idx` (`idVideo` ASC) VISIBLE,
  CONSTRAINT `fk_video_has_dynamicobject_video1`
    FOREIGN KEY (`idVideo`)
    REFERENCES `webtool42_db`.`video` (`idVideo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_video_has_dynamicobject_dynamicobject1`
    FOREIGN KEY (`idDynamicObject`)
    REFERENCES `webtool42_db`.`dynamicobject` (`idDynamicObject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`dynamicobject_boundingbox`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`dynamicobject_boundingbox` (
  `idDynamicObject` INT NOT NULL,
  `idBoundingBox` INT NOT NULL,
  PRIMARY KEY (`idDynamicObject`, `idBoundingBox`),
  INDEX `fk_dynamicobject_has_boundingbox_boundingbox1_idx` (`idBoundingBox` ASC) VISIBLE,
  INDEX `fk_dynamicobject_has_boundingbox_dynamicobject1_idx` (`idDynamicObject` ASC) VISIBLE,
  CONSTRAINT `fk_dynamicobject_has_boundingbox_dynamicobject1`
    FOREIGN KEY (`idDynamicObject`)
    REFERENCES `webtool42_db`.`dynamicobject` (`idDynamicObject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_dynamicobject_has_boundingbox_boundingbox1`
    FOREIGN KEY (`idBoundingBox`)
    REFERENCES `webtool42_db`.`boundingbox` (`idBoundingBox`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_bin;


-- -----------------------------------------------------
-- Table `webtool42_db`.`annotation_session`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`annotation_session` (
  `idAnnotationSession` INT NOT NULL AUTO_INCREMENT,
  `sessionToken` VARCHAR(32) NULL,
  `startedAt` TIMESTAMP NULL,
  `endedAt` TIMESTAMP NULL,
  `active` TINYINT(1) NULL,
  `idUser` INT(11) NOT NULL,
  `idDocumentSentence` INT NULL,
  PRIMARY KEY (`idAnnotationSession`),
  UNIQUE INDEX `sessionToken_UNIQUE` (`sessionToken` ASC) VISIBLE,
  INDEX `fk_annotation_session_user1_idx` (`idUser` ASC) VISIBLE,
  INDEX `fk_annotation_session_document_sentence1_idx` (`idDocumentSentence` ASC) VISIBLE,
  CONSTRAINT `fk_annotation_session_user1`
    FOREIGN KEY (`idUser`)
    REFERENCES `webtool42_db`.`user` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_annotation_session_document_sentence1`
    FOREIGN KEY (`idDocumentSentence`)
    REFERENCES `webtool42_db`.`document_sentence` (`idDocumentSentence`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `webtool42_db` ;

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_entrylanguage`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_entrylanguage` (`idEntry` INT, `entry` INT, `name` INT, `description` INT, `nick` INT, `idLanguage` INT, `language` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_frame`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_frame` (`idFrame` INT, `entry` INT, `active` INT, `idEntity` INT, `name` INT, `description` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_frameelement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_frameelement` (`idFrame` INT, `frameEntry` INT, `frameIdEntity` INT, `frameName` INT, `idFrameElement` INT, `entry` INT, `active` INT, `idEntity` INT, `idColor` INT, `coreType` INT, `name` INT, `description` INT, `idLanguage` INT, `nameEn` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_coretype`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_coretype` (`entry` INT, `info` INT, `flag` INT, `idType` INT, `idColor` INT, `idEntity` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_lu`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_lu` (`idLanguageFrame` INT, `idFrame` INT, `frameIdEntity` INT, `frameName` INT, `idLU` INT, `name` INT, `senseDescription` INT, `active` INT, `importNum` INT, `incorporatedFE` INT, `idEntity` INT, `idLemma` INT, `idLexicon` INT, `status` INT, `origin` INT, `lemmaName` INT, `idPOS` INT, `idUDPOS` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_annotationset`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_annotationset` (`idAnnotationSet` INT, `idAnnotationStatus` INT, `status` INT, `idEntityLU` INT, `idLU` INT, `idEntityCxn` INT, `idConstruction` INT, `idEntityTypeInstance` INT, `idDocumentSentence` INT, `idSentence` INT, `idDocument` INT, `idUser` INT, `name` INT, `email` INT, `login` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_construction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_construction` (`idConstruction` INT, `entry` INT, `abstract` INT, `active` INT, `idEntity` INT, `cxIdLanguage` INT, `name` INT, `description` INT, `idLanguage` INT, `fullName` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constructionelement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constructionelement` (`idConstruction` INT, `constructionEntry` INT, `constructionIdEntity` INT, `idConstructionElement` INT, `entry` INT, `active` INT, `idEntity` INT, `idColor` INT, `optional` INT, `head` INT, `multiple` INT, `name` INT, `description` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_instantiationtype`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_instantiationtype` (`idInstantiationType` INT, `entry` INT, `info` INT, `flag` INT, `idTypeInstance` INT, `idType` INT, `idColor` INT, `idEntity` INT, `name` INT, `description` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_relation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_relation` (`idEntityRelation` INT, `idRelationGroup` INT, `relationGroup` INT, `idRelationType` INT, `relationType` INT, `idEntity` INT, `prefix` INT, `nameCanonical` INT, `nameDirect` INT, `nameInverse` INT, `color` INT, `idEntity1` INT, `entity1Type` INT, `idEntity2` INT, `entity2Type` INT, `idEntity3` INT, `entity3Type` INT, `idRelation` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_layer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_layer` (`idLayer` INT, `rank` INT, `idAnnotationSet` INT, `idLayerType` INT, `entry` INT, `idEntity` INT, `layerOrder` INT, `name` INT, `description` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constraint`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constraint` (`idConstraintInstance` INT, `entry` INT, `idConstraint` INT, `constraintType` INT, `idConstrained` INT, `constrainedType` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintType` INT, `idEntity` INT, `prefix` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_valencepattern`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_valencepattern` (`idValenceLU` INT, `idFrame` INT, `idLU` INT, `idLanguage` INT, `idValencePattern` INT, `countPattern` INT, `idFrameElement` INT, `GF` INT, `GFSource` INT, `PT` INT, `luName` INT, `frameName` INT, `feName` INT, `language` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_domain`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_domain` (`idDomain` INT, `entry` INT, `idEntity` INT, `name` INT, `description` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_wflexemelemma`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_wflexemelemma` (`idWordForm` INT, `form` INT, `md5` INT, `idLexeme` INT, `lexeme` INT, `idPOSLexeme` INT, `POSLexeme` INT, `idLanguage` INT, `idLexemeEntry` INT, `lexemeOrder` INT, `breakBefore` INT, `headWord` INT, `idLemma` INT, `lemma` INT, `idPOSLemma` INT, `POSLemma` INT, `language` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_sentence_old`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_sentence_old` (`idSentence` INT, `text` INT, `paragraphOrder` INT, `idParagraph` INT, `idLanguage` INT, `documentOrder` INT, `idDocument` INT, `documentEntry` INT, `author` INT, `idGenre` INT, `idCorpus` INT, `corpusEntry` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_concept`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_concept` (`idConcept` INT, `entry` INT, `idEntity` INT, `keyword` INT, `aka` INT, `type` INT, `status` INT, `name` INT, `description` INT, `idLanguage` INT, `idTypeInstance` INT, `tiName` INT, `tiDescription` INT, `tiNick` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_qualia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_qualia` (`idLanguage` INT, `idQualia` INT, `type` INT, `info` INT, `infoinverse` INT, `idEntity` INT, `name` INT, `description` INT, `idTypeInstance` INT, `idFrame` INT, `frameName` INT, `idFrameElement1` INT, `fe1Name` INT, `idFrameElement2` INT, `fe2Name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_semantictype`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_semantictype` (`idSemanticType` INT, `entry` INT, `idEntity` INT, `idDomain` INT, `domainEntry` INT, `name` INT, `description` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_group_user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_group_user` (`idGroup` INT, `name` INT, `idUser` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_frame_classification`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_frame_classification` (`idSemanticType` INT, `relationType` INT, `name` INT, `idLanguage` INT, `idFrame` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_frame`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_frame` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_construction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_construction` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_ce`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_ce` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_semantictype`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_semantictype` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_constraint`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_constraint` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_constraint_cx`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_constraint_cx` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_lexeme`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_lexeme` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_lemma`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_lemma` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_lu`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_lu` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_udfeature`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_udfeature` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_udrelation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_udrelation` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_udpos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_udpos` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_festandsforlu`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_festandsforlu` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_festandsforfe`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_festandsforfe` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_lustandsforlu`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_lustandsforlu` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_luequivalence`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_luequivalence` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby` (`*` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_relationtype`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_relationtype` (`idRelationType` INT, `entry` INT, `prefix` INT, `nameCanonical` INT, `nameDirect` INT, `nameInverse` INT, `color` INT, `idRelationGroup` INT, `idEntity` INT, `name` INT, `description` INT, `idLanguage` INT, `rgEntry` INT, `rgName` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_lemma`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_lemma` (`idLanguage` INT, `idLemma` INT, `name` INT, `idPOS` INT, `idEntity` INT, `POS` INT, `fullName` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_qualia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_qualia` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_corpus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_corpus` (`idCorpus` INT, `active` INT, `idEntity` INT, `name` INT, `description` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_document`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_document` (`idDocument` INT, `author` INT, `active` INT, `idGenre` INT, `idCorpus` INT, `idEntity` INT, `corpusName` INT, `corpusDescription` INT, `name` INT, `description` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_alloweddocs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_alloweddocs` (`idCorpus` INT, `corpusName` INT, `idDocument` INT, `documentName` INT, `idUser` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_usertask`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_usertask` (`idUserTask` INT, `isActive` INT, `isIgnore` INT, `idUser` INT, `login` INT, `userName` INT, `email` INT, `idTask` INT, `taskName` INT, `idTaskGroup` INT, `taskGroupName` INT, `idProject` INT, `projectName` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_sentence_document`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_sentence_document` (`idSentence` INT, `text` INT, `idLanguageSentence` INT, `idOriginMM` INT, `idDocument` INT, `name` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_project_docs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_project_docs` (`idProject` INT, `projectName` INT, `idCorpus` INT, `corpusName` INT, `idDocument` INT, `documentName` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_annotation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_annotation` (`idAnnotation` INT, `idEntity` INT, `entityType` INT, `idTextspan` INT, `idStaticObject` INT, `idDynamicObject` INT, `idDocument` INT, `idUserTask` INT, `idTask` INT, `name` INT, `idUser` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_annotation_text_fe`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_annotation_text_fe` (`idAnnotation` INT, `idTextSpan` INT, `startChar` INT, `endChar` INT, `multi` INT, `idLayer` INT, `idInstantiationType` INT, `idAnnotationSet` INT, `idLayerType` INT, `idFrame` INT, `idFrameElement` INT, `idEntity` INT, `idColor` INT, `coreType` INT, `name` INT, `idLanguage` INT, `layerOrder` INT, `layerTypeEntry` INT, `layerTypeIdEntity` INT, `layerTypeName` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_annotation_text_ce`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_annotation_text_ce` (`idAnnotation` INT, `idTextSpan` INT, `startChar` INT, `endChar` INT, `multi` INT, `idLayer` INT, `idInstantiationType` INT, `idAnnotationSet` INT, `idLayerType` INT, `idConstruction` INT, `idConstructionElement` INT, `idEntity` INT, `idColor` INT, `name` INT, `idLanguage` INT, `layerOrder` INT, `layerTypeEntry` INT, `layerTypeIdEntity` INT, `layerTypeName` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_annotation_text_gl`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_annotation_text_gl` (`idAnnotation` INT, `idTextSpan` INT, `startChar` INT, `endChar` INT, `multi` INT, `idLayer` INT, `idInstantiationType` INT, `idAnnotationSet` INT, `idLayerType` INT, `idGenericLabel` INT, `idEntity` INT, `idColor` INT, `name` INT, `idLanguage` INT, `layerOrder` INT, `layerTypeEntry` INT, `layerTypeIdEntity` INT, `layerTypeName` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_document_sentence`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_document_sentence` (`idDocumentSentence` INT, `idDocument` INT, `idSentence` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_image_sentence`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_image_sentence` (`idImage` INT, `idSentence` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_staticobject_textspan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_staticobject_textspan` (`idStaticObject` INT, `name` INT, `scene` INT, `nobndbox` INT, `startWord` INT, `endWord` INT, `idDocument` INT, `idSentence` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_staticobject_boundingbox`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_staticobject_boundingbox` (`idBoundingBox` INT, `x` INT, `y` INT, `width` INT, `height` INT, `blocked` INT, `isGroundTruth` INT, `idStaticObject` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_lexicon`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_lexicon` (`idWordForm` INT, `form` INT, `idEntityWF` INT, `idLexiconExpression` INT, `position` INT, `breakBefore` INT, `head` INT, `idLemma` INT, `lemma` INT, `idEntityLM` INT, `idLanguageLM` INT, `idPOSLM` INT, `posLM` INT, `udPOSLM` INT, `idLU` INT, `lu` INT, `senseDescription` INT, `incorporatedFE` INT, `idFrame` INT, `idEntityLU` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_document_video`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_document_video` (`idDocument` INT, `idVideo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_frame_relation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_frame_relation` (`idEntityRelation` INT, `idRelationType` INT, `relationType` INT, `nameCanonical` INT, `nameDirect` INT, `nameInverse` INT, `color` INT, `f1Name` INT, `f1IdFrame` INT, `f1IdEntity` INT, `idLanguage` INT, `f2Name` INT, `f2IdFrame` INT, `f2IdEntity` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_fe_internal_relation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_fe_internal_relation` (`idEntityRelation` INT, `idRelationType` INT, `relationType` INT, `nameCanonical` INT, `nameDirect` INT, `nameInverse` INT, `color` INT, `fe1Name` INT, `fe1IdFrameElement` INT, `fe1IdEntity` INT, `fe1IdFrame` INT, `fe1CoreType` INT, `fe1IdColor` INT, `idLanguage` INT, `fe2Name` INT, `fe2IdFrameElement` INT, `fe2IdEntity` INT, `fe2IdFrame` INT, `fe2CoreType` INT, `fe2IdColor` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_fe_relation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_fe_relation` (`idEntityRelation` INT, `idRelationType` INT, `relationType` INT, `idRelation` INT, `nameCanonical` INT, `nameDirect` INT, `nameInverse` INT, `color` INT, `fe1Name` INT, `fe1IdFrameElement` INT, `fe1IdEntity` INT, `fe1IdFrame` INT, `fe1CoreType` INT, `fe1IdColor` INT, `idLanguage` INT, `fe2Name` INT, `fe2IdFrameElement` INT, `fe2IdEntity` INT, `fe2IdFrame` INT, `fe2CoreType` INT, `fe2IdColor` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_qualiastructure`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_qualiastructure` (`idQualiaStructure` INT, `idFrame` INT, `idEntity` INT, `name` INT, `idLanguage` INT, `relation` INT, `idQualiaRelation` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_qualiaargument`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_qualiaargument` (`idQualiaArgument` INT, `order` INT, `type` INT, `idQualiaStructure` INT, `feName` INT, `feCoreType` INT, `feIdColor` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_qualialu`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_qualialu` (`idQualiaLU` INT, `idLU1` INT, `lu1` INT, `idLU2` INT, `lu2` INT, `idFrameElement1` INT, `order1` INT, `type1` INT, `idFrameElement2` INT, `order2` INT, `type2` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_annotation_dynamic`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_annotation_dynamic` (`idDynamicObject` INT, `name` INT, `startFrame` INT, `endFrame` INT, `startTime` INT, `endTime` INT, `status` INT, `origin` INT, `idLayerType` INT, `layerOrder` INT, `nameLayerType` INT, `layerGroup` INT, `idLanguage` INT, `idAnnotationLU` INT, `idLU` INT, `lu` INT, `idAnnotationFE` INT, `idFrameElement` INT, `idFrame` INT, `frame` INT, `fe` INT, `bgColorFE` INT, `fgColorFE` INT, `idLanguageFE` INT, `idAnnotationGL` INT, `idGenericLabel` INT, `gl` INT, `bgColorGL` INT, `fgColorGL` INT, `idLanguageGL` INT, `idDocument` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_dynamicobject_boundingbox`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_dynamicobject_boundingbox` (`idBoundingBox` INT, `frameNumber` INT, `frameTime` INT, `x` INT, `y` INT, `width` INT, `height` INT, `blocked` INT, `isGroundTruth` INT, `idDynamicObject` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_sentence_timespan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_sentence_timespan` (`idSentence` INT, `text` INT, `idLanguageSentence` INT, `idOriginMM` INT, `idTimeSpan` INT, `startTime` INT, `endTime` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_video_dynamicobject`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_video_dynamicobject` (`idVideo` INT, `idDynamicObject` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_document_wordmm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_document_wordmm` (`idWordMM` INT, `word` INT, `startTime` INT, `endTime` INT, `origin` INT, `idDocumentSentence` INT, `idDocument` INT, `idSentence` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_video_wordmm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_video_wordmm` (`idWordMM` INT, `word` INT, `startTime` INT, `endTime` INT, `origin` INT, `idVideo` INT, `idDocumentSentence` INT, `idDocument` INT, `idSentence` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_layertype_gl`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_layertype_gl` (`idLayerType` INT, `entry` INT, `allowsApositional` INT, `isAnnotation` INT, `layerOrder` INT, `idLayerGroup` INT, `idEntityLayerType` INT, `idGenericLabel` INT, `name` INT, `definition` INT, `example` INT, `idEntityGenericLabel` INT, `idColor` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_layertype`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_layertype` (`idLayerType` INT, `entry` INT, `allowsApositional` INT, `isAnnotation` INT, `layerOrder` INT, `idLayerGroup` INT, `idEntity` INT, `name` INT, `description` INT, `idLanguage` INT, `layerGroup` INT, `layerGroupType` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_document_image`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_document_image` (`idDocument` INT, `idImage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_usertask_docs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_usertask_docs` (`idUserTaskDocument` INT, `idUserTask` INT, `isActive` INT, `isIgnore` INT, `idUser` INT, `login` INT, `userName` INT, `email` INT, `idTask` INT, `taskName` INT, `idDocument` INT, `documentName` INT, `idCorpus` INT, `corpusName` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_annotation_static`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_annotation_static` (`idStaticObject` INT, `name` INT, `origin` INT, `idLayerType` INT, `layerOrder` INT, `nameLayerType` INT, `layerGroup` INT, `idLanguage` INT, `idAnnotationLU` INT, `idLU` INT, `lu` INT, `idAnnotationFE` INT, `idFrameElement` INT, `idFrame` INT, `frame` INT, `fe` INT, `bgColorFE` INT, `fgColorFE` INT, `idLanguageFE` INT, `idDocument` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_domain_semantictype`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_domain_semantictype` (`idDomain` INT, `domainEntry` INT, `domainIdEntity` INT, `domainName` INT, `stIdEntity` INT, `stEntry` INT, `stName` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_domain_frame`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_domain_frame` (`idDomain` INT, `domainEntry` INT, `domainIdEntity` INT, `domainName` INT, `frameIdEntity` INT, `frameEntry` INT, `frameName` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_typeinstance`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_typeinstance` (`idTypeInstance` INT, `entry` INT, `idEntity` INT, `name` INT, `description` INT, `nick` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_concept_relation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_concept_relation` (`idEntityRelation` INT, `idRelationType` INT, `relationType` INT, `nameCanonical` INT, `nameDirect` INT, `nameInverse` INT, `color` INT, `c1Name` INT, `c1IdConcept` INT, `c1IdEntity` INT, `c1Keyword` INT, `c1Type` INT, `c1Status` INT, `idLanguage` INT, `c2Name` INT, `c2IdConcept` INT, `c2IdEntity` INT, `c2Keyword` INT, `c2Type` INT, `c2Status` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_semantictype_relation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_semantictype_relation` (`idEntityRelation` INT, `idRelationType` INT, `relationType` INT, `nameCanonical` INT, `nameDirect` INT, `nameInverse` INT, `color` INT, `st1Name` INT, `st1IdSemanticType` INT, `st1IdEntity` INT, `idLanguage` INT, `st2Name` INT, `st2IdSemanticType` INT, `stIdEntity` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_lucandidate_402`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_lucandidate_402` (`frameName` INT, `frameCandidate` INT, `idFrame` INT, `idLUCandidate` INT, `name` INT, `senseDescription` INT, `idLemma` INT, `discussion` INT, `idDocument` INT, `idDocumentSentence` INT, `idBoundingBox` INT, `idUser` INT, `incorporatedFE` INT, `createdAt` INT, `idLexicon` INT, `lemmaName` INT, `idPOS` INT, `idUDPOS` INT, `idLanguage` INT, `userName` INT, `email` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_relationgroup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_relationgroup` (`idRelationGroup` INT, `entry` INT, `idEntity` INT, `name` INT, `description` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_annotation_deixis`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_annotation_deixis` (`idDynamicObject` INT, `name` INT, `startFrame` INT, `endFrame` INT, `startTime` INT, `endTime` INT, `status` INT, `origin` INT, `idLayerType` INT, `layerOrder` INT, `nameLayerType` INT, `layerGroup` INT, `idLanguage` INT, `idAnnotationLU` INT, `idLU` INT, `lu` INT, `idAnnotationFE` INT, `idFrameElement` INT, `idFrame` INT, `frame` INT, `fe` INT, `bgColorFE` INT, `fgColorFE` INT, `idLanguageFE` INT, `idAnnotationGL` INT, `idGenericLabel` INT, `gl` INT, `bgColorGL` INT, `fgColorGL` INT, `idLanguageGL` INT, `idDocument` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_construction_relation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_construction_relation` (`idEntityRelation` INT, `idRelationType` INT, `relationType` INT, `nameCanonical` INT, `nameDirect` INT, `nameInverse` INT, `color` INT, `c1Name` INT, `c1IdConstruction` INT, `c1IdEntity` INT, `cxIdLanguage` INT, `idLanguage` INT, `c2Name` INT, `c2IdConstruction` INT, `c2IdEntity` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constructionelement_relation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constructionelement_relation` (`idEntityRelation` INT, `idRelationType` INT, `relationType` INT, `idRelation` INT, `nameCanonical` INT, `nameDirect` INT, `nameInverse` INT, `color` INT, `ce1Name` INT, `ce1IdConstructionElement` INT, `ce1IdEntity` INT, `idLanguage` INT, `ce1IdColor` INT, `ce2Name` INT, `ce2IdConstructionElement` INT, `ce2IdEntity` INT, `ce2IdColor` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_sentence`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_sentence` (`idSentence` INT, `text` INT, `paragraphOrder` INT, `idParagraph` INT, `idLanguage` INT, `idOriginMM` INT, `idRLSLabel` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_lexicon_lemma`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_lexicon_lemma` (`idLanguage` INT, `idLexicon` INT, `name` INT, `idEntity` INT, `idPOS` INT, `POS` INT, `shortName` INT, `fullName` INT, `idUDPOS` INT, `udPOS` INT, `fullNameUD` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_lexicon_expression`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_lexicon_expression` (`idLexiconExpression` INT, `idLanguage` INT, `idLemma` INT, `lemma` INT, `idEntity` INT, `idPOS` INT, `POS` INT, `fullName` INT, `idUDPOS` INT, `udPOS` INT, `fullNameUD` INT, `idForm` INT, `form` INT, `head` INT, `breakBefore` INT, `position` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_constrainedby_morpheme`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_constrainedby_morpheme` (`idLanguage` INT, `conName` INT, `idConstraint` INT, `idConstrained` INT, `idConstrainedBy` INT, `constrainedByType` INT, `idConstraintInstance` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_lexicon_402`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_lexicon_402` (`idWordForm` INT, `form` INT, `md5` INT, `altSpell` INT, `idEntityWF` INT, `idLexeme` INT, `lexeme` INT, `idLanguageLX` INT, `idEntityLX` INT, `posLX` INT, `idLexemeEntry` INT, `lexemeOrder` INT, `breakBefore` INT, `headWord` INT, `idLemma` INT, `lemma` INT, `idEntityLM` INT, `idLanguageLM` INT, `idPOSLM` INT, `posLM` INT, `idLU` INT, `lu` INT, `senseDescription` INT, `incorporatedFE` INT, `idFrame` INT, `idEntityLU` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_lexicon_form`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_lexicon_form` (`idLanguage` INT, `idLexicon` INT, `form` INT, `idLexiconGroup` INT, `idEntity` INT, `idPOS` INT, `POS` INT, `shortName` INT, `fullName` INT, `idUDPOS` INT, `udPOS` INT, `fullNameUD` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_lucandidate`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_lucandidate` (`frameName` INT, `idFrame` INT, `idLU` INT, `name` INT, `senseDescription` INT, `idLemma` INT, `discussion` INT, `idDocumentSentence` INT, `idStaticObject` INT, `idDynamicObject` INT, `origin` INT, `idUser` INT, `incorporatedFE` INT, `createdAt` INT, `updatedAt` INT, `idLexicon` INT, `lemmaName` INT, `idPOS` INT, `idUDPOS` INT, `idLanguage` INT, `userName` INT, `email` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_project_tasks`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_project_tasks` (`idProject` INT, `projectName` INT, `idTask` INT, `taskName` INT, `taskDescription` INT, `idTaskGroup` INT, `taskGroupName` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_task_manager`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_task_manager` (`idTask` INT, `taskName` INT, `idUser` INT, `login` INT, `userName` INT, `email` INT, `idTaskGroup` INT, `taskGroupName` INT, `idProject` INT, `projectName` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_lu_full`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_lu_full` (`idLanguageFrame` INT, `idFrame` INT, `frameIdEntity` INT, `frameName` INT, `idLU` INT, `name` INT, `senseDescription` INT, `active` INT, `importNum` INT, `incorporatedFE` INT, `idEntity` INT, `idLemma` INT, `idLexicon` INT, `status` INT, `origin` INT, `lemmaName` INT, `idPOS` INT, `idUDPOS` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_annotation_text_target`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_annotation_text_target` (`idAnnotation` INT, `idTextSpan` INT, `startChar` INT, `endChar` INT, `multi` INT, `idLayer` INT, `idInstantiationType` INT, `idAnnotationSet` INT, `idLayerType` INT, `idGenericLabel` INT, `idEntity` INT, `idColor` INT, `name` INT, `idLanguage` INT, `layerOrder` INT, `layerTypeEntry` INT, `layerTypeIdEntity` INT, `layerTypeName` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_annotation_full`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_annotation_full` (`idAnnotation` INT, `idEntity` INT, `entityType` INT, `idTextspan` INT, `idStaticObject` INT, `idDynamicObject` INT, `idDocument` INT, `idUserTask` INT, `idTask` INT, `name` INT, `idUser` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_annotationset_full`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_annotationset_full` (`idAnnotationSet` INT, `idAnnotationStatus` INT, `status` INT, `idEntityLU` INT, `idLU` INT, `idEntityCxn` INT, `idConstruction` INT, `idEntityTypeInstance` INT, `idDocumentSentence` INT, `idSentence` INT, `idDocument` INT, `idUser` INT, `name` INT, `email` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_annotationset_status`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_annotationset_status` (`idTypeInstance` INT, `entry` INT, `info` INT, `idColor` INT, `idEntity` INT, `name` INT, `description` INT, `idLanguage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `webtool42_db`.`view_annotation_comment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webtool42_db`.`view_annotation_comment` (`idAnnotationComment` INT, `comment` INT, `createdAt` INT, `updatedAt` INT, `idUser` INT, `idDocument` INT, `idObject` INT, `annotationType` INT, `email` INT, `login` INT);

-- -----------------------------------------------------
-- function user_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION user_create(
	par_login VARCHAR(255),
    par_passMD5 CHAR(32)
) RETURNS INT
    BEGIN
		SET @idGroup = (SELECT idGroup from `group` where name = 'BEGINNER');
		INSERT INTO user (login, passMD5, active, status, idLanguage) VALUES (par_login, par_passMD5, 1, 0, 1);
        SET @idUser = (SELECT last_insert_id());
		INSERT INTO user_group (idUser, idGroup) values (@idUser, @idGroup);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id) VALUES (NOW(),'system','C','user', @idUser);
        RETURN @idUser;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function fe_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION fe_create(
	par_idFrame INT,
	par_name VARCHAR(255),
    par_coreType CHAR(32),
    par_idColor INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		DECLARE entry VARCHAR(255);
        set entry = CONCAT('fe_', LOWER(par_name));
		INSERT INTO entity (type) values ('FE');
        SET @idEntity = (SELECT last_insert_id());
        CALL entry_create(entry, par_name, @idEntity);
        INSERT INTO frameelement(idFrame, entry, coreType, idColor, idEntity) values (par_idFrame, entry, par_coreType, par_idColor, @idEntity);
        SET @idFrameElement = (SELECT last_insert_id());
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id) VALUES (NOW(),'user','C','frameelement', @idFrameElement);
        RETURN @idFrameElement;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure entry_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE PROCEDURE entry_create(
	par_entry VARCHAR(255),
	par_name VARCHAR(255),
    par_idEntity INT
)
    BEGIN
        DECLARE idLanguageE INT;
		DECLARE done INT DEFAULT FALSE;
		DECLARE cursorLanguage CURSOR FOR SELECT idLanguage FROM language;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

		OPEN cursorLanguage;
		read_loop: LOOP
			FETCH cursorLanguage INTO idLanguageE;
			IF done THEN
				LEAVE read_loop;
			END IF;
			INSERT INTO entry (idLanguage, entry, name, description, idEntity) values (idLanguageE, par_entry, par_name, par_name, par_idEntity);
		END LOOP;
		CLOSE cursorLanguage;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function relation_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION relation_create(
    par_json JSON
) RETURNS INT
    BEGIN
		DECLARE v_relationType VARCHAR(255);
		DECLARE v_idEntity1 INT;
		DECLARE v_idEntity2 INT;
		DECLARE v_idEntity3 INT DEFAULT NULL;
		DECLARE v_idRelation INT DEFAULT NULL;
        DECLARE v_idUser INT;
		DECLARE v_idRelationType INT;
        SET v_relationType = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.relationType'));
        SET v_idEntity1 = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.idEntity1'));
        SET v_idEntity2 = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.idEntity2'));
        IF JSON_EXTRACT(par_json, '$.idEntity3') THEN
           SET v_idEntity3 = JSON_EXTRACT(par_json, '$.idEntity3');
        END IF;   
        IF (JSON_EXTRACT(par_json, '$.idRelation')) THEN 
			SET v_idRelation = JSON_EXTRACT(par_json, '$.idRelation');
        END IF;    
        SET v_idUser = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.idUser'));
SELECT 
    idRelationType
INTO v_idRelationType FROM
    relationtype
WHERE
    entry = v_relationType;
		INSERT INTO entityrelation (idRelationType, idEntity1, idEntity2, idEntity3, idRelation) values (v_idRelationType, v_idEntity1, v_idEntity2, v_idEntity3, v_idRelation);
        SET @idEntityRelation = (SELECT last_insert_id());
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id, idUser) VALUES (NOW(),'user','C','entityrelation', @idEntityRelation, v_idUser);
        RETURN @idEntityRelation;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function lu_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION lu_create(
	par_lu JSON
) RETURNS INT
    BEGIN
		DECLARE v_name VARCHAR(255);
        DECLARE v_idFrame INT;
        DECLARE v_incorporatedFE INT;
        DECLARE v_senseDescription TEXT;
        DECLARE v_idLemma INT;
        DECLARE v_idLexicon INT;
        DECLARE v_idUser INT;
        DECLARE v_discussion TEXT;
        DECLARE v_idDocumentSentence INT;
        DECLARE v_idDynamicObject INT;
        DECLARE v_idStaticObject INT;
        DECLARE v_status VARCHAR(45);
        DECLARE v_origin VARCHAR(45);
        INSERT INTO entity (type) values ('LU');
        SET @idEntity = (SELECT last_insert_id());
        SET v_name = JSON_UNQUOTE(JSON_EXTRACT(par_lu, '$.name'));
        SET v_idFrame = JSON_EXTRACT(par_lu, '$.idFrame');
        IF (JSON_EXTRACT(par_lu, '$.incorporatedFE')) THEN
			SET v_incorporatedFE = JSON_EXTRACT(par_lu, '$.incorporatedFE');
        END IF;    
        SET v_senseDescription = JSON_UNQUOTE(JSON_EXTRACT(par_lu, '$.senseDescription'));
        SET v_discussion = JSON_UNQUOTE(JSON_EXTRACT(par_lu, '$.discussion'));
        IF (JSON_EXTRACT(par_lu, '$.idDocumentSentence')) THEN
			SET v_idDocumentSentence = JSON_EXTRACT(par_lu, '$.idDocumentSentence');
        END IF;
        IF (JSON_EXTRACT(par_lu, '$.idDynamicObject')) THEN
			SET v_idDynamicObject = JSON_EXTRACT(par_lu, '$.idDynamicObject');
        END IF;
        IF (JSON_EXTRACT(par_lu, '$.idStaticObject')) THEN
			SET v_idStaticObject = JSON_EXTRACT(par_lu, '$.idStaticObject');
        END IF;
        SET v_status = JSON_UNQUOTE(JSON_EXTRACT(par_lu, '$.status'));
        SET v_origin = JSON_UNQUOTE(JSON_EXTRACT(par_lu, '$.origin'));
        #SET v_idLemma = JSON_EXTRACT(par_lu, '$.idLemma');
        SET v_idLexicon = JSON_EXTRACT(par_lu, '$.idLexicon');
        SET v_idUser = JSON_EXTRACT(par_lu, '$.idUser');
        INSERT INTO lu(idFrame, name, senseDescription, importNum, active, incorporatedFE, idLexicon, idEntity,
			discussion,idDocumentSentence,idStaticObject,idDynamicObject,status,origin,createdAt, idUser) 
			values (v_idFrame, v_name, v_senseDescription, 0, 1, v_incorporatedFE, v_idLexicon, @idEntity,
            v_discussion,v_idDocumentSentence,v_idStaticObject,v_idDynamicObject,v_status,v_origin,NOW(), v_idUser);
        SET @idLU = (SELECT last_insert_id());
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','lu', @idLU, v_idUser);
        RETURN @idLU;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function fe_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION fe_delete(
	par_idFrameElement INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		DECLARE v_idEntity INT;
		SELECT idEntity INTO v_idEntity FROM frameelement WHERE (idFrameElement = par_idFrameElement);
        DELETE FROM entityrelation where (idEntity1 = v_idEntity) OR (idEntity2 = v_idEntity) OR (idEntity3 = v_idEntity);
        DELETE FROM entry where (idEntity = v_idEntity);
        DELETE FROM frameelement where (idEntity = v_idEntity);
        DELETE FROM entity where (idEntity = v_idEntity);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','frameelement', par_idFrameElement,par_idUser);
        RETURN par_idFrameElement;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function lu_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION lu_delete(
	par_idLU INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		DECLARE v_idEntity INT;
		SELECT idEntity INTO v_idEntity FROM lu WHERE (idLU = par_idLU);
        DELETE FROM entityrelation where (idEntity1 = v_idEntity) OR (idEntity2 = v_idEntity) OR (idEntity3 = v_idEntity);
        DELETE FROM entry where (idEntity = v_idEntity);
        DELETE FROM lu where (idEntity = v_idEntity);
        DELETE FROM entity where (idEntity = v_idEntity);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','lu', par_idLU,par_idUser);
        RETURN par_idLU;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function user_update
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION user_update(
	par_user JSON
) RETURNS INT
    BEGIN
		DECLARE v_name VARCHAR(255);
        DECLARE v_email VARCHAR(255);
        DECLARE v_idUser INT;
        DECLARE v_idGroup INT;
        SET v_name = JSON_UNQUOTE(JSON_EXTRACT(par_user, '$.name'));
        SET v_email = JSON_UNQUOTE(JSON_EXTRACT(par_user, '$.email'));
        SET v_idGroup = JSON_EXTRACT(par_user, '$.idGroup');
        SET v_idUser = JSON_EXTRACT(par_user, '$.idUser');
        DELETE FROM user_group WHERE (idUser = v_idUser);
        INSERT INTO user_group(idGroup, idUser) values (v_idGroup, v_idUser);
        UPDATE user set name = v_name, email = v_email WHERE idUser = v_idUser;
        RETURN v_idUser;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function user_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION user_delete(
	par_idUser INT
) RETURNS INT
    BEGIN
        DELETE FROM user_group WHERE (idUser = par_idUser);
        DELETE FROM timeline WHERE (idUser = par_idUser);
        DELETE FROM user WHERE (idUser = par_idUser);
        RETURN par_idUser;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function dataset_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION dataset_create(
	par_dataset JSON
) RETURNS INT
    BEGIN
		DECLARE v_name VARCHAR(255);
        DECLARE v_description VARCHAR(4000);
        DECLARE v_idProject INT;
        DECLARE v_idUser INT;
        SET v_name = JSON_UNQUOTE(JSON_EXTRACT(par_dataset, '$.name'));
        SET v_description = JSON_UNQUOTE(JSON_EXTRACT(par_dataset, '$.description'));
        SET v_idProject = JSON_EXTRACT(par_dataset, '$.idProject');
        SET v_idUser = JSON_EXTRACT(par_dataset, '$.idUser');
        INSERT INTO dataset(name,description,idProject) values (v_name, v_description,v_idProject);
        SET @idDataset = (SELECT last_insert_id());
        INSERT INTO project_dataset(idProject,idDataset) values (v_idProject, @idDataset);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','dataset', @idDataset, v_idUser);
        RETURN @idDataset;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function dataset_update
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION dataset_update(
	par_dataset JSON
) RETURNS INT
    BEGIN
		DECLARE v_name VARCHAR(255);
        DECLARE v_description VARCHAR(4000);
        DECLARE v_idUser INT;
        DECLARE v_idDataset INT;
        SET v_name = JSON_UNQUOTE(JSON_EXTRACT(par_dataset, '$.name'));
        SET v_description = JSON_UNQUOTE(JSON_EXTRACT(par_dataset, '$.description'));
        SET v_idUser = JSON_EXTRACT(par_dataset, '$.idUser');
        SET v_idDataset = JSON_EXTRACT(par_dataset, '$.idDataset');
        UPDATE dataset set name = v_name, description = v_description WHERE (idDataset = v_idDataset);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','U','dataset', v_idDataset, v_idUser);
        RETURN v_idDataset;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function dataset_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION dataset_delete(
	par_idDataset INT,
    par_idUser INT
) RETURNS INT
    BEGIN
        DELETE FROM project_dataset where (idDataset = par_idDataset);
        DELETE FROM dataset where (idDataset = par_idDataset);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','dataset', par_idDataset, par_idUser);
        RETURN par_idDataset;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function relationtype_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION relationtype_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_nameCanonical VARCHAR(255);
   DECLARE v_entry VARCHAR(255);
   DECLARE v_nameDirect VARCHAR(255);
   DECLARE v_nameInverse VARCHAR(255);
   DECLARE v_color VARCHAR(255);
   DECLARE v_prefix VARCHAR(255);
   DECLARE v_idRelationGroup INT;
   DECLARE v_idUser INT;
   INSERT INTO entity (type) values ('RTY');
   SET @idEntity = (SELECT last_insert_id());
   SET v_nameCanonical = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.nameCanonical'));
   SET v_nameDirect = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.nameDirect'));
   SET v_nameInverse = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.nameInverse'));
   SET v_color = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.color'));
   SET v_prefix = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.prefix'));
   SET v_idRelationGroup = JSON_EXTRACT(par_json, '$.idRelationGroup');
   SET v_idUser = JSON_EXTRACT(par_json, '$.idUser');
   SET v_entry = CONCAT('rel_',lower(v_nameCanonical));
   CALL entry_create(v_entry, v_nameCanonical, @idEntity);
   INSERT INTO relationtype(entry,nameCanonical,nameDirect,nameInverse,color,prefix,idRelationGroup,idEntity) values (v_entry, v_nameCanonical, v_nameDirect, v_nameInverse, v_color, v_prefix, v_idRelationGroup,@idEntity);
   SET @idRelationType = (SELECT last_insert_id());
   INSERT INTO timeline (tlDateTime,author,operation,tableName,id, idUser) VALUES (NOW(),'user','C','relationtype', @idRelationType, v_idUser);
   RETURN @idRelationType;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function relationgroup_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION relationgroup_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_nameEn VARCHAR(255);
   DECLARE v_entry VARCHAR(255);
   DECLARE v_idUser INT;
   INSERT INTO entity (type) values ('RGP');
   SET @idEntity = (SELECT last_insert_id());
   SET v_nameEn = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.nameEn'));
   SET v_entry = CONCAT('rgp_',lower(v_nameEn));
   CALL entry_create(v_entry, v_nameEn, @idEntity);
   INSERT INTO relationgroup(entry,idEntity) values (v_entry, @idEntity);
   SET @idRelationGroup = (SELECT last_insert_id());
   INSERT INTO timeline (tlDateTime,author,operation,tableName,id, idUser) VALUES (NOW(),'user','C','relationgroup', @idRelationGroup, v_idUser);
   RETURN @idRelationGroup;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function annotationobject_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION annotationobject_create (
	par_externalId INT,
    par_type CHAR(3)
) RETURNS INT
BEGIN 
   INSERT INTO annotationobject (externalId, type, createdAt) values (par_externalId, par_type, now());
   SET @idAnnotationObject = (SELECT last_insert_id());
   RETURN @idAnnotationObject;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function annotation_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION annotation_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_idEntity INT;
   DECLARE v_idAnnotationObject INT;
   DECLARE v_idTextSpan INT;
   DECLARE v_idStaticObject INT;
   DECLARE v_idDynamicObject INT;
   DECLARE v_idUserTask INT;
   DECLARE v_idUser INT;
   DECLARE v_idRelationType INT;
   SET v_idEntity = JSON_EXTRACT(par_json, '$.idEntity');
   SET v_idUserTask = JSON_EXTRACT(par_json, '$.idUserTask');
   SET v_idUser = JSON_EXTRACT(par_json, '$.idUser');
   SET v_idTextSpan = JSON_EXTRACT(par_json, '$.idTextSpan');
   SET v_idDynamicObject = JSON_EXTRACT(par_json, '$.idDynamicObject');
   SET v_idStaticObject = JSON_EXTRACT(par_json, '$.idStaticObject');
   INSERT INTO annotation (idEntity, idUserTask, idUser, idTextSpan, idStaticObject, idDynamicObject, status, createdAt) 
	   values (v_idEntity, v_idUserTask, v_idUser, v_idTextSpan, v_idStaticObject, v_idDynamicObject, 'CREATED', NOW());
   SET @idAnnotation = (SELECT last_insert_id());
   RETURN @idAnnotation;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function objectrelation_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION objectrelation_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_idAnnotationObject1 INT;
   DECLARE v_idAnnotationObject2 INT;
   DECLARE v_relationType VARCHAR(255);
   DECLARE v_idRelationType INT;
   SET v_idAnnotationObject1 = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.idAnnotationObject1'));
   SET v_idAnnotationObject2 = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.idAnnotationObject2'));
   SET v_relationType = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.relationType'));
   SELECT idRelationType INTO v_idRelationType FROM relationtype where entry = v_relationType;
   INSERT INTO annotationobjectrelation (idAnnotationObject1, idAnnotationObject2, idRelationType) values (v_idAnnotationObject1, v_idAnnotationObject2, v_idRelationType);
   SET @idAnnotationObjectRelation = (SELECT last_insert_id());
   RETURN @idAnnotationObjectRelation;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function corpus_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION corpus_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_entry VARCHAR(255);
   DECLARE v_name VARCHAR(255);
   DECLARE v_idUser INT;
   INSERT INTO entity (type) values ('CRP');
   SET @idEntity = (SELECT last_insert_id());
   SET v_name = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.name'));
   SET v_idUser = JSON_EXTRACT(par_json, '$.idUser');
   SET v_entry = LOWER(CONCAT('crp_', v_name));
   CALL entry_create(v_entry, v_name, @idEntity);
   INSERT INTO corpus(entry,active,idEntity) values (v_entry, 1, @idEntity);
   SET @idCorpus = (SELECT last_insert_id());
   INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','corpus', @idCorpus, v_idUser);
   RETURN @idCorpus;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function document_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION document_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_entry VARCHAR(255);
   DECLARE v_name VARCHAR(255);
   DECLARE v_idCorpus INT;
   DECLARE v_idUser INT;
   INSERT INTO entity (type) values ('DOC');
   SET @idEntity = (SELECT last_insert_id());
   SET v_name = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.name'));
   SET v_idCorpus = JSON_EXTRACT(par_json, '$.idCorpus');
   SET v_idUser = JSON_EXTRACT(par_json, '$.idUser');
   SET v_entry = LOWER(CONCAT('doc_', v_name));
   CALL entry_create(v_entry, v_name, @idEntity);
   INSERT INTO document(entry,active,idGenre,idCorpus,idEntity) values (v_entry, 1, 1, v_idCorpus, @idEntity);
   SET @idDocument = (SELECT last_insert_id());
   INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','document', @idDocument, v_idUser);
   RETURN @idDocument;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function boundingbox_static_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION boundingbox_static_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_x INT;
   DECLARE v_y INT;
   DECLARE v_width INT;
   DECLARE v_height INT;
   DECLARE v_blocked INT;
   DECLARE v_isGroundTruth INT;
   DECLARE v_idStaticObject INT;
   -- DECLARE v_idAnnotationObject1 INT;
   -- DECLARE v_idAnnotationObject2 INT;
   SET v_x = JSON_EXTRACT(par_json, '$.x');
   SET v_y = JSON_EXTRACT(par_json, '$.y');
   SET v_width = JSON_EXTRACT(par_json, '$.width');
   SET v_height = JSON_EXTRACT(par_json, '$.height');
   SET v_blocked = JSON_EXTRACT(par_json, '$.blocked');
   SET v_isGroundTruth = JSON_EXTRACT(par_json, '$.isGroundTruth');
   -- SET @idAnnotationObject2 = annotationobject_create(0,'BBX');
   INSERT INTO boundingbox (x,y,width,height,blocked, isGroundTruth) values (v_x, v_y, v_width, v_height, v_blocked, v_isGroundTruth);
   SET @idBoundingBox = (SELECT last_insert_id());
   SET v_idStaticObject = JSON_EXTRACT(par_json, '$.idStaticObject');
   -- SELECT idAnnotationObject INTO v_idAnnotationObject1 FROM staticobject where (idStaticObject = v_idStaticObject);
   -- SET @idAnnotationObjectRelation = objectrelation_create(JSON_OBJECT('idAnnotationObject1', v_idAnnotationObject1, 'idAnnotationObject2', @idAnnotationObject2, 'relationType', 'rel_staobj_bbox'));
   INSERT INTO staticobject_boundingbox (idStaticObject, idBoundingBox) values (v_idStaticObject, @idBoundingBox);
   RETURN @idBoundingBox;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function textspan_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION textspan_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_x INT;
   DECLARE v_y INT;
   DECLARE v_width INT;
   DECLARE v_height INT;
   DECLARE v_idStaticObject INT;
   DECLARE v_idAnnotationObject1 INT;
   DECLARE v_idAnnotationObject2 INT;
   SET v_x = JSON_EXTRACT(par_json, '$.x');
   SET v_y = JSON_EXTRACT(par_json, '$.y');
   SET v_width = JSON_EXTRACT(par_json, '$.width');
   SET v_height = JSON_EXTRACT(par_json, '$.height');
   SET @idAnnotationObject2 = annotationobject_create(0,'BBX');
   INSERT INTO boundingbox (x,y,width,height,idAnnotationObject) values (v_x, v_y, v_width, v_height, @idAnnotationObject2);
   SET @idBoundingBox = (SELECT last_insert_id());
   SET v_idStaticObject = JSON_EXTRACT(par_json, '$.idStaticObject');
   SELECT idAnnotationObject INTO v_idAnnotationObject1 FROM staticobject where (idStaticObject = v_idStaticObject);
   SET @idAnnotationObjectRelation = objectrelation_create(JSON_OBJECT("idAnnotationObject1", v_idAnnotationObject1, "idAnnotationObject2", @idAnnotationObject2, "relationType", "rel_staobj_bbox"));
   RETURN @idBoundingBox;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function textspan_word_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION textspan_word_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_startWord INT;
   DECLARE v_endWord INT;
   SET v_startWord = JSON_EXTRACT(par_json, '$.startWord');
   SET v_endWord = JSON_EXTRACT(par_json, '$.endWord');
   -- SET @idAnnotationObject = annotationobject_create(0,'TXS');
   INSERT INTO textspan (startWord, endWord) values (v_startWord, v_endWord);
   SET @idTextSpan = (SELECT last_insert_id());
   RETURN @idTextSpan;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function textspan_char_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION textspan_char_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_startChar INT;
   DECLARE v_endChar INT;
   DECLARE v_multi INT;
   DECLARE v_idLayer INT;
   DECLARE v_idInstantiationType INT;
   DECLARE v_idSentence INT;
   DECLARE v_idLayerType INT;
   DECLARE v_idAnnotationSet INT;
   SET v_startChar = JSON_EXTRACT(par_json, '$.startChar');
   SET v_endChar = JSON_EXTRACT(par_json, '$.endChar');
   SET v_multi = JSON_EXTRACT(par_json, '$.multi');
   SET v_idLayer = JSON_EXTRACT(par_json, '$.idLayer');
   SET v_idInstantiationType = JSON_EXTRACT(par_json, '$.idInstantiationType');
   SET v_idLayerType = JSON_EXTRACT(par_json, '$.idLayerType');
   SET v_idAnnotationSet = JSON_EXTRACT(par_json, '$.idAnnotationSet');
   SET v_idSentence =  JSON_EXTRACT(par_json, '$.idSentence');
   -- SET @idAnnotationObject = annotationobject_create(0,'TXS');
   INSERT INTO textspan (startChar, endChar, multi, idLayer, idInstantiationType, idSentence, idLayerType, idAnnotationSet) 
	values (v_startChar, v_endChar, v_multi, v_idLayer, v_idInstantiationType, v_idSentence, v_idLayerType, v_idAnnotationSet);
   SET @idTextSpan = (SELECT last_insert_id());
   RETURN @idTextSpan;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function video_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION video_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_title VARCHAR(255);
   DECLARE v_originalFile VARCHAR(255);
   DECLARE v_sha1Name VARCHAR(255);
   DECLARE v_currentURL VARCHAR(255);
   DECLARE v_width INT;
   DECLARE v_height INT;
   DECLARE v_idLanguage INT;
   SET v_title  = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.title'));
   SET v_originalFile  = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.originalFile'));
   SET v_sha1Name  = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.sha1Name'));
   SET v_currentURL  = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.currentURL'));
   SET v_width  = JSON_EXTRACT(par_json, '$.width');
   SET v_height  = JSON_EXTRACT(par_json, '$.height');
   SET v_idLanguage  = JSON_EXTRACT(par_json, '$.idLanguage');
   -- SET @idAnnotationObject = annotationobject_create(0,'VID');
   INSERT INTO video (title,originalFile,sha1Name,currentURL,width,height,idLanguage)
	values (v_title,v_originalFile,v_sha1Name,v_currentURL,v_width,v_height,v_idLanguage);
   SET @idVideo = (SELECT last_insert_id());
   RETURN @idVideo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function dynamicobject_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION dynamicobject_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_name VARCHAR(255);
   DECLARE v_startFrame INT;
   DECLARE v_endFrame INT;
   DECLARE v_startTime FLOAT;
   DECLARE v_endTime FLOAT;
   DECLARE v_status INT;
   DECLARE v_origin INT;
   DECLARE v_idUser INT;
   SET v_name  = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.name'));
   SET v_startFrame  = JSON_EXTRACT(par_json, '$.startFrame');
   SET v_endFrame  = JSON_EXTRACT(par_json, '$.endFrame');
   SET v_startTime  = JSON_EXTRACT(par_json, '$.startTime');
   SET v_endTime  = JSON_EXTRACT(par_json, '$.endTime');
   SET v_status = JSON_EXTRACT(par_json, '$.status');
   SET v_origin = JSON_EXTRACT(par_json, '$.origin');
   SET v_idUser = JSON_EXTRACT(par_json, '$.idUser');
   -- SET @idAnnotationObject = annotationobject_create(0,'DOB');
   INSERT INTO dynamicobject (name,startFrame,endFrame,startTime,endTime,status,origin)
	values (v_name,v_startFrame,v_endFrame,v_startTime,v_endTime,v_status,v_origin);
   SET @idDynamicObject = (SELECT last_insert_id());
   INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','dynamicobject', @idDynamicObject,v_idUser);
   RETURN @idDynamicObject;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function annotationset_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION annotationset_delete(
	par_idAnnotationSet INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		UPDATE annotation 
			SET status = 'DELETED'
			WHERE idTextSpan
				IN (SELECT idTextSpan FROM textspan WHERE idAnnotationSet = par_idAnnotationSet);
		UPDATE annotationset SET status = 'DELETED' where idAnnotationSet = par_idAnnotationSet;
		-- DELETE FROM ascomments WHERE idAnnotationSet = par_idAnnotationSet;
        -- DELETE FROM annotation WHERE idAnnotationObject IN (
		-- 	SELECT idAnnotationObject FROM textspan WHERE idLayer IN (
		-- 		SELECT idLayer FROM layer WHERE idAnnotationSet = par_idAnnotationSet
        --    )
        -- ); 
		-- DELETE FROM textspan WHERE idLayer IN (SELECT idLayer FROM layer WHERE idAnnotationSet = par_idAnnotationSet);	
        -- DELETE FROM layer WHERE idAnnotationSet = par_idAnnotationSet;
		-- DELETE FROM annotationset WHERE idAnnotationSet = par_idAnnotationSet;
        SELECT login INTO @login FROM user WHERE idUser = par_idUser;
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),@login,'D','annotationset', par_idAnnotationSet,par_idUser);
        RETURN par_idAnnotationSet;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function lemma_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION lemma_create(
	par_lemma JSON
) RETURNS INT
    BEGIN
		DECLARE v_name VARCHAR(255);
        DECLARE v_idLanguage INT;
        DECLARE v_idPOS INT;
        DECLARE v_idUser INT;
        INSERT INTO entity (type) values ('LEM');
        SET @idEntity = (SELECT last_insert_id());
        SET v_name = JSON_UNQUOTE(JSON_EXTRACT(par_lemma, '$.name'));
        SET v_idLanguage = JSON_EXTRACT(par_lemma, '$.idLanguage');
        SET v_idPOS = JSON_EXTRACT(par_lemma, '$.idPOS');
        SET v_idUser = JSON_EXTRACT(par_lemma, '$.idUser');
        INSERT INTO lemma(name, idLanguage, idPOS, idEntity) values (v_name, v_idLanguage, v_idPOS, @idEntity);
        SET @idLemma = (SELECT last_insert_id());
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','lemma', @idLemma, v_idUser);
        RETURN @idLemma;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function lemma_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION lemma_delete(
	par_idLemma INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		DECLARE v_idEntity INT;
		SELECT idEntity INTO v_idEntity FROM lemma WHERE (idLemma = par_idLemma);
        DELETE FROM lexemeentry where (idLemma = par_idLemma);
        DELETE FROM lemma where (idEntity = v_idEntity);
        DELETE FROM entity where (idEntity = v_idEntity);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','lemma', par_idLemma,par_idUser);
        RETURN par_idLemma;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function lexeme_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION lexeme_create(
	par_lexeme JSON
) RETURNS INT
    BEGIN
		DECLARE v_name VARCHAR(255);
        DECLARE v_idLanguage INT;
        DECLARE v_idPOS INT;
        DECLARE v_idUser INT;
        INSERT INTO entity (type) values ('LEX');
        SET @idEntity = (SELECT last_insert_id());
        SET v_name = JSON_UNQUOTE(JSON_EXTRACT(par_lexeme, '$.name'));
        SET v_idLanguage = JSON_EXTRACT(par_lexeme, '$.idLanguage');
        SET v_idPOS = JSON_EXTRACT(par_lexeme, '$.idPOS');
        INSERT INTO lexeme(name, idLanguage, idPOS, idEntity) values (v_name, v_idLanguage, v_idPOS, @idEntity);
        SET @idLexeme = (SELECT last_insert_id());
        INSERT INTO wordform (form, md5, idLexeme) values (v_name, md5(v_name), @idLexeme);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','lexeme', @idLexeme, v_idUser);
        RETURN @idLexeme;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function lexeme_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION lexeme_delete(
	par_idLexeme INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		DECLARE v_idEntity INT;
		SELECT idEntity INTO v_idEntity FROM lexeme WHERE (idLexeme = par_idLexeme);
        DELETE FROM lexemeentry where (idLexeme = par_idLexeme);
        DELETE FROM wordform where (idLexeme = par_idLexeme);
        DELETE FROM lexeme where (idEntity = v_idEntity);
        DELETE FROM entity where (idEntity = v_idEntity);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','lexeme', par_idLexeme,par_idUser);
        RETURN par_idLexeme;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function frame_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION frame_create(
	par_frame JSON
) RETURNS INT
BEGIN
	DECLARE v_nameEn VARCHAR(255);
	DECLARE v_entry VARCHAR(255);
    DECLARE v_idUser INT;
    INSERT INTO entity (type) values ('FRM');
	SET @idEntity = (SELECT last_insert_id());
    SET v_nameEn = JSON_UNQUOTE(JSON_EXTRACT(par_frame, '$.nameEn'));
    SET v_entry = CONCAT('frm_',lower(v_nameEn));
    CALL entry_create(v_entry, v_nameEn, @idEntity);
    INSERT INTO frame(entry, active, defaultName, defaultDefinition, idEntity) values (v_entry, 1, v_nameEn, v_nameEn, @idEntity);
    SET @idFrame = (SELECT last_insert_id());
    SET v_idUser = JSON_EXTRACT(par_frame, '$.idUser');
    INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','frame', @idFrame, v_idUser);
    RETURN @idFrame;
 END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function frame_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION frame_delete(
	par_idFrame INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		DECLARE v_idEntity INT;
		SELECT idEntity INTO v_idEntity FROM frame WHERE (idFrame = par_idFrame);
        DELETE FROM entityrelation where (idEntity1 = v_idEntity) OR (idEntity2 = v_idEntity) OR (idEntity3 = v_idEntity);
        DELETE FROM entry where (idEntity = v_idEntity);
        DELETE FROM frameelement where (idFrame = par_idFrame);
        DELETE FROM lu where (idFrame = par_idFrame);
        DELETE FROM frame where (idEntity = v_idEntity);
        DELETE FROM entity where (idEntity = v_idEntity);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','frame', par_idFrame,par_idUser);
        RETURN par_idFrame;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function boundingbox_dynamic_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION boundingbox_dynamic_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_frameNumber INT;
   DECLARE v_frameTime FLOAT;
   DECLARE v_x INT;
   DECLARE v_y INT;
   DECLARE v_width INT;
   DECLARE v_height INT;
   DECLARE v_blocked INT;
   DECLARE v_isGroundTruth INT;
   DECLARE v_idDynamicObject INT;
   SET v_frameNumber = JSON_EXTRACT(par_json, '$.frameNumber');
   SET v_frameTime = JSON_EXTRACT(par_json, '$.frameTime');
   SET v_x = JSON_EXTRACT(par_json, '$.x');
   SET v_y = JSON_EXTRACT(par_json, '$.y');
   SET v_width = JSON_EXTRACT(par_json, '$.width');
   SET v_height = JSON_EXTRACT(par_json, '$.height');
   SET v_blocked = JSON_EXTRACT(par_json, '$.blocked');
   SET v_isGroundTruth = JSON_EXTRACT(par_json, '$.isGroundTruth');
   -- SET @idAnnotationObject2 = annotationobject_create(0,'BBX');
   INSERT INTO boundingbox (frameNumber, frameTime,x,y,width,height,blocked, isGroundTruth) 
	values (v_frameNumber, v_frameTime,v_x, v_y, v_width, v_height, v_blocked, v_isGroundTruth);
   SET @idBoundingBox = (SELECT last_insert_id());
   SET v_idDynamicObject = JSON_EXTRACT(par_json, '$.idDynamicObject');
   -- SELECT idAnnotationObject INTO v_idAnnotationObject1 FROM staticobject where (idStaticObject = v_idStaticObject);
   -- SET @idAnnotationObjectRelation = objectrelation_create(JSON_OBJECT('idAnnotationObject1', v_idAnnotationObject1, 'idAnnotationObject2', @idAnnotationObject2, 'relationType', 'rel_staobj_bbox'));
   INSERT INTO dynamicobject_boundingbox (idDynamicObject, idBoundingBox) values (v_idDynamicObject, @idBoundingBox);
   RETURN @idBoundingBox;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function timespan_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION timespan_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_startTime FLOAT;
   DECLARE v_endTime FLOAT;
   SET v_startTime = JSON_EXTRACT(par_json, '$.startTime');
   SET v_endTime = JSON_EXTRACT(par_json, '$.endTime');
   -- SET @idAnnotationObject = annotationobject_create(0,'TMS');
   INSERT INTO timespan (startTime, endTime, idAnnotationObject) values (v_startTime, v_endTime);
   SET @idTimeSpan = (SELECT last_insert_id());
   RETURN @idTimeSpan;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function dynamicobject_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION dynamicobject_delete(
	par_idDynamicObject INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		-- DECLARE v_idAnnotationObject INT;
        -- SELECT idAnnotationObject INTO v_idAnnotationObject FROM dynamicobject WHERE (idDynamicObject = par_idDynamicObject);
        DELETE FROM annotation WHERE idDynamicObject = par_idDynamicObject;
        DELETE FROM video_dynamicobject WHERE idDynamicObject = par_idDynamicObject;
        DELETE FROM dynamicobject_boundingbox WHERE idDynamicObject = par_idDynamicObject;
        -- DELETE FROM annotationobjectrelation WHERE (idAnnotationObject1 = v_idAnnotationObject) oR (idAnnotationObject2 = v_idAnnotationObject);
		DELETE FROM dynamicobject WHERE idDynamicObject = par_idDynamicObject;	
        -- DELETE FROM annotationobject WHERE idAnnotationObject = v_idAnnotationObject;
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','dynamicobject', par_idDynamicObject,par_idUser);
        RETURN par_idDynamicObject;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function sentence_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION sentence_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_text TEXT;
   DECLARE v_idDocument INT;
   DECLARE v_idLanguage INT;
   DECLARE v_idUser INT;
   DECLARE v_idAnnotationObjectDocument INT;
   SET v_text = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.text'));
   SET v_idDocument = JSON_EXTRACT(par_json, '$.idDocument');
   SET v_idLanguage = JSON_EXTRACT(par_json, '$.idLanguage');
   SET v_idUser = JSON_EXTRACT(par_json, '$.idUser');
   SELECT idRLSLabel INTO @idRLSLabel FROM rls_label where label = 'public';
   INSERT INTO sentence (text, idLanguage, idRLSLabel) values (v_text, v_idLanguage, @idRLSLabel);
   SET @idSentence = (SELECT last_insert_id());
   INSERT INTO document_sentence(idDocument, idSentence) values (v_idDocument, @idSentence);
   INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','sentence', @idSentence, v_idUser);
   RETURN @idSentence;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function sentence_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION sentence_delete (
	par_idSentence INT,
    par_idUser INT
) RETURNS INT
BEGIN 
   DECLARE v_idAnnotationObject INT;
   DECLARE v_idAnnotationObjectTimespan INT;
   SELECT idAnnotationObject INTO v_idAnnotationObject FROM sentence WHERE (idSentence = par_idSentence);
   SELECT idAnnotationObject2 INTO v_idAnnotationObjectTimespan FROM annotationobjectrelation 
		WHERE (idAnnotationObject1 = v_idAnnotationObject)
        AND (idAnnotationObject2 IN (SELECT idAnnotationObject FROM timespan));
   UPDATE wordmm SET idDocumentSentence = null 
		WHERE (idDocumentSentence IN (SELECT idDocumentSentence from view_document_sentence WHERE (idSentence = par_idSentence)));
   DELETE FROM annotationobjectrelation where (idAnnotationObject1 = v_idAnnotationObject) or (idAnnotationObject2 = v_idAnnotationObject);
   DELETE FROM document_sentence WHERE (idSentence = par_idSentence);
   DELETE FROM sentence WHERE (idSentence = par_idSentence);
   DELETE FROM timespan WHERE (idAnnotationObject = v_idAnnotationObjectTimespan);
   DELETE FROM annotationObject where idAnnotationObject IN (v_idAnnotationObject,v_idAnnotationObjectTimespan);	
   INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','sentence', par_idSentence,par_idUser);
   RETURN par_idSentence;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function image_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION image_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_name VARCHAR(255);
   DECLARE v_currentURL VARCHAR(255);
   DECLARE v_width INT;
   DECLARE v_height INT;
   DECLARE v_depth INT;
   DECLARE v_idLanguage INT;
   SET v_name  = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.name'));
   SET v_currentURL  = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.currentURL'));
   SET v_width  = JSON_EXTRACT(par_json, '$.width');
   SET v_height  = JSON_EXTRACT(par_json, '$.height');
   SET v_depth  = JSON_EXTRACT(par_json, '$.depth');
   SET v_idLanguage  = JSON_EXTRACT(par_json, '$.idLanguage');
   -- SET @idAnnotationObject = annotationobject_create(0,'IMG');
   INSERT INTO image (name,currentURL,width,height,depth,idLanguage)
	values (v_name,v_currentURL,v_width,v_height,v_depth,v_idLanguage);
   SET @idImage = (SELECT last_insert_id());
   RETURN @idImage;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function staticobject_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION staticobject_create (
	par_json JSON
) RETURNS INT
BEGIN 
   DECLARE v_name VARCHAR(255);
   DECLARE v_scene INT;
   DECLARE v_nobndbox INT;
   DECLARE v_idFlickr30kEntitiesChain INT;
   DECLARE v_idUser INT;
   SET v_name  = JSON_UNQUOTE(JSON_EXTRACT(par_json, '$.name'));
   SET v_scene = JSON_EXTRACT(par_json, '$.scene');
   SET v_nobndbox = JSON_EXTRACT(par_json, '$.nobndbox');
   SET v_idFlickr30kEntitiesChain = JSON_EXTRACT(par_json, '$.idFlickr30kEntitiesChain');
   SET v_idUser = JSON_EXTRACT(par_json, '$.idUser');
   -- SET @idAnnotationObject = annotationobject_create(0,'SOB');
   INSERT INTO staticobject (name,scene,nobndbox,idFlickr30kEntitiesChain)
	values (v_name,v_scene,v_nobndbox,v_idFlickr30kEntitiesChain);
   SET @idStaticObject = (SELECT last_insert_id());
   INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','staticobject', @idStaticObject,v_idUser);
   RETURN @idStaticObject;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function staticobject_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION staticobject_delete(
	par_idStaticObject INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		-- DECLARE v_idAnnotationObject INT;
        -- SELECT idAnnotationObject INTO v_idAnnotationObject FROM staticobject WHERE (idStaticObject = par_idStaticObject);
        DELETE FROM annotation WHERE idStaticObject = v_idAnnotationObject;
        DELETE FROM image_staticobject WHERE idStaticObject = v_idAnnotationObject;
        DELETE FROM staticobject_boundingbox WHERE idStaticObject = v_idAnnotationObject;
        -- DELETE FROM annotationobjectrelation WHERE (idAnnotationObject1 = v_idAnnotationObject) oR (idAnnotationObject2 = v_idAnnotationObject);
		DELETE FROM staticobject WHERE idStaticObject = par_idStaticObject;	
        -- DELETE FROM annotationobject WHERE idAnnotationObject = v_idAnnotationObject;
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','staticobject', par_idStaticObject,par_idUser);
        RETURN par_idStaticObject;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function semantictype_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION semantictype_create(
	par_semantictype JSON
) RETURNS INT
BEGIN
	DECLARE v_nameEn VARCHAR(255);
    DECLARE v_name VARCHAR(255);
	DECLARE v_entry VARCHAR(255);
    DECLARE v_idDomain INT;
    DECLARE v_idUser INT;
    INSERT INTO entity (type) values ('STY');
	SET @idEntity = (SELECT last_insert_id());
    SET v_idDomain = JSON_EXTRACT(par_semantictype, '$.idDomain');
    SET v_nameEn = JSON_UNQUOTE(JSON_EXTRACT(par_semantictype, '$.nameEn'));
    SET v_entry = CONCAT('sty_',lower(v_nameEn));
    SET v_name = CONCAT('@',v_nameEn);
    CALL entry_create(v_entry, v_name, @idEntity);
    INSERT INTO semantictype(entry, idEntity, idDomain) values (v_entry, @idEntity, v_idDomain);
    SET @idSemanticType = (SELECT last_insert_id());
    SET v_idUser = JSON_EXTRACT(par_semantictype, '$.idUser');
    INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','semantictype', @idSemanticType, v_idUser);
    RETURN @idSemanticType;
 END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function domain_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION domain_create(
	par_domain JSON
) RETURNS INT
BEGIN
	DECLARE v_nameEn VARCHAR(255);
	DECLARE v_entry VARCHAR(255);
    DECLARE v_idUser INT;
    INSERT INTO entity (type) values ('DOM');
	SET @idEntity = (SELECT last_insert_id());
    SET v_nameEn = JSON_UNQUOTE(JSON_EXTRACT(par_domain, '$.nameEn'));
    SET v_entry = CONCAT('dom_',lower(v_nameEn));
    CALL entry_create(v_entry, v_nameEn, @idEntity);
    INSERT INTO domain(entry, idEntity) values (v_entry, @idEntity);
    SET @idDomain = (SELECT last_insert_id());
    SET v_idUser = JSON_EXTRACT(par_domain, '$.idUser');
    INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','domain', @idDomain, v_idUser);
    RETURN @idDomain;
 END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function layergroup_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION layergroup_create(
	par_layergroup JSON
) RETURNS INT
BEGIN
	DECLARE v_name VARCHAR(255);
    DECLARE v_type VARCHAR(255);
    INSERT INTO layergroup(name, type) values (v_name, v_type);
    SET @idLayerGroup = (SELECT last_insert_id());
    RETURN @idLayerGroup;
 END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function layertype_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION layertype_create(
	par_layertype JSON
) RETURNS INT
BEGIN
	DECLARE v_nameEn VARCHAR(255);
	DECLARE v_entry VARCHAR(255);
    DECLARE v_allowsApositional INT;
    DECLARE v_isAnnotation INT;
    DECLARE v_layerOrder INT;
    DECLARE v_idLayerGroup INT;
    DECLARE v_idUser INT;
    INSERT INTO entity (type) values ('LTY');
	SET @idEntity = (SELECT last_insert_id());
    SET v_allowsApositional = JSON_EXTRACT(par_layertype, '$.allowsApositional');
    SET v_isAnnotation = JSON_EXTRACT(par_layertype, '$.isAnnotation');
    SET v_layerOrder = JSON_EXTRACT(par_layertype, '$.layerOrder');
    SET v_idLayerGroup = JSON_EXTRACT(par_layertype, '$.idLayerGroup');
    SET v_nameEn = JSON_UNQUOTE(JSON_EXTRACT(par_layertype, '$.nameEn'));
    SET v_entry = CONCAT('lty_',lower(v_nameEn));
    CALL entry_create(v_entry, v_nameEn, @idEntity);
    INSERT INTO layertype(entry, allowsApositional, isAnnotation, layerOrder, idLayerGroup, idEntity) values (v_entry,v_allowsApositional, v_isAnnotation, v_layerOrder, v_idLayerGroup, @idEntity);
    SET @idLayerType = (SELECT last_insert_id());
    SET v_idUser = JSON_EXTRACT(par_layertype, '$.idUser');
    INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','layertype', @idLayerType, v_idUser);
    RETURN @idLayerType;
 END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function genericlabel_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION genericlabel_create(
	par_genericlabel JSON
) RETURNS INT
BEGIN
	DECLARE v_name VARCHAR(255);
	DECLARE v_definition TEXT;
    DECLARE v_example TEXT;
    DECLARE v_idColor INT;
    DECLARE v_idLanguage INT;
    DECLARE v_idLayerType INT;
    DECLARE v_idUser INT;
    INSERT INTO entity (type) values ('GLB');
	SET @idEntity = (SELECT last_insert_id());
    SET v_idColor = JSON_EXTRACT(par_genericlabel, '$.idColor');
    SET v_idLanguage = JSON_EXTRACT(par_genericlabel, '$.idLanguage');
    SET v_idLayerType = JSON_EXTRACT(par_genericlabel, '$.idLayerType');
    SET v_name = JSON_UNQUOTE(JSON_EXTRACT(par_genericlabel, '$.name'));
    SET v_definition = JSON_UNQUOTE(JSON_EXTRACT(par_genericlabel, '$.definition'));
    SET v_example = JSON_UNQUOTE(JSON_EXTRACT(par_genericlabel, '$.example'));
    INSERT INTO genericlabel(name,definition, example, idEntity, idColor, idLanguage, idLayerType) values (v_name, v_definition, v_example, @idEntity, v_idColor, v_idLanguage, v_idLayerType);
    SET @idGenericLabel = (SELECT last_insert_id());
    SET v_idUser = JSON_EXTRACT(par_genericlabel, '$.idUser');
    INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','genericlabel', @idGenericLabel, v_idUser);
    RETURN @idGenericLabel;
 END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function boundingbox_dynamic_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION boundingbox_dynamic_delete(
	par_idBoundingBox INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		-- DECLARE v_idAnnotationObject INT;
        -- SELECT idAnnotationObject INTO v_idAnnotationObject FROM boundingbox WHERE (idBoundingBox = par_idBoundingBox);
        -- DELETE FROM annotation WHERE idAnnotationObject = v_idAnnotationObject;
        -- DELETE FROM annotationobjectrelation WHERE (idAnnotationObject1 = v_idAnnotationObject) or (idAnnotationObject2 = v_idAnnotationObject);
        DELETE FROM dynamicobject_boundingbox WHERE idBoundingBox = par_idBoundingBox;	
		DELETE FROM boundingbox WHERE idBoundingBox = par_idBoundingBox;	
        -- DELETE FROM annotationobject WHERE idAnnotationObject = v_idAnnotationObject;
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','boundingbox', par_idBoundingBox,par_idUser);
        RETURN par_idBoundingBox;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function layertype_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION layertype_delete(
	par_idLayerType INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		DECLARE v_idEntity INT;
		SELECT idEntity INTO v_idEntity FROM layertype WHERE (idLayerType = par_idLayerType);
        DELETE FROM entry where (idEntity = v_idEntity);
        DELETE FROM layertype where (idEntity = v_idEntity);
        DELETE FROM entity where (idEntity = v_idEntity);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','layertype', par_idLayerType,par_idUser);
        RETURN par_idLayerType;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function genericlabel_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION genericlabel_delete(
	par_idGenericLabel INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		DECLARE v_idEntity INT;
		SELECT idEntity INTO v_idEntity FROM genericlabel WHERE (idGenericLabel = par_idGenericLabel);
        DELETE FROM genericlabel where (idEntity = v_idEntity);
        DELETE FROM entity where (idEntity = v_idEntity);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','genericlabel', par_idGenericLabel,par_idUser);
        RETURN par_idGenericLabel;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function cxn_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION cxn_create(
	par_cxn JSON
) RETURNS INT
BEGIN
	DECLARE v_nameEn VARCHAR(255);
	DECLARE v_entry VARCHAR(255);
    DECLARE v_abstract INT;
    DECLARE v_active INT;
    DECLARE v_idLanguage INT;
    DECLARE v_idUser INT;
    INSERT INTO entity (type) values ('CXN');
	SET @idEntity = (SELECT last_insert_id());
    SET v_nameEn = JSON_UNQUOTE(JSON_EXTRACT(par_cxn, '$.nameEn'));
    SET v_entry = CONCAT('cxn_',lower(v_nameEn));
    CALL entry_create(v_entry, v_nameEn, @idEntity);
    SET v_abstract = JSON_EXTRACT(par_cxn, '$.abstract');
    SET v_active = JSON_EXTRACT(par_cxn, '$.active');
    SET v_idLanguage = JSON_EXTRACT(par_cxn, '$.idLanguage');
    INSERT INTO construction(entry, active, abstract,idLanguage, idEntity) values (v_entry, v_active, v_abstract,v_idLanguage,@idEntity);
    SET @idConstruction = (SELECT last_insert_id());
    SET v_idUser = JSON_EXTRACT(par_cxn, '$.idUser');
    INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','construction', @idConstruction, v_idUser);
    RETURN @idConstruction;
 END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function cxn_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION cxn_delete(
	par_idConstruction INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		DECLARE v_idEntity INT;
		SELECT idEntity INTO v_idEntity FROM construction WHERE (idConstruction = par_idConstruction);
        DELETE FROM entityrelation where (idEntity1 = v_idEntity) OR (idEntity2 = v_idEntity) OR (idEntity3 = v_idEntity);
        DELETE FROM entry where (idEntity = v_idEntity);
        DELETE FROM constructionelement where (idConstruction = par_idConstruction);
        DELETE FROM construction where (idEntity = v_idEntity);
        DELETE FROM entity where (idEntity = v_idEntity);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','construction', par_idConstruction,par_idUser);
        RETURN par_idConstruction;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function ce_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION ce_create(
	par_ce JSON
) RETURNS INT
BEGIN
	DECLARE v_nameEn VARCHAR(255);
	DECLARE v_entry VARCHAR(255);
    DECLARE v_idConstruction INT;
    DECLARE v_idColor INT;
    DECLARE v_optional INT;
    DECLARE v_head INT;
    DECLARE v_multiple INT;
    DECLARE v_idUser INT;
    INSERT INTO entity (type) values ('CE');
	SET @idEntity = (SELECT last_insert_id());
    SET v_nameEn = JSON_UNQUOTE(JSON_EXTRACT(par_ce, '$.nameEn'));
    SET v_entry = CONCAT('ce_',lower(v_nameEn));
    CALL entry_create(v_entry, v_nameEn, @idEntity);
    SET v_idConstruction = JSON_EXTRACT(par_ce, '$.idConstruction');
    SET v_idColor = JSON_EXTRACT(par_ce, '$.idColor');
    SET v_optional = JSON_EXTRACT(par_ce, '$.optional');
    SET v_head = JSON_EXTRACT(par_ce, '$.head');
    SET v_multiple = JSON_EXTRACT(par_ce, '$.multiple');
    INSERT INTO constructionelement(idConstruction, entry, idColor, optional, head, multiple, active, idEntity) 
			values (v_idConstruction, v_entry, v_idColor, v_optional, v_head, v_multiple, 1, @idEntity);
    SET @idConstructionElement = (SELECT last_insert_id());
    INSERT INTO timeline (tlDateTime,author,operation,tableName,id) VALUES (NOW(),'user','C','constructionelement', @idConstructionElement);
    RETURN @idConstructionElement;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function ce_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION ce_delete(
	par_idConstructionElement INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		DECLARE v_idEntity INT;
		SELECT idEntity INTO v_idEntity FROM constructionelement WHERE (idConstructionElement = par_idConstructionElement);
        DELETE FROM entityrelation where (idEntity1 = v_idEntity) OR (idEntity2 = v_idEntity) OR (idEntity3 = v_idEntity);
        DELETE FROM entry where (idEntity = v_idEntity);
        DELETE FROM constructionelement where (idEntity = v_idEntity);
        DELETE FROM entity where (idEntity = v_idEntity);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','constructionelement', par_idConstructionElement,par_idUser);
        RETURN par_idConstructionElement;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function concept_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION concept_create(
	par_concept JSON
) RETURNS INT
BEGIN
	DECLARE v_nameEn VARCHAR(255);
	DECLARE v_entry VARCHAR(255);
    DECLARE v_type VARCHAR(255);
    DECLARE v_keyword VARCHAR(255);
    DECLARE v_aka TEXT;
    DECLARE v_idTypeInstance INT;
    DECLARE v_idUser INT;
    INSERT INTO entity (type) values ('CPT');
	SET @idEntity = (SELECT last_insert_id());
    SET v_nameEn = JSON_UNQUOTE(JSON_EXTRACT(par_concept, '$.nameEn'));
    SET v_type = JSON_UNQUOTE(JSON_EXTRACT(par_concept, '$.type'));
    SET v_keyword = JSON_UNQUOTE(JSON_EXTRACT(par_concept, '$.keyword'));
    SET v_aka = JSON_UNQUOTE(JSON_EXTRACT(par_concept, '$.aka'));
    SET v_idTypeInstance = JSON_EXTRACT(par_concept, '$.idTypeInstance');
    SET v_entry = CONCAT('cpt_',lower(v_nameEn),'_',lower(v_type));
    CALL entry_create(v_entry, v_nameEn, @idEntity);
    INSERT INTO concept(entry, keyword, aka, type, idEntity, idTypeInstance) values (v_entry, v_keyword, v_aka, v_type, @idEntity, v_idTypeInstance);
    SET @idConcept = (SELECT last_insert_id());
    SET v_idUser = JSON_EXTRACT(par_concept, '$.idUser');
    INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','C','concept', @idConcept, v_idUser);
    RETURN @idConcept;
 END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function concept_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION concept_delete(
	par_idConcept INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		DECLARE v_idEntity INT;
		SELECT idEntity INTO v_idEntity FROM concept WHERE (idConcept = par_idConcept);
        DELETE FROM entityrelation where (idEntity1 = v_idEntity) OR (idEntity2 = v_idEntity) OR (idEntity3 = v_idEntity);
        DELETE FROM entry where (idEntity = v_idEntity);
        DELETE FROM concept where (idEntity = v_idEntity);
        DELETE FROM entity where (idEntity = v_idEntity);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','concept', par_idConcept,par_idUser);
        RETURN par_idConcept;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function lexicon_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION lexicon_create(
	par_lexicon JSON
) RETURNS INT
    BEGIN
		DECLARE v_form VARCHAR(255);
        DECLARE v_idLanguage INT;
        DECLARE v_idPOS INT;
        DECLARE v_idUDPOS INT;
        DECLARE v_idLexiconGroup INT;
        INSERT INTO entity (type) values ('LXC');
        SET @idEntity = (SELECT last_insert_id());
        SET v_form = JSON_UNQUOTE(JSON_EXTRACT(par_lexicon, '$.form'));
        SET v_idLanguage = JSON_EXTRACT(par_lexicon, '$.idLanguage');
        SET v_idPOS = JSON_EXTRACT(par_lexicon, '$.idPOS');
        SET v_idUDPOS = JSON_EXTRACT(par_lexicon, '$.idUDPOS');
        SET v_idLexiconGroup = JSON_EXTRACT(par_lexicon, '$.idLexiconGroup');
        INSERT INTO lexicon(form, idLexiconGroup,idEntity,idPOS, idUDPOS,idLanguage) values (v_form, v_idLexiconGroup, @idEntity, v_idPOS, v_idUDPOS,v_idLanguage);
        SET @idLexicon = (SELECT last_insert_id());
        RETURN @idLexicon;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function lexicon_group_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION lexicon_group_create(
	par_lexicon_group JSON
) RETURNS INT
    BEGIN
		DECLARE v_name VARCHAR(255);
        INSERT INTO entity (type) values ('LXG');
        SET @idEntity = (SELECT last_insert_id());
        SET v_name = JSON_UNQUOTE(JSON_EXTRACT(par_lexicon_group, '$.name'));
        INSERT INTO lexicon_group(name,idEntity) values (v_name, @idEntity);
        SET @idLexiconGroup = (SELECT last_insert_id());
        RETURN @idLexiconGroup;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function lexicon_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION lexicon_delete(
	par_idLexicon INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		DECLARE v_idEntity INT;
		SELECT idEntity INTO v_idEntity FROM lexicon WHERE (idLexicon = par_idLexicon);
        DELETE FROM lexicon_expression where (idLexicon = par_idLexicon);
        DELETE FROM lexicon where (idEntity = v_idEntity);
        DELETE FROM entity where (idEntity = v_idEntity);
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','lexicon', par_idLexicon,par_idUser);
        RETURN par_idLexicon;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function udfeature_create
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION udfeature_create(
	par_udfeature JSON
) RETURNS INT
BEGIN
	DECLARE v_type VARCHAR(255);
	DECLARE v_info VARCHAR(255);
    DECLARE v_idTypeInstance INT;
    INSERT INTO entity (type) values ('UDF');
	SET @idEntity = (SELECT last_insert_id());
    SET v_type = JSON_UNQUOTE(JSON_EXTRACT(par_udfeature, '$.type'));
    SET v_info = JSON_UNQUOTE(JSON_EXTRACT(par_udfeature, '$.info'));
    SELECT idTypeInstance INTO v_idTypeInstance FROM typeinstance WHERE info = v_type AND idType = 11;
    INSERT INTO udfeature(name,info,idEntity,idTypeInstance) values (concat(v_type,'=',v_info), v_info, @idEntity, v_idTypeInstance);
    SET @idUDFeature = (SELECT last_insert_id());
    RETURN @idUDFeature;
 END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function video_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION video_delete (
	par_idVideo INT,
    par_idUser INT
) RETURNS INT
BEGIN 
		-- DECLARE v_idAnnotationObject INT;
        -- SELECT idAnnotationObject INTO v_idAnnotationObject FROM video WHERE (idVideo = par_idVideo);
        -- DELETE FROM annotation WHERE idAnnotationObject = v_idAnnotationObject;
        -- DELETE FROM annotationobjectrelation WHERE (idAnnotationObject1 = v_idAnnotationObject) oR (idAnnotationObject2 = v_idAnnotationObject);
        DELETE FROM video_dynamicobject  WHERE idVideo = par_idVideo;	
		DELETE FROM video WHERE idVideo = par_idVideo;	
        -- DELETE FROM annotationobject WHERE idAnnotationObject = v_idAnnotationObject;
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),'user','D','video', par_idVideo,par_idUser);
        RETURN par_idVideo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function annotationset_hard_delete
-- -----------------------------------------------------

DELIMITER $$
USE `webtool42_db`$$
CREATE FUNCTION annotationset_hard_delete(
	par_idAnnotationSet INT,
    par_idUser INT
) RETURNS INT
    BEGIN
		DELETE FROM annotation 
			WHERE idTextSpan
				IN (SELECT idTextSpan FROM textspan WHERE idAnnotationSet = par_idAnnotationSet);
		DELETE FROM ascomments WHERE idAnnotationSet = par_idAnnotationSet;
        -- DELETE FROM annotation WHERE idAnnotationObject IN (
		-- 	SELECT idAnnotationObject FROM textspan WHERE idLayer IN (
		-- 		SELECT idLayer FROM layer WHERE idAnnotationSet = par_idAnnotationSet
        --    )
        -- ); 
		DELETE FROM textspan WHERE idLayer IN (SELECT idLayer FROM layer WHERE idAnnotationSet = par_idAnnotationSet);	
        DELETE FROM layer WHERE idAnnotationSet = par_idAnnotationSet;
		DELETE FROM annotationset WHERE idAnnotationSet = par_idAnnotationSet;
        SELECT login INTO @login FROM user WHERE idUser = par_idUser;
        INSERT INTO timeline (tlDateTime,author,operation,tableName,id,idUser) VALUES (NOW(),@login,'D','annotationset', par_idAnnotationSet,par_idUser);
        RETURN par_idAnnotationSet;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- View `webtool42_db`.`view_entrylanguage`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_entrylanguage`;
USE `webtool42_db`;
create or replace view view_entrylanguage as
select entry.idEntry, entry.entry, entry.name, entry.description, entry.nick, entry.idLanguage, language.language
from entry inner join language on (entry.idLanguage = language.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_frame`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_frame`;
USE `webtool42_db`;
create or replace view view_frame as
select frame.idFrame, frame.entry, frame.active, frame.idEntity, entry.name, entry.description, entry.idLanguage
from frame
join entry on (frame.idEntity = entry.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_frameelement`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_frameelement`;
USE `webtool42_db`;
create or replace view view_frameelement as
select frame.idFrame, frame.entry as frameEntry, frame.idEntity as frameIdEntity, entryFrame.name frameName, 
       fe.idFrameElement, fe.entry, fe.active, fe.idEntity, fe.idColor, fe.coreType,
       entry.name, entry.description, entry.idLanguage, entryEn.name as nameEn
from frameelement fe 
join frame on (fe.idFrame = frame.idFrame)
join entry on (fe.idEntity = entry.idEntity)
join entry entryFrame on (frame.idEntity = entryFrame.idEntity)
join entry entryEn on ((fe.idEntity = entryEn.idEntity) and (entryEn.idLanguage = 2))
join typeinstance ti on (fe.coreType = ti.entry)
where (entry.idLanguage = entryFrame.idLanguage)
order by ti.info, entry.name;

-- -----------------------------------------------------
-- View `webtool42_db`.`view_coretype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_coretype`;
USE `webtool42_db`;
create or replace view view_coretype as
select ti.entry, ti.info, ti.flag, ti.idType, ti.idColor, ti.idEntity
from typeinstance ti join type on (ti.idType = type.idType)
where (type.entry = 'typ_coretype');

-- -----------------------------------------------------
-- View `webtool42_db`.`view_lu`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_lu`;
USE `webtool42_db`;
create or replace view view_lu as
select frame.idLanguage as idLanguageFrame, frame.idFrame, frame.idEntity as frameIdEntity, frame.name frameName,
    lu.idLU, lu.name, lu.senseDescription, lu.active, lu. importNum, lu.incorporatedFE, lu.idEntity, lu.idLemma, lu.idLexicon, lu.status, lu.origin,
    lemma.name as lemmaName, lemma.idPOS, lemma.idUDPOS, lemma.idLanguage
from lu 
join view_frame frame on (lu.idFrame = frame.idFrame) 
join view_lexicon_lemma lemma on (lu.idLexicon = lemma.idLexicon)
where (lemma.idLanguage = frame.idLanguage)
and (lu.status = 'CREATED');

-- -----------------------------------------------------
-- View `webtool42_db`.`view_annotationset`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_annotationset`;
USE `webtool42_db`;
create or replace view view_annotationset as
select a.idAnnotationSet, a.idAnnotationStatus, a.status, 
	lu.idEntity idEntityLU, lu.idLU, 
    cxn.idEntity idEntityCxn, cxn.idConstruction,
	ti.idEntity as idEntityTypeInstance, 
    a.idDocumentSentence, ds.idSentence, ds.idDocument,
	a.idUser, u.name, u.email, u.login
from annotationset a 
join typeinstance ti on (a.idAnnotationStatus = ti.idTypeInstance)
join document_sentence ds on (a.idDocumentSentence = ds.idDocumentSentence)
left join lu on (a.idLU = lu.idLU)
left join construction cxn on (a.idConstruction = cxn.idConstruction)
left join user u on (a.iduser = u.idUser)
where a.status <> 'DELETED';

-- -----------------------------------------------------
-- View `webtool42_db`.`view_construction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_construction`;
USE `webtool42_db`;
create or replace view view_construction as
select construction.idConstruction, construction.entry, construction.abstract,construction.active, 
    construction.idEntity, construction.idLanguage as cxIdLanguage,
	entry.name, entry.description, entry.idLanguage, concat(entry.name, ' [', language.language, ']') as fullName
from construction
join entry on (construction.idEntity = entry.idEntity)
join language on (construction.idLanguage = language.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constructionelement`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constructionelement`;
USE `webtool42_db`;
create or replace view view_constructionelement as
select construction.idConstruction, construction.entry as constructionEntry, construction.idEntity as constructionIdEntity, 
	ce.idConstructionElement, ce.entry, ce.active, ce.idEntity, ce.idColor, ce.optional, ce.head, ce.multiple,
    entry.name, entry.description, entry.idLanguage
from constructionelement ce 
join construction on (ce.idConstruction = construction.idConstruction)
join entry on (ce.idEntity = entry.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_instantiationtype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_instantiationtype`;
USE `webtool42_db`;
create or replace view view_instantiationtype as
select ti.idTypeInstance as idInstantiationType,ti.entry, ti.info, ti.flag, ti.idTypeInstance, ti.idType, ti.idColor, ti.idEntity, entry.name, entry.description, entry.idLanguage
from typeinstance ti join type on (ti.idType = type.idType)
join entry on (ti.idEntity = entry.idEntity)
where (type.entry = 'typ_instantiationtype');

-- -----------------------------------------------------
-- View `webtool42_db`.`view_relation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_relation`;
USE `webtool42_db`;
create or replace view view_relation as
select er.idEntityRelation, rg.idRelationGroup, rg.entry as relationGroup, 
	rt.idRelationType, rt.entry as relationType, rt.idEntity, rt.prefix,rt.nameCanonical,rt.nameDirect,rt.nameInverse, rt.color,
    er.idEntity1, e1.type as entity1Type, er.idEntity2, e2.type as entity2Type, er.idEntity3, e3.type as entity3Type, er.idRelation
from entityrelation er 
join relationtype rt on (er.idRelationType = rt.idRelationType)
join relationgroup rg on (rt.idRelationGroup = rg.idRelationGroup)
join entity e1 on (er.idEntity1 = e1.idEntity)
join entity e2 on (er.idEntity2 = e2.idEntity)
left join entity e3 on (er.idEntity3 = e3.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_layer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_layer`;
USE `webtool42_db`;
create or replace view view_layer as
select l.idLayer, l.rank, l.idAnnotationSet, l.idLayerType, lt.entry, lt.idEntity, lt.layerOrder, entry.name, entry.description, entry.idLanguage
from layer l 
inner join layertype lt on (l.idLayerType = lt.idLayerType)
inner join entry on (lt.idEntity = entry.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constraint`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constraint`;
USE `webtool42_db`;
create or replace view view_constraint as
select ci.idEntityRelation as idConstraintInstance, ct.entry, 
    ci.idEntity1 as idConstraint, e1.type as constraintType, 
    ci.idEntity2 as idConstrained, e2.type as constrainedType,
    ci.idEntity3 as idConstrainedBy, e3.type constrainedByType,
    ct.idRelationType as idConstraintType,
    ct.idEntity, ct.prefix
from entityrelation ci
join relationtype ct on (ci.idRelationType = ct.idRelationType)
join entity e1 on (ci.idEntity1 = e1.idEntity)
join entity e2 on (ci.idEntity2 = e2.idEntity)
left join entity e3 on (ci.idEntity3 = e3.idEntity)
where ct.idRelationGroup = 6;

-- -----------------------------------------------------
-- View `webtool42_db`.`view_valencepattern`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_valencepattern`;
USE `webtool42_db`;
create or replace view view_valencepattern as
select vl.idValenceLU, vl.idFrame, vl.idLU, vl.idLanguage, vp.idValencePattern, vp.countPattern, vv.idFrameElement, vv.GF, vv.GFSource, vv.PT, 
  lu.name as luName, fentry.name as frameName, feentry.name as feName, l.language
from valencelu vl
join valencepattern vp on (vl.idValenceLU = vp.idValenceLU)
join valencevalent vv on (vp.idValencePattern = vv.idValencePattern)
join frame f on (vl.idFrame = f.idFrame)
join frameelement fe on (vv.idFrameElement = fe.idFrameElement)
join lu on (vl.idLU = lu.idLU)
join language l on (vl.idLanguage = l.idLanguage)
join entry fentry on (f.entry = fentry.entry)
join entry feentry on (fe.entry = feentry.entry)
where (fentry.idLanguage = vl.idLanguage)
and (feentry.idLanguage = vl.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_domain`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_domain`;
USE `webtool42_db`;
create or replace view view_domain as
select domain.idDomain, domain.entry, domain.idEntity, entry.name, entry.description, entry.idLanguage
from domain
join entry on (domain.idEntity = entry.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_wflexemelemma`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_wflexemelemma`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_wflexemelemma` AS
select wf.idWordForm,wf.form,wf.md5,lx.idLexeme,lx.name lexeme, pos1.idPOS idPOSLexeme, pos1.POS POSLexeme, lx.idLanguage,
le.idLexemeEntry, le.lexemeOrder, le.breakBefore, le.headWord,lm.idLemma,lm.name lemma, pos2.idPOS idPOSLemma, pos2.POS POSLemma, lang.language
from wordform wf
join lexeme lx on (wf.idlexeme = lx.idlexeme)
join pos pos1 on (lx.idpos = pos1.idpos)
join language lang on (lx.idlanguage = lang.idlanguage)
left join lexemeentry le on (lx.idlexeme = le.idlexeme)
left join lemma lm on (le.idlemma = lm.idlemma)
left join pos pos2 on (lm.idpos = pos2.idpos)
where ((lm.idlanguage = lx.idlanguage) or (lm.idlanguage is null));

-- -----------------------------------------------------
-- View `webtool42_db`.`view_sentence_old`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_sentence_old`;
USE `webtool42_db`;
create or replace view view_sentence_old as
select s.idSentence, s.text, s.paragraphOrder, s.idParagraph, s.idLanguage, p.documentOrder, p.idDocument,
d.entry as documentEntry, d.author, d.idGenre, d.idCorpus, c.entry as corpusEntry
from sentence s 
join paragraph p on (s.idparagraph = p.idparagraph)
join document d on (p.iddocument = d.iddocument)
join corpus c on (d.idcorpus = c.idcorpus);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_concept`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_concept`;
USE `webtool42_db`;
create or replace view view_concept as
select cp.idConcept, cp.entry, cp.idEntity, cp.keyword, cp.aka, cp.type, cp.status,
	entry.name, entry.description, entry.idLanguage,
	ti.idTypeInstance, ti.name as tiName, ti.description as tiDescription, ti.nick as tiNick
from concept cp
join entry on (cp.idEntity = entry.idEntity)
join view_typeinstance ti on (cp.idTypeInstance = ti.idTypeInstance)
WHERE (entry.idLanguage = ti.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_qualia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_qualia`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_qualia` AS
        SELECT eq.idLanguage, q.idQualia, substr(t.entry,5,15) as type, q.info, q.infoinverse, q.idEntity, eq.name, eq.description, q.idTypeInstance,
				f.idFrame, f.name as frameName,
               fe1.idFrameElement as idFrameElement1, fe1.name as fe1Name,
                fe2.idFrameElement as idFrameElement2, fe2.name as fe2Name
        FROM qualia q
        JOIN entry eq on (q.idEntity = eq.idEntity)
        JOIN typeinstance t on (q.idTypeInstance = t.idTypeInstance)
        LEFT JOIN view_frame f on (q.idFrame = f.idFrame)
        LEFT JOIN view_frameelement fe1 on (q.idFrameElement1 = fe1.idFrameElement)
        LEFT JOIN view_frameelement fe2 on (q.idFrameElement2 = fe2.idFrameElement)
        WHERE ((f.idLanguage = eq.idLanguage) OR (f.idLanguage is null))
        AND ((fe1.idLanguage = eq.idLanguage) OR (fe1.idLanguage is null))
        AND ((fe2.idLanguage = eq.idLanguage) OR (fe2.idLanguage is null));

-- -----------------------------------------------------
-- View `webtool42_db`.`view_semantictype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_semantictype`;
USE `webtool42_db`;
create or replace view view_semantictype as
select st.idSemanticType, st.entry, st.idEntity, st.idDomain, d.entry as domainEntry, e.name, e.description, e.idLanguage
from semantictype st 
join entry e on (e.idEntity = st.idEntity)
join domain d on (st.idDomain = d.idDomain);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_group_user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_group_user`;
USE `webtool42_db`;
create or replace view view_group_user as
select `group`.idGroup, `group`.name, user_group.idUser
from `group`
join user_group on (`group`.idGroup = user_group.idGroup);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_frame_classification`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_frame_classification`;
USE `webtool42_db`;
create or replace view view_frame_classification as
select st.idSemanticType, relation.relationType, e.name, e.idLanguage, frame.idFrame
from frame
join view_relation relation on (frame.idEntity = relation.idEntity1)
join semantictype st on (relation.idEntity2 = st.idEntity)
join entry e on (e.idEntity = st.idEntity)
where relation.relationType in ('rel_framal_type', 'rel_framal_domain');

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_frame`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_frame`;
USE `webtool42_db`;
create or replace view view_constrainedby_frame as
SELECT e.idLanguage, e.name as conName, c.idConstraint, c.idConstrained, c.idConstrainedBy, c.constrainedByType, c.idConstraintInstance, con.name
FROM view_constraint c
JOIN entry e on (c.idEntity = e.idEntity)
JOIN view_frame con on (c.idConstrainedBy = con.idEntity) and (con.idLanguage = e.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_construction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_construction`;
USE `webtool42_db`;
create or replace view view_constrainedby_construction as
SELECT e.idLanguage, e.name as conName, c.idConstraint, c.idConstrained, c.idConstrainedBy, c.constrainedByType, c.idConstraintInstance, con.name
FROM view_constraint c
JOIN entry e on (c.idEntity = e.idEntity)
JOIN view_construction con on (c.idConstrainedBy = con.idEntity) and (con.idLanguage = e.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_ce`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_ce`;
USE `webtool42_db`;
create or replace view view_constrainedby_ce as
SELECT e.idLanguage, e.name as conName, c.idConstraint, c.idConstrained, c.idConstrainedBy, c.constrainedByType, c.idConstraintInstance, con.name
FROM view_constraint c
JOIN entry e on (c.idEntity = e.idEntity)
JOIN view_constructionelement con on (c.idConstrainedBy = con.idEntity) and (con.idLanguage = e.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_semantictype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_semantictype`;
USE `webtool42_db`;
create or replace view view_constrainedby_semantictype as
SELECT e.idLanguage, e.name as conName, c.idConstraint, c.idConstrained, c.idConstrainedBy, c.constrainedByType, c.idConstraintInstance, con.name
FROM view_constraint c
JOIN entry e on (c.idEntity = e.idEntity)
JOIN view_semantictype con on (c.idConstrainedBy = con.idEntity) and (con.idLanguage = e.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_constraint`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_constraint`;
USE `webtool42_db`;
create or replace view view_constrainedby_constraint as
SELECT e.idLanguage, e.name as conName, c.idConstraint, c.idConstrained, c.idConstrainedBy, c.constrainedByType, c.idConstraintInstance, conEntry.name
FROM view_constraint c
JOIN entry e on (c.idEntity = e.idEntity)
JOIN view_constraint con on (c.idConstrainedBy = con.idConstraint)
JOIN entry conEntry on (e.idLanguage = conEntry.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_constraint_cx`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_constraint_cx`;
USE `webtool42_db`;
create or replace view view_constrainedby_constraint_cx as
SELECT e.idLanguage, e.name as conName, c.idConstraint, c.idConstrained, c.idConstrainedBy, c.constrainedByType, c.idConstraintInstance, cx.name
FROM view_constraint c
JOIN entry e on (c.idEntity = e.idEntity)
JOIN view_constraint con on (c.idConstrainedBy = con.idConstraint)
JOIN entry conEntry on (e.idLanguage = conEntry.idLanguage)
JOIN view_construction cx on (con.idConstrainedBy = cx.idEntity)
WHERE (cx.idLanguage = e.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_lexeme`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_lexeme`;
USE `webtool42_db`;
create or replace view view_constrainedby_lexeme as
SELECT e.idLanguage, e.name as conName, c.idConstraint, c.idConstrained, c.idConstrainedBy, c.constrainedByType, c.idConstraintInstance, con.name
FROM view_constraint c
JOIN entry e on (c.idEntity = e.idEntity)
JOIN lexeme con on (c.idConstrainedBy = con.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_lemma`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_lemma`;
USE `webtool42_db`;
create or replace view view_constrainedby_lemma as
SELECT e.idLanguage, e.name as conName, c.idConstraint, c.idConstrained, c.idConstrainedBy, c.constrainedByType, c.idConstraintInstance, con.name
FROM view_constraint c
JOIN entry e on (c.idEntity = e.idEntity)
JOIN view_lexicon_lemma con on (c.idConstrainedBy = con.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_lu`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_lu`;
USE `webtool42_db`;
create or replace view view_constrainedby_lu as
SELECT e.idLanguage, e.name as conName, c.idConstraint, c.idConstrained, c.idConstrainedBy, c.constrainedByType, c.idConstraintInstance, con.name
FROM view_constraint c
JOIN entry e on (c.idEntity = e.idEntity)
JOIN lu con on (c.idConstrainedBy = con.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_udfeature`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_udfeature`;
USE `webtool42_db`;
create or replace view view_constrainedby_udfeature as
SELECT e.idLanguage, e.name as conName, c.idConstraint, c.idConstrained, c.idConstrainedBy, c.constrainedByType, c.idConstraintInstance, con.name as name
FROM view_constraint c
JOIN entry e on (c.idEntity = e.idEntity)
JOIN udfeature con on (c.idConstrainedBy = con.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_udrelation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_udrelation`;
USE `webtool42_db`;
create or replace view view_constrainedby_udrelation as
SELECT e.idLanguage, e.name as conName, c.idConstraint, c.idConstrained, c.idConstrainedBy, c.constrainedByType, c.idConstraintInstance, con.info as name
FROM view_constraint c
JOIN entry e on (c.idEntity = e.idEntity)
JOIN udrelation con on (c.idConstrainedBy = con.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_udpos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_udpos`;
USE `webtool42_db`;
create or replace view view_constrainedby_udpos as
SELECT e.idLanguage, e.name as conName, c.idConstraint, c.idConstrained, c.idConstrainedBy, c.constrainedByType, c.idConstraintInstance, con.pos as name
FROM view_constraint c
JOIN entry e on (c.idEntity = e.idEntity)
JOIN udpos con on (c.idConstrainedBy = con.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_festandsforlu`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_festandsforlu`;
USE `webtool42_db`;
create or replace view view_constrainedby_festandsforlu as
select e.idLanguage, e.name as conName, rt.idEntityRelation as idConstraint, rt.idEntity1 as idConstrained, rt.idEntity2 as idConstrainedBy,
       rt.entity2Type as constrainedByType,rt.idEntityRelation as idConstraintInstance,lu.name
FROM view_relation rt
JOIN entry e ON (rt.idEntity = e.idEntity)
JOIN view_lu lu ON (rt.idEntity2 = lu.idEntity)
WHERE (rt.relationType = 'rel_festandsforlu');

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_festandsforfe`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_festandsforfe`;
USE `webtool42_db`;
create or replace view view_constrainedby_festandsforfe as
select e.idLanguage, e.name as conName, rt.idEntityRelation as idConstraint, rt.idEntity1 as idConstrained, rt.idEntity2 as idConstrainedBy,
       rt.entity2Type as constrainedByType,rt.idEntityRelation as idConstraintInstance,fe.name
FROM view_relation rt
JOIN entry e ON (rt.idEntity = e.idEntity)
JOIN view_frameelement fe ON (rt.idEntity2 = fe.idEntity)
WHERE (fe.idLanguage = e.idLanguage)
AND (rt.relationType = 'rel_festandsforfe');

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_lustandsforlu`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_lustandsforlu`;
USE `webtool42_db`;
create or replace view view_constrainedby_lustandsforlu as
select e.idLanguage, e.name as conName, rt.idEntityRelation as idConstraint, rt.idEntity1 as idConstrained, rt.idEntity2 as idConstrainedBy,
       rt.entity2Type as constrainedByType,rt.idEntityRelation as idConstraintInstance,lu.name
FROM view_relation rt
JOIN entry e ON (rt.idEntity = e.idEntity)
JOIN view_lu lu ON (rt.idEntity2 = lu.idEntity)
WHERE (rt.relationType = 'rel_lustandsforlu');

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_luequivalence`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_luequivalence`;
USE `webtool42_db`;
create or replace view view_constrainedby_luequivalence as
select e.idLanguage, e.name as conName, rt.idEntityRelation as idConstraint, rt.idEntity1 as idConstrained, rt.idEntity2 as idConstrainedBy,
       rt.entity2Type as constrainedByType,rt.idEntityRelation as idConstraintInstance,lu.name
FROM view_relation rt
JOIN entry e ON (rt.idEntity = e.idEntity)
JOIN view_lu lu ON (rt.idEntity2 = lu.idEntity)
WHERE (rt.relationType = 'rel_luequivalence');

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby`;
USE `webtool42_db`;
create or replace view view_constrainedby as
select * from (select *
               from view_constrainedby_frame
               UNION
               select *
               from view_constrainedby_construction
               UNION
               select *
               from view_constrainedby_ce
               UNION
               select *
               from view_constrainedby_semantictype
               UNION
               select *
               from view_constrainedby_constraint
               UNION
               select *
               from view_constrainedby_constraint_cx
               UNION
               select *
               from view_constrainedby_lexeme
               UNION
               select *
               from view_constrainedby_lemma
               UNION
               select *
               from view_constrainedby_morpheme
               UNION
               select *
               from view_constrainedby_lu
               UNION
               select *
               from view_constrainedby_udfeature
               UNION
               select *
               from view_constrainedby_udpos
               UNION
               select *
               from view_constrainedby_udrelation
               UNION
               select *
               from view_constrainedby_festandsforfe
               UNION
               select *
               from view_constrainedby_festandsforlu
               UNION
               select *
               from view_constrainedby_lustandsforlu
               UNION
               select *
               from view_constrainedby_luequivalence
               UNION
               select *
               from view_constrainedby_qualia
               UNION
               SELECT con.idLanguage, 'Evokes Frame', 0, r.idEntity1, r.idEntity2, 'EVK', r.idEntityRelation, con.name
FROM view_relation r
JOIN view_frame con on (r.idEntity2 = con.idEntity)
               UNION
               SELECT con.idLanguage, 'Evokes FE', 0, r.idEntity1, r.idEntity2, 'EVK', r.idEntityRelation, con.name
FROM view_relation r
JOIN view_frameelement con on (r.idEntity2 = con.idEntity)
               UNION
               SELECT con.idLanguage, 'Evokes Concept', r.idEntity1, r.idEntity2, r.idEntity3, 'EVK', r.idEntityRelation, con.name
FROM view_relation r
JOIN view_concept con on (r.idEntity3 = con.idEntity)
) constraints;

-- -----------------------------------------------------
-- View `webtool42_db`.`view_relationtype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_relationtype`;
USE `webtool42_db`;
create or replace view view_relationtype as
select rt.idRelationType, rt.entry, rt.prefix, rt.nameCanonical, rt. nameDirect, rt.nameInverse, rt.color, rt.idRelationGroup, rt.idEntity, e.name, e.description, e.idLanguage, 
	rg.entry as rgEntry, eg.name as rgName
from relationtype rt
join entry e on (rt.idEntity = e.idEntity)
join relationgroup rg on (rt.idRelationGroup = rg.idRelationGroup)
join entry eg on (rg.idEntity = eg.idEntity)
where (e.idLanguage = eg.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_lemma`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_lemma`;
USE `webtool42_db`;
create or replace view view_lemma as
select lemma.idLanguage, lemma.idLemma, lemma.name, lemma.idPOS, lemma.idEntity, pos.POS, concat(lemma.name,' [',language.language,']') as fullName
from lemma
join pos on (lemma.idPOS = pos.idPOS)
join language on (lemma.idLanguage = language.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_qualia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_qualia`;
USE `webtool42_db`;
create or replace view view_constrainedby_qualia as
select e.idLanguage, qualia.name as conName, rt.idEntityRelation as idConstraint, rt.idEntity1 as idConstrained, rt.idEntity2 as idConstrainedBy,
       rt.entity2Type as constrainedByType, rt.idEntityRelation as idConstraintInstance,fe.name
FROM view_relation rt
JOIN entry e ON (rt.idEntity = e.idEntity)
JOIN view_qualia qualia ON (rt.idEntity3 = qualia.idEntity)
JOIN view_frameelement fe ON (rt.idEntity2 = fe.idEntity)
WHERE (rt.relationType = 'rel_qualia')
AND (e.idLanguage = qualia.idLanguage)
AND (e.idLanguage = fe.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_corpus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_corpus`;
USE `webtool42_db`;
create or replace view view_corpus as
select corpus.idCorpus, corpus.active, corpus.idEntity, 
	entry.name, entry.description, entry.idLanguage
from corpus
join entry on (corpus.idEntity = entry.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_document`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_document`;
USE `webtool42_db`;
create or replace view view_document as
select document.idDocument, document.author, document.active, document.idGenre, document.idCorpus, document.idEntity, 
	view_corpus.name as corpusName, view_corpus.description as corpusDescription,
	entry.name, entry.description, entry.idLanguage
from document
join view_corpus on (document.idCorpus = view_corpus.idCorpus)
join entry on (document.idEntity = entry.idEntity)
where (view_corpus.idLanguage = entry.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_alloweddocs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_alloweddocs`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_alloweddocs` AS
SELECT distinct allowed.idCorpus, allowed.corpusName, allowed.idDocument, allowed.documentName, allowed.idUser, allowed.idLanguage
FROM (
SELECT c.idCorpus, c.name as corpusName, doc.idDocument, doc.name as documentName, ut.idUser, doc.idLanguage
FROM usertask ut
JOIN usertask_document utd on (ut.idUserTask = utd.idUserTask)
JOIN view_document doc on (utd.idDocument = doc.idDocument)
JOIN view_corpus c on (doc.idCorpus = c.idCorpus)
WHERE (ut.isActive = 1)
AND (doc.idLanguage = c.idLanguage)
UNION
SELECT c.idCorpus, c.name as corpusName, doc.idDocument, doc.name as documentName, ut.idUser, doc.idLanguage
FROM usertask ut
JOIN usertask_document utd on (ut.idUserTask = utd.idUserTask)
JOIN view_corpus c on (utd.idCorpus = c.idCorpus)
JOIN view_document doc on (c.idCorpus = doc.idCorpus)
WHERE (utd.idDocument is null)
AND (ut.isActive = 1)
AND (doc.idLanguage = c.idLanguage)
) allowed;

-- -----------------------------------------------------
-- View `webtool42_db`.`view_usertask`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_usertask`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_usertask` AS
SELECT ut.idUserTask, ut.isActive, ut.isIgnore,
	u.idUser, u.login, u.name userName, u.email,
    t.idTask, t.name taskName,
    tg.idTaskGroup, tg.name taskGroupName,
    p.idProject, p.name projectName
FROM usertask ut
JOIN user u on (ut.idUser = u.idUser)
JOIN task t on (ut.idTask = t.idTask)
JOIN taskgroup tg on (t.idTaskGroup = tg.idTaskGroup)
JOIN project p on (t.idProject = p.idProject);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_sentence_document`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_sentence_document`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_sentence_document` AS
SELECT s.idSentence, s.text, s.idLanguage as idLanguageSentence, s.idOriginMM, d.idDocument, d.name, d.idLanguage
FROM view_sentence s
JOIN document_sentence ds on (s.idSentence = ds.idSentence)
JOIN view_document d on (ds.idDocument = d.idDocument);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_project_docs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_project_docs`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_project_docs` AS
SELECT distinct p.idProject, p.name as projectName,
	c.idCorpus, c.name as corpusName,
    doc.idDocument, doc.name as documentName, doc.idLanguage
FROM project p
JOIN project_dataset d on (p.idProject = d.idProject)
JOIN dataset_corpus dc on (d.idDataset = dc.idDataset)
JOIN view_corpus c on (dc.idCorpus = c.idCorpus)
JOIN view_document doc on (c.idCorpus = doc.idCorpus)
WHERE (doc.idLanguage = c.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_annotation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_annotation`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_annotation` AS
select a.idAnnotation, a.idEntity, e.type entityType, 
a.idTextspan, a.idStaticObject, a.idDynamicObject,
COALESCE(dts.idDocument, di.idDocument, dv.idDocument) AS idDocument,
a.idUserTask, t.idTask, t.name, ut.idUser
from annotation a
join entity e on (a.idEntity = e.idEntity)
join usertask ut on (a.idUserTask = ut.idUserTask)
join task t on (ut.idTask = t.idTask)
left join textspan ts on (a.idTextspan = ts.idTextspan)
left join sentence s on (ts.idSentence = s.idSentence)
left join document_sentence dts on (s.idSentence = dts.idSentence)
left join staticobject sob on (a.idStaticObject = sob.idStaticObject)
left join image_staticobject isob on (sob.idStaticObject = isob.idStaticObject)
left join document_image di on (isob.idImage = di.idImage)
left join dynamicobject dob on (a.idDynamicObject = dob.idDynamicObject)
left join video_dynamicobject vdob on (dob.idDynamicObject = vdob.idDynamicObject)
left join document_video dv on (vdob.idVideo = dv.idVideo)
where (a.status <> 'DELETED');

-- -----------------------------------------------------
-- View `webtool42_db`.`view_annotation_text_fe`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_annotation_text_fe`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_annotation_text_fe` AS
select a.idAnnotation, 
	ts.idTextSpan,ts.startChar,ts.endChar,ts.multi,ts.idLayer,ts.idInstantiationType,ts.idAnnotationSet, ts.idLayerType,
    fe.idFrame, fe.idFrameElement, fe.idEntity, fe.idColor, fe.coreType, fe.name, fe.idLanguage,
    lt.layerOrder, lt.entry as layerTypeEntry, lt.idEntity as layerTypeIdEntity, lt.name as layerTypeName
from textspan ts
join annotation a on (ts.idTextspan = a.idTextspan)
join view_frameelement fe on (a.idEntity = fe.idEntity)
join view_layertype lt on (ts.idLayerType = lt.idLayerType)
where (fe.idLanguage = lt.idLanguage)
and (a.status <> 'DELETED');

-- -----------------------------------------------------
-- View `webtool42_db`.`view_annotation_text_ce`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_annotation_text_ce`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_annotation_text_ce` AS
select a.idAnnotation, ts.idTextSpan,ts.startChar,ts.endChar,ts.multi,ts.idLayer,ts.idInstantiationType,ts.idAnnotationSet, ts.idLayerType,
       ce.idConstruction, ce.idConstructionElement, ce.idEntity, ce.idColor, ce.name, ce.idLanguage,
       lt.layerOrder, lt.entry as layerTypeEntry, lt.idEntity as layerTypeIdEntity, lt.name as layerTypeName
from textspan ts
join annotation a on (ts.idTextspan = a.idTextspan)
join view_constructionelement ce on (a.idEntity = ce.idEntity)
join view_layertype lt on (ts.idLayerType = lt.idLayerType)
where (ce.idLanguage = lt.idLanguage)
and (a.status <> 'DELETED');

-- -----------------------------------------------------
-- View `webtool42_db`.`view_annotation_text_gl`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_annotation_text_gl`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_annotation_text_gl` AS
select a.idAnnotation, ts.idTextSpan,ts.startChar,ts.endChar,ts.multi,ts.idLayer,ts.idInstantiationType,ts.idAnnotationSet, ts.idLayerType,
       gl.idGenericLabel, gl.idEntity, gl.idColor, gl.name, gl.idLanguage,
       lt.layerOrder, lt.entry as layerTypeEntry, lt.idEntity as layerTypeIdEntity, lt.name as layerTypeName
from textspan ts
join annotation a on (ts.idTextspan = a.idTextspan)
join genericlabel gl on (a.idEntity = gl.idEntity)
join view_layertype lt on (ts.idLayerType = lt.idLayerType)
where (gl.idLanguage = lt.idLanguage)
and (a.status <> 'DELETED');

-- -----------------------------------------------------
-- View `webtool42_db`.`view_document_sentence`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_document_sentence`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_document_sentence` AS
select ds.idDocumentSentence, ds.idDocument, ds.idSentence
from document_sentence ds;

-- -----------------------------------------------------
-- View `webtool42_db`.`view_image_sentence`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_image_sentence`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_image_sentence` AS
select i.idImage, s.idSentence
from image_sentence ise
join image i on (ise.idImage = i.idImage)
join view_sentence s on (ise.idSentence = s.idSentence);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_staticobject_textspan`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_staticobject_textspan`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_staticobject_textspan` AS
select sob.idStaticObject,
       sob.name,
       sob.scene,
       sob.nobndbox,
       ts.startWord,
       ts.endWord,
       ds.idDocument,
       ds.idSentence
from staticobject as sob
join staticobject_textspan sot on (sob.idStaticObject = sot.idStaticObject)
join textspan as ts on (sot.idTextSpan = ts.idTextSpan)
join document_sentence as ds on (ts.idSentence = ds.idSentence);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_staticobject_boundingbox`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_staticobject_boundingbox`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_staticobject_boundingbox` AS
select bb.idBoundingBox, bb.x, bb.y, bb.width,bb.height,bb.blocked,bb.isGroundTruth,sob.idStaticObject
from boundingbox bb
join staticobject_boundingbox sbb on (bb.idBoundingBox = sbb.idBoundingBox)
join staticobject sob on (sbb.idStaticObject = sob.idStaticObject);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_lexicon`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_lexicon`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_lexicon` AS
select wf.idLexicon as idWordForm, wf.form, wf.idEntity as idEntityWF,
       le.idLexiconExpression, le.position, le.breakBefore, le.head,
       lm.idLexicon as idLemma, lm.shortName as lemma, lm.idEntity as idEntityLM, lm.idLanguage as idLanguageLM, lm.idPOS as idPOSLM, lm.pos posLM, lm.udPOS udPOSLM,
       lu.idLU, lu.name as lu, lu.senseDescription, lu.incorporatedFE, lu.idFrame, lu.idEntity as idEntityLU
    from lexicon wf
    left join lexicon_expression le on (wf.idLexicon = le.idExpression)
    left join view_lexicon_lemma lm on (le.idLexicon = lm.idLexicon)
    left join lu on (lm.idLexicon = lu.idLexicon);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_document_video`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_document_video`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_document_video` AS
select d.idDocument, v.idVideo
from document_video dv
join document d on (dv.idDocument = d.idDocument)
join video v on (dv.idVideo = v.idVideo);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_frame_relation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_frame_relation`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_frame_relation` AS
select relation.idEntityRelation, relation.idRelationType, relation.relationType, relation.nameCanonical, relation.nameDirect, relation.nameInverse, relation.color,
	f1.name f1Name, f1.idFrame f1IdFrame, f1.idEntity f1IdEntity, f1.idLanguage,
    f2.name f2Name, f2.idFrame f2IdFrame, f2.idEntity f2IdEntity
from view_frame f1
join view_relation relation on (f1.idEntity = relation.idEntity1)
join view_frame f2 on (relation.idEntity2 = f2.idEntity)
where relation.relationType in (
'rel_causative_of',
'rel_inchoative_of',
'rel_inheritance',
'rel_perspective_on',
'rel_precedes',
'rel_see_also',
'rel_subframe',
'rel_structure',
'rel_using',
'rel_metaphorical_projection'
) and (f1.idLanguage = f2.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_fe_internal_relation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_fe_internal_relation`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_fe_internal_relation` AS
select relation.idEntityRelation, relation.idRelationType, relation.relationType, relation.nameCanonical, relation.nameDirect, relation.nameInverse, relation.color,
	fe1.name fe1Name, fe1.idFrameElement fe1IdFrameElement, fe1.idEntity fe1IdEntity, fe1.idFrame fe1IdFrame, fe1.coreType fe1CoreType, fe1.idColor fe1IdColor, fe1.idLanguage,
    fe2.name fe2Name, fe2.idFrameElement fe2IdFrameElement, fe2.idEntity fe2IdEntity, fe2.idFrame fe2IdFrame, fe2.coreType fe2CoreType, fe2.idColor fe2IdColor
from view_frameelement fe1
join view_relation relation on (fe1.idEntity = relation.idEntity1)
join view_frameelement fe2 on (relation.idEntity2 = fe2.idEntity)
where relation.relationType in ('rel_coreset','rel_excludes','rel_requires') and (fe1.idLanguage = fe2.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_fe_relation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_fe_relation`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_fe_relation` AS
select relation.idEntityRelation, relation.idRelationType, relation.relationType, relation.idRelation, relation.nameCanonical, relation.nameDirect, relation.nameInverse, relation.color,
	fe1.name fe1Name, fe1.idFrameElement fe1IdFrameElement, fe1.idEntity fe1IdEntity, fe1.idFrame fe1IdFrame, fe1.coreType fe1CoreType, fe1.idColor fe1IdColor, fe1.idLanguage,
    fe2.name fe2Name, fe2.idFrameElement fe2IdFrameElement, fe2.idEntity fe2IdEntity, fe2.idFrame fe2IdFrame, fe2.coreType fe2CoreType, fe2.idColor fe2IdColor
from view_frameelement fe1
join view_relation relation on (fe1.idEntity = relation.idEntity1)
join view_frameelement fe2 on (relation.idEntity2 = fe2.idEntity)
where relation.relationType in (
'rel_causative_of',
'rel_inchoative_of',
'rel_inheritance',
'rel_perspective_on',
'rel_precedes',
'rel_see_also',
'rel_subframe',
'rel_structure',
'rel_using',
'rel_metaphorical_projection'
) and (fe1.idLanguage = fe2.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_qualiastructure`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_qualiastructure`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_qualiastructure` AS
select qs.idQualiaStructure,f.idFrame, f.idEntity, f.name, f.idLanguage, qr.name as relation, qr.idQualiaRelation
from qualiastructure qs
join view_frame f on (qs.idFrame = f.idFrame)
join qualiarelation qr on (qs.idQualiaRelation = qr.idQualiaRelation);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_qualiaargument`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_qualiaargument`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_qualiaargument` AS
select qa.idQualiaArgument, qa.order, qa.type, qa.idQualiaStructure, fe.name as feName, fe.coreType as feCoreType, fe.idColor as feIdColor, fe.idLanguage
from qualiaargument qa
join view_frameelement fe on (qa.idFrameElement = fe.idFrameElement);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_qualialu`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_qualialu`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_qualialu` AS
select ql.idQualiaLU, lu1.idLU idLU1, lu1.name as lu1, lu2.idLU idLU2, lu2.name as lu2, 
	qa1.idFrameElement idFrameElement1, qa1.order order1, qa1.type type1, 
	qa2.idFrameElement idFrameElement2, qa2.order order2, qa2.type type2
from qualialu ql
join view_lu lu1 on (ql.idLU1 = lu1.idLU)
join view_lu lu2 on (ql.idLU2 = lu2.idLU)
join view_qualiastructure qs on (ql.idQualiaStructure = qs.idQualiaStructure)
join qualiaargument qa1 on (qa1.idQualiaStructure = qs.idQualiaStructure) and (qa1.order = 1)
join qualiaargument qa2 on (qa2.idQualiaStructure = qs.idQualiaStructure) and (qa2.order = 2);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_annotation_dynamic`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_annotation_dynamic`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_annotation_dynamic` AS
SELECT
    dob.idDynamicObject, dob.name, dob.startFrame, dob.endFrame,
    dob.startTime, dob.endTime, dob.status, dob.origin,
    lt.idLayerType, lt.layerOrder, lte.name as nameLayerType, lg.name as layerGroup, lte.idLanguage,

    -- LU annotations (using MAX to handle potential duplicates)
    MAX(alu.idAnnotation) as idAnnotationLU,
    MAX(alu.idLU) as idLU,
    MAX(IF(alu.idLU, CONCAT(alu.frameName, '.', alu.name), '')) as lu,

    -- FE annotations
    MAX(afe.idAnnotation) as idAnnotationFE,
    MAX(afe.idFrameElement) as idFrameElement,
    MAX(afe.idFrame) as idFrame,
    MAX(IFNULL(afe.frameName, '')) as frame,
    MAX(IFNULL(afe.name, '')) as fe,
    MAX(afe.bgColor) as bgColorFE,
    MAX(afe.fgColor) as fgColorFE,
    MAX(afe.idLanguage) as idLanguageFE,

    -- GL annotations
    MAX(agl.idAnnotation) as idAnnotationGL,
    MAX(agl.idGenericLabel) as idGenericLabel,
    MAX(IFNULL(agl.name, '')) as gl,
    MAX(agl.bgColor) as bgColorGL,
    MAX(agl.fgColor) as fgColorGL,
    MAX(agl.idLanguage) as idLanguageGL,

    MAX(dv.idDocument) as idDocument

FROM dynamicobject dob
-- Replace view_layertype with direct table access
JOIN layertype lt ON (dob.idLayerType = lt.idLayerType)
JOIN layergroup lg ON (lt.idLayerGroup = lg.idLayerGroup)
JOIN entry lte ON (lt.idEntity = lte.idEntity)

JOIN video_dynamicobject vdo ON (dob.idDynamicObject = vdo.idDynamicObject)
JOIN document_video dv ON (vdo.idVideo = dv.idVideo)

-- Keep the subqueries but optimize them internally
LEFT JOIN (
    SELECT lu.idLU, lu.idEntity, lu.name,
           f.name as frameName, a.idAnnotation, a.idDynamicObject, f.idLanguage
    FROM annotation a
    JOIN lu ON (a.idEntity = lu.idEntity AND lu.status = 'CREATED')
    -- Replace view_frame with direct access to avoid nested view
    JOIN frame fr ON (lu.idFrame = fr.idFrame)
    JOIN entry f ON (fr.idEntity = f.idEntity)
    WHERE a.idDynamicObject IS NOT NULL
      AND a.status <> 'DELETED'
) alu ON (dob.idDynamicObject = alu.idDynamicObject) and (alu.idLanguage = lte.idLanguage)

LEFT JOIN (
    SELECT fe.idFrameElement, fe.idFrame, f.name as frameName,fee.name, 
			c.rgbBg as bgColor, c.rgbFg as fgColor, 
            fee.idLanguage, a.idAnnotation, a.idDynamicObject
    FROM annotation a
    JOIN frameelement fe ON (a.idEntity = fe.idEntity)
    JOIN color c ON (fe.idColor = c.idColor)
    -- Direct frame access instead of view_frameelement
    JOIN frame fr ON (fe.idFrame = fr.idFrame)
    JOIN entry f ON (fr.idEntity = f.idEntity)
    JOIN entry fee ON (fe.idEntity = fee.idEntity)
    WHERE a.idDynamicObject IS NOT NULL
      AND a.status <> 'DELETED'
      AND f.idLanguage = fee.idLanguage
) afe ON (dob.idDynamicObject = afe.idDynamicObject) and (afe.idLanguage = lte.idLanguage)

LEFT JOIN (
    SELECT gl.idGenericLabel, gl.name, c.rgbBg as bgColor,
           c.rgbFg as fgColor, a.idAnnotation, a.idDynamicObject, gle.idLanguage
    FROM annotation a
    JOIN genericlabel gl ON (a.idEntity = gl.idEntity)
    JOIN entry gle ON (gl.idEntity = gle.idEntity)
    JOIN color c ON (gl.idColor = c.idColor)
    WHERE a.idDynamicObject IS NOT NULL
      AND a.status <> 'DELETED'
) agl ON (dob.idDynamicObject = agl.idDynamicObject) and (agl.idLanguage = lte.idLanguage)

WHERE (dob.origin = 1) or (dob.origin = 2)
GROUP BY dob.idDynamicObject, dob.name, dob.startFrame, dob.endFrame,
         dob.startTime, dob.endTime, dob.status, dob.origin,
         lt.idLayerType, lt.layerOrder, lte.name, lg.name, lte.idLanguage;

-- -----------------------------------------------------
-- View `webtool42_db`.`view_dynamicobject_boundingbox`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_dynamicobject_boundingbox`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_dynamicobject_boundingbox` AS
select bb.idBoundingBox, bb.frameNumber, bb.frameTime, bb.x, bb.y, bb.width,bb.height,bb.blocked,bb.isGroundTruth,dob.idDynamicObject
from boundingbox bb
join dynamicobject_boundingbox db on (bb.idBoundingBox = db.idBoundingBox)
join dynamicobject dob on (db.idDynamicObject = dob.idDynamicObject);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_sentence_timespan`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_sentence_timespan`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_sentence_timespan` AS
SELECT s.idSentence, s.text, s.idLanguage as idLanguageSentence, s.idOriginMM, t.idTimeSpan, t.startTime, t.endTime
FROM view_sentence s
JOIN sentence_timespan sts on (s.idSentence = sts.idSentence)
JOIN timespan t on (sts.idTimespan = t.idTimespan);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_video_dynamicobject`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_video_dynamicobject`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_video_dynamicobject` AS
select v.idVideo, dob.idDynamicObject
from video_dynamicobject vdo
join video v on (vdo.idVideo = vdo.idVideo)
join dynamicobject dob on (vdo.idDynamicObject = dob.idDynamicObject);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_document_wordmm`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_document_wordmm`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_document_wordmm` AS
select w.idWordMM, w.word, w.startTime, w.endTime, w.origin, w.idDocumentSentence, ds.idDocument, ds.idSentence
from wordmm w
join view_document_sentence ds on (w.idDocumentSentence = ds.idDocumentSentence);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_video_wordmm`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_video_wordmm`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_video_wordmm` AS
select w.idWordMM, w.word, w.startTime, w.endTime, w.origin, v.idVideo, w.idDocumentSentence, ds.idDocument, ds.idSentence
from wordmm w
join video v on (w.idVideo = v.idVideo)
left join view_document_sentence ds on (w.idDocumentSentence = ds.idDocumentSentence);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_layertype_gl`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_layertype_gl`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_layertype_gl` AS
select lt.idLayerType, lt.entry, lt.allowsApositional, lt.isAnnotation, lt.layerOrder, lt.idLayerGroup, lt.idEntity as idEntityLayerType,
	gl.idGenericLabel, gl.name, gl.definition, gl.example,gl.idEntity as idEntityGenericLabel, gl.idColor, gl.idLanguage
from layertype lt
join view_relation r on (lt.idEntity = r.idEntity1)
join genericlabel gl on (r.idEntity2 = gl.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_layertype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_layertype`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_layertype` AS
select lt.idLayerType, lt.entry, lt.allowsApositional, lt.isAnnotation, lt.layerOrder, lt.idLayerGroup, lt.idEntity, 
	e.name, e.description, e.idLanguage, lg.name as layerGroup, lg.type as layerGroupType
from layertype lt
join layergroup lg on (lt.idLayerGroup = lg.idLayerGroup)
join entry e on (lt.idEntity = e.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_document_image`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_document_image`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_document_image` AS
select d.idDocument, i.idImage
from document_image di
join document d on (di.idDocument = d.idDocument)
join image i on (di.idImage = i.idImage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_usertask_docs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_usertask_docs`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_usertask_docs` AS
SELECT distinct utd.idUserTaskDocument, ut.idUserTask, ut.isActive, ut.isIgnore, u.idUser, u.login, u.name userName, u.email, t.idTask, t.name taskName,
   d.idDocument, d.name as documentName, c.idCorpus, c.name as corpusName, c.idLanguage
FROM usertask ut
JOIN user u on (ut.idUser = u.idUser)
JOIN task t on (ut.idTask = t.idTask)
JOIN usertask_document as utd on (ut.idUserTask = utd.idUserTask)
JOIN view_corpus as c on (utd.idCorpus = c.idCorpus)
LEFT JOIN view_document as d on (utd.idDocument = d.idDocument)
WHERE ((d.idLanguage is null) or ((c.idLanguage = d.idLanguage) and (d.idLanguage is not null)));

-- -----------------------------------------------------
-- View `webtool42_db`.`view_annotation_static`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_annotation_static`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_annotation_static` AS
SELECT
    sob.idStaticObject, sob.name, sob.origin,
    lt.idLayerType, lt.layerOrder, lte.name as nameLayerType, lg.name as layerGroup, lte.idLanguage,

    -- LU annotations (using MAX to handle potential duplicates)
    MAX(alu.idAnnotation) as idAnnotationLU,
    MAX(alu.idLU) as idLU,
    MAX(IF(alu.idLU, CONCAT(alu.frameName, '.', alu.name), '')) as lu,

    -- FE annotations
    MAX(afe.idAnnotation) as idAnnotationFE,
    MAX(afe.idFrameElement) as idFrameElement,
    MAX(afe.idFrame) as idFrame,
    MAX(IFNULL(afe.frameName, '')) as frame,
    MAX(IFNULL(afe.name, '')) as fe,
    MAX(afe.bgColor) as bgColorFE,
    MAX(afe.fgColor) as fgColorFE,
    MAX(afe.idLanguage) as idLanguageFE,

    MAX(di.idDocument) as idDocument

FROM staticobject sob
-- Replace view_layertype with direct table access
JOIN layertype lt ON (sob.idLayerType = lt.idLayerType)
JOIN layergroup lg ON (lt.idLayerGroup = lg.idLayerGroup)
JOIN entry lte ON (lt.idEntity = lte.idEntity)

JOIN image_staticobject iso ON (sob.idStaticObject = iso.idStaticObject)
JOIN document_image di ON (iso.idImage = di.idImage)

-- Keep the subqueries but optimize them internally
LEFT JOIN (
    SELECT lu.idLU, lu.idEntity, lu.name,
           f.name as frameName, a.idAnnotation, a.idStaticObject, f.idLanguage
    FROM annotation a
    JOIN lu ON (a.idEntity = lu.idEntity AND lu.status = 'CREATED')
    -- Replace view_frame with direct access to avoid nested view
    JOIN frame fr ON (lu.idFrame = fr.idFrame)
    JOIN entry f ON (fr.idEntity = f.idEntity)
    WHERE a.idStaticObject IS NOT NULL
      AND a.status <> 'DELETED'
) alu ON (sob.idStaticObject = alu.idStaticObject) and (alu.idLanguage = lte.idLanguage)

LEFT JOIN (
    SELECT fe.idFrameElement, fe.idFrame, f.name as frameName,fee.name, 
			c.rgbBg as bgColor, c.rgbFg as fgColor, 
            fee.idLanguage, a.idAnnotation, a.idStaticObject
    FROM annotation a
    JOIN frameelement fe ON (a.idEntity = fe.idEntity)
    JOIN color c ON (fe.idColor = c.idColor)
    -- Direct frame access instead of view_frameelement
    JOIN frame fr ON (fe.idFrame = fr.idFrame)
    JOIN entry f ON (fr.idEntity = f.idEntity)
    JOIN entry fee ON (fe.idEntity = fee.idEntity)
    WHERE a.idStaticObject IS NOT NULL
      AND a.status <> 'DELETED'
      AND f.idLanguage = fee.idLanguage
) afe ON (sob.idStaticObject = afe.idStaticObject) and (afe.idLanguage = lte.idLanguage)

WHERE (sob.origin = 1)
GROUP BY sob.idStaticObject, sob.name, sob.origin,
         lt.idLayerType, lt.layerOrder, lte.name, lg.name, lte.idLanguage;

-- -----------------------------------------------------
-- View `webtool42_db`.`view_domain_semantictype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_domain_semantictype`;
USE `webtool42_db`;
create or replace view view_domain_semantictype as
select d.idDomain, d.entry domainEntry, d.idEntity domainIdEntity, d.name as domainName,
st.idEntity stIdEntity, st.entry stEntry, st.name stName, st.idLanguage
from view_domain d
join view_semantictype st on (d.idDomain = st.idDomain)
where (d.idlanguage = st.idlanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_domain_frame`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_domain_frame`;
USE `webtool42_db`;
create or replace view view_domain_frame as
select d.idDomain, d.entry domainEntry, d.idEntity domainIdEntity, d.name as domainName,
f.idEntity frameIdEntity, f.entry frameEntry, f.name frameName, f.idLanguage
from view_domain d
join entityrelation er on (d.idEntity = er.idEntity2)
join view_frame f on (er.idEntity1 = f.idEntity)
where (d.idlanguage = f.idlanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_typeinstance`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_typeinstance`;
USE `webtool42_db`;
create or replace view view_typeinstance as
select ti.idTypeInstance, ti.entry, ti.idEntity, entry.name, entry.description, entry.nick, entry.idLanguage
from typeinstance ti
join entry on (ti.idEntity = entry.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_concept_relation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_concept_relation`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_concept_relation` AS
select relation.idEntityRelation, relation.idRelationType, relation.relationType, relation.nameCanonical, relation.nameDirect, relation.nameInverse, relation.color,
	c1.name c1Name, c1.idConcept c1IdConcept, c1.idEntity c1IdEntity, c1.keyword c1Keyword, c1.type c1Type, c1.status c1Status, c1.idLanguage,
    c2.name c2Name, c2.idConcept c2IdConcept, c2.idEntity c2IdEntity, c2.keyword c2Keyword, c2.type c2Type, c2.status c2Status
from view_concept c1
join view_relation relation on (c1.idEntity = relation.idEntity1)
join view_concept c2 on (relation.idEntity2 = c2.idEntity)
where relation.idRelationGroup in (
	select idRelationGroup from relationgroup where entry = 'rgp_cc_relations'
) and (c1.idLanguage = c2.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_semantictype_relation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_semantictype_relation`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_semantictype_relation` AS
select relation.idEntityRelation, relation.idRelationType, relation.relationType, relation.nameCanonical, relation.nameDirect, relation.nameInverse, relation.color,
	st1.name st1Name, st1.idSemanticType st1IdSemanticType, st1.idEntity st1IdEntity, st1.idLanguage,
    st2.name st2Name, st2.idSemanticType st2IdSemanticType, st2.idEntity stIdEntity
from view_semantictype st1
join view_relation relation on (st1.idEntity = relation.idEntity1)
join view_semantictype st2 on (relation.idEntity2 = st2.idEntity)
where relation.relationType in (
'rel_subtypeof'
) and (st1.idLanguage = st2.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_lucandidate_402`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_lucandidate_402`;
USE `webtool42_db`;
create or replace view view_lucandidate_402 as
select frame.name as frameName, frameCandidate, frame.idFrame,
    lu.idLUCandidate, lu.name, lu.senseDescription, lu.idLemma, lu.discussion, lu.idDocument, lu.idDocumentSentence, lu.idBoundingBox,
    lu.idUser, lu.incorporatedFE, lu.createdAt, lu.idLexicon,
    lemma.shortName as lemmaName, lemma.idPOS, lemma.idUDPOS, lemma.idLanguage,
    user.name as userName, user.email
from lucandidate as lu
join view_lexicon_lemma as lemma on (lu.idLexicon = lemma.idLexicon)
join user on (lu.idUser = user.idUser)
left join view_frame frame on (lu.idFrame = frame.idFrame)
where ((lemma.idLanguage = frame.idLanguage) or (frame.idLanguage is null));

-- -----------------------------------------------------
-- View `webtool42_db`.`view_relationgroup`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_relationgroup`;
USE `webtool42_db`;
create or replace view view_relationgroup as
select rg.idRelationGroup, rg.entry, rg.idEntity, 
	e.name, e.description, e.idLanguage
from relationgroup rg
join entry e on (rg.idEntity = e.idEntity);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_annotation_deixis`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_annotation_deixis`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_annotation_deixis` AS
SELECT
    dob.idDynamicObject, dob.name, dob.startFrame, dob.endFrame,
    dob.startTime, dob.endTime, dob.status, dob.origin,
    lt.idLayerType, lt.layerOrder, lte.name as nameLayerType, lg.name as layerGroup, lte.idLanguage,

    -- LU annotations (using MAX to handle potential duplicates)
    MAX(alu.idAnnotation) as idAnnotationLU,
    MAX(alu.idLU) as idLU,
    MAX(IF(alu.idLU, CONCAT(alu.frameName, '.', alu.name), '')) as lu,

    -- FE annotations
    MAX(afe.idAnnotation) as idAnnotationFE,
    MAX(afe.idFrameElement) as idFrameElement,
    MAX(afe.idFrame) as idFrame,
    MAX(IFNULL(afe.frameName, '')) as frame,
    MAX(IFNULL(afe.name, '')) as fe,
    MAX(afe.bgColor) as bgColorFE,
    MAX(afe.fgColor) as fgColorFE,
    MAX(afe.idLanguage) as idLanguageFE,

    -- GL annotations
    MAX(agl.idAnnotation) as idAnnotationGL,
    MAX(agl.idGenericLabel) as idGenericLabel,
    MAX(IFNULL(agl.name, '')) as gl,
    MAX(agl.bgColor) as bgColorGL,
    MAX(agl.fgColor) as fgColorGL,
    MAX(agl.idLanguage) as idLanguageGL,

    MAX(dv.idDocument) as idDocument

FROM dynamicobject dob
-- Replace view_layertype with direct table access
JOIN layertype lt ON (dob.idLayerType = lt.idLayerType)
JOIN layergroup lg ON (lt.idLayerGroup = lg.idLayerGroup)
JOIN entry lte ON (lt.idEntity = lte.idEntity)

JOIN video_dynamicobject vdo ON (dob.idDynamicObject = vdo.idDynamicObject)
JOIN document_video dv ON (vdo.idVideo = dv.idVideo)

-- Keep the subqueries but optimize them internally
LEFT JOIN (
    SELECT lu.idLU, lu.idEntity, lu.name,
           f.name as frameName, a.idAnnotation, a.idDynamicObject, f.idLanguage
    FROM annotation a
    JOIN lu ON (a.idEntity = lu.idEntity AND lu.status = 'CREATED')
    -- Replace view_frame with direct access to avoid nested view
    JOIN frame fr ON (lu.idFrame = fr.idFrame)
    JOIN entry f ON (fr.idEntity = f.idEntity)
    WHERE a.idDynamicObject IS NOT NULL
      AND a.status <> 'DELETED'
) alu ON (dob.idDynamicObject = alu.idDynamicObject) and (alu.idLanguage = lte.idLanguage)

LEFT JOIN (
    SELECT fe.idFrameElement, fe.idFrame, f.name as frameName,fee.name, 
			c.rgbBg as bgColor, c.rgbFg as fgColor, 
            fee.idLanguage, a.idAnnotation, a.idDynamicObject
    FROM annotation a
    JOIN frameelement fe ON (a.idEntity = fe.idEntity)
    JOIN color c ON (fe.idColor = c.idColor)
    -- Direct frame access instead of view_frameelement
    JOIN frame fr ON (fe.idFrame = fr.idFrame)
    JOIN entry f ON (fr.idEntity = f.idEntity)
    JOIN entry fee ON (fe.idEntity = fee.idEntity)
    WHERE a.idDynamicObject IS NOT NULL
      AND a.status <> 'DELETED'
      AND f.idLanguage = fee.idLanguage
) afe ON (dob.idDynamicObject = afe.idDynamicObject) and (afe.idLanguage = lte.idLanguage)

LEFT JOIN (
    SELECT gl.idGenericLabel, gl.name, c.rgbBg as bgColor,
           c.rgbFg as fgColor, a.idAnnotation, a.idDynamicObject, gle.idLanguage
    FROM annotation a
    JOIN genericlabel gl ON (a.idEntity = gl.idEntity)
    JOIN entry gle ON (gl.idEntity = gle.idEntity)
    JOIN color c ON (gl.idColor = c.idColor)
    WHERE a.idDynamicObject IS NOT NULL
      AND a.status <> 'DELETED'
) agl ON (dob.idDynamicObject = agl.idDynamicObject) and (agl.idLanguage = lte.idLanguage)

WHERE dob.origin = 5
GROUP BY dob.idDynamicObject, dob.name, dob.startFrame, dob.endFrame,
         dob.startTime, dob.endTime, dob.status, dob.origin,
         lt.idLayerType, lt.layerOrder, lte.name, lg.name, lte.idLanguage;

-- -----------------------------------------------------
-- View `webtool42_db`.`view_construction_relation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_construction_relation`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_construction_relation` AS
select relation.idEntityRelation, relation.idRelationType, relation.relationType, relation.nameCanonical, relation.nameDirect, relation.nameInverse, relation.color,
	c1.name c1Name, c1.idConstruction c1IdConstruction, c1.idEntity c1IdEntity, c1.cxIdLanguage, c1.idLanguage,
    c2.name c2Name, c2.idConstruction c2IdConstruction, c2.idEntity c2IdEntity
from view_construction c1
join view_relation relation on (c1.idEntity = relation.idEntity1)
join view_construction c2 on (relation.idEntity2 = c2.idEntity)
where relation.relationType in (
'rel_daughter_of',
'rel_inheritance_cxn'
) and (c1.idLanguage = c2.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constructionelement_relation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constructionelement_relation`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_constructionelement_relation` AS
select relation.idEntityRelation, relation.idRelationType, relation.relationType, relation.idRelation, relation.nameCanonical, relation.nameDirect, relation.nameInverse, relation.color,
	ce1.name ce1Name, ce1.idConstructionElement ce1IdConstructionElement, ce1.idEntity ce1IdEntity, ce1.idLanguage, ce1.idColor ce1IdColor,
    ce2.name ce2Name, ce2.idConstructionElement ce2IdConstructionElement, ce2.idEntity ce2IdEntity, ce2.idColor ce2IdColor
from view_constructionelement ce1
join view_relation relation on (ce1.idEntity = relation.idEntity1)
join view_constructionelement ce2 on (relation.idEntity2 = ce2.idEntity)
where relation.relationType in (
'rel_daughter_of',
'rel_inheritance_cxn'
) and (ce1.idLanguage = ce2.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_sentence`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_sentence`;
USE `webtool42_db`;
CREATE OR REPLACE VIEW view_sentence AS
SELECT s.idSentence, s.text, s.paragraphOrder, s.idParagraph, s.idLanguage, s.idOriginMM, s.idRLSLabel 
	FROM sentence as s
    JOIN rls_label as l on (s.idRLSLabel = l.idRLSLabel)
	JOIN rls_access as u on (u.user = SUBSTRING_INDEX(session_user(),'@',1))
	WHERE l.value & u.value
WITH CHECK OPTION;

-- -----------------------------------------------------
-- View `webtool42_db`.`view_lexicon_lemma`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_lexicon_lemma`;
USE `webtool42_db`;
create or replace view view_lexicon_lemma as
select l.idLanguage, l.idLexicon, l.form as name, l.idEntity, 
l.idPOS, pos.POS, lower(concat(l.form,'.',udpos.POS)) as shortName,
lower(concat(l.form,'.',pos.POS,' [',language.language,']')) as fullName,
l.idUDPOS, udpos.POS as udPOS, lower(concat(l.form,'.',udpos.POS,' [',language.language,']')) as fullNameUD
from lexicon as l
join lexicon_group as lg on (l.idLexiconGroup = lg.idLexiconGroup)
join pos on (l.idPOS = pos.idPOS)
join udpos on (l.idUDPOS = udpos.idUDPOS)
join language on (l.idLanguage = language.idLanguage)
where (l.idLexiconGroup = 2);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_lexicon_expression`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_lexicon_expression`;
USE `webtool42_db`;
create or replace view view_lexicon_expression as
select le.idLexiconExpression, lemma.idLanguage, lemma.idLexicon as idLemma, lemma.form as lemma, lemma.idEntity,
lemma.idPOS, pos.POS, lower(concat(lemma.form,'.',pos.POS,' [',language.language,']')) as fullName,
lemma.idUDPOS, udpos.POS as udPOS, lower(concat(lemma.form,'.',udpos.POS,' [',language.language,']')) as fullNameUD,
expression.idLexicon as idForm, expression.form as form, le.head, le.breakBefore, le.position
from lexicon as lemma
join lexicon_expression le on (lemma.idLexicon = le.idLexicon)
join lexicon as expression on (le.idExpression = expression.idLexicon)
join lexicon_group as lg on (lemma.idLexiconGroup = lg.idLexiconGroup)
join pos on (lemma.idPOS = pos.idPOS)
join udpos on (lemma.idUDPOS = udpos.idUDPOS)
join language on (lemma.idLanguage = language.idLanguage)
where (lemma.idLexiconGroup = 2);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_constrainedby_morpheme`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_constrainedby_morpheme`;
USE `webtool42_db`;
create or replace view view_constrainedby_morpheme as
SELECT e.idLanguage, e.name as conName, c.idConstraint, c.idConstrained, c.idConstrainedBy, c.constrainedByType, c.idConstraintInstance, con.form as name
FROM view_constraint c
JOIN entry e on (c.idEntity = e.idEntity)
JOIN lexicon con on (c.idConstrainedBy = con.idEntity)
WHERE (con.idLexiconGroup NOT in (1,2,7));

-- -----------------------------------------------------
-- View `webtool42_db`.`view_lexicon_402`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_lexicon_402`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_lexicon_402` AS
select wf.idWordForm,wf.form,wf.md5,wf.altSpell,wf.idEntity as idEntityWF,
       lx.idLexeme,lx.name as lexeme, lx.idLanguage as idLanguageLX, lx.idEntity as idEntityLX, poslx.pos as posLX,
       le.idLexemeEntry, le.lexemeOrder, le.breakBefore, le.headWord,
       lm.idLemma, lm.name as lemma, lm.idEntity as idEntityLM, lm.idLanguage as idLanguageLM, lm.idPOS as idPOSLM, poslm.pos posLM,
       lu.idLU, lu.name as lu, lu.senseDescription, lu.incorporatedFE, lu.idFrame, lu.idEntity as idEntityLU
    from wordform wf
    join lexeme lx on (wf.idLexeme = lx.idLexeme)
    join pos poslx on (lx.idPOS = poslx.idPOS)
    left join lexemeentry le on (lx.idLexeme = le.idLexeme)
    left join lemma lm on (le.idLemma = lm.idLemma)
    left join pos poslm on (lm.idPOS = poslm.idPOS)
    left join lu on (lm.idLemma = lu.idLemma);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_lexicon_form`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_lexicon_form`;
USE `webtool42_db`;
create or replace view view_lexicon_form as
select l.idLanguage, l.idLexicon, l.form, l.idLexiconGroup, l.idEntity, 
l.idPOS, pos.POS, IF(l.idUDPOS,lower(concat(l.form,'.',udpos.POS)),l.form) as shortName,
IF(l.idPOS,lower(concat(l.form,'.',pos.POS,' [',language.language,']')),l.form) as fullName,
l.idUDPOS, udpos.POS as udPOS, IF(l.idUDPOS,lower(concat(l.form,'.',udpos.POS,' [',language.language,']')),l.form) as fullNameUD
from lexicon as l
join lexicon_group as lg on (l.idLexiconGroup = lg.idLexiconGroup)
join language on (l.idLanguage = language.idLanguage)
left join pos on (l.idPOS = pos.idPOS)
left join udpos on (l.idUDPOS = udpos.idUDPOS)
where (l.idLexiconGroup <> 2);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_lucandidate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_lucandidate`;
USE `webtool42_db`;
create or replace view view_lucandidate as
select frame.name as frameName, frame.idFrame,
    lu.idLU, lu.name, lu.senseDescription, lu.idLemma, lu.discussion,
    lu.idDocumentSentence, lu.idStaticObject, lu.idDynamicObject, lu.origin,
    lu.idUser, lu.incorporatedFE, lu.createdAt, lu.updatedAt, lu.idLexicon,
    lemma.shortName as lemmaName, lemma.idPOS, lemma.idUDPOS, lemma.idLanguage,
    user.name as userName, user.email
from lu
join view_lexicon_lemma as lemma on (lu.idLexicon = lemma.idLexicon)
left join user on (lu.idUser = user.idUser)
left join view_frame frame on (lu.idFrame = frame.idFrame)
where ((lemma.idLanguage = frame.idLanguage) or (frame.idLanguage is null))
and (lu.status = 'PENDING');

-- -----------------------------------------------------
-- View `webtool42_db`.`view_project_tasks`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_project_tasks`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_project_tasks` AS
SELECT distinct p.idProject, p.name as projectName,
	t.idTask, t.name as taskName, t.description as taskDescription,
    tg.idTaskGroup, tg.name as taskGroupName
FROM project p
JOIN task t on (p.idProject = t.idProject)
JOIN taskgroup tg on (t.idTaskGroup = tg.idTaskGroup);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_task_manager`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_task_manager`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_task_manager` AS
SELECT t.idTask, t.name taskName,
       u.idUser, u.login, u.name userName, u.email,
    tg.idTaskGroup, tg.name taskGroupName,
    p.idProject, p.name projectName
FROM task_manager tm
JOIN user u on (tm.idUser = u.idUser)
JOIN task t on (tm.idTask = t.idTask)
JOIN taskgroup tg on (t.idTaskGroup = tg.idTaskGroup)
JOIN project p on (t.idProject = p.idProject);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_lu_full`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_lu_full`;
USE `webtool42_db`;
create or replace view view_lu_full as
select frame.idLanguage as idLanguageFrame, frame.idFrame, frame.idEntity as frameIdEntity, frame.name frameName,
    lu.idLU, lu.name, lu.senseDescription, lu.active, lu. importNum, lu.incorporatedFE, lu.idEntity, lu.idLemma, lu.idLexicon, lu.status, lu.origin,
    lemma.name as lemmaName, lemma.idPOS, lemma.idUDPOS, lemma.idLanguage
from lu 
join view_frame frame on (lu.idFrame = frame.idFrame) 
join view_lexicon_lemma lemma on (lu.idLexicon = lemma.idLexicon)
where (lemma.idLanguage = frame.idLanguage);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_annotation_text_target`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_annotation_text_target`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_annotation_text_target` AS
select a.idAnnotation, ts.idTextSpan,ts.startChar,ts.endChar,ts.multi,ts.idLayer,ts.idInstantiationType,ts.idAnnotationSet, ts.idLayerType,
       gl.idGenericLabel, gl.idEntity, gl.idColor, gl.name, gl.idLanguage,
       lt.layerOrder, lt.entry as layerTypeEntry, lt.idEntity as layerTypeIdEntity, lt.name as layerTypeName
from textspan ts
join annotation a on (ts.idTextspan = a.idTextspan)
join genericlabel gl on (a.idEntity = gl.idEntity)
join view_layertype lt on (ts.idLayerType = lt.idLayerType)
where (gl.idLanguage = lt.idLanguage)
and lt.entry = 'lty_target'
and (a.status <> 'DELETED');

-- -----------------------------------------------------
-- View `webtool42_db`.`view_annotation_full`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_annotation_full`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_annotation_full` AS
select a.idAnnotation, a.idEntity, e.type entityType, 
a.idTextspan, a.idStaticObject, a.idDynamicObject,
COALESCE(dts.idDocument, di.idDocument, dv.idDocument) AS idDocument,
a.idUserTask, t.idTask, t.name, ut.idUser
from annotation a
join entity e on (a.idEntity = e.idEntity)
join usertask ut on (a.idUserTask = ut.idUserTask)
join task t on (ut.idTask = t.idTask)
left join textspan ts on (a.idTextspan = ts.idTextspan)
left join sentence s on (ts.idSentence = s.idSentence)
left join document_sentence dts on (s.idSentence = dts.idSentence)
left join staticobject sob on (a.idStaticObject = sob.idStaticObject)
left join image_staticobject isob on (sob.idStaticObject = isob.idStaticObject)
left join document_image di on (isob.idImage = di.idImage)
left join dynamicobject dob on (a.idDynamicObject = dob.idDynamicObject)
left join video_dynamicobject vdob on (dob.idDynamicObject = vdob.idDynamicObject)
left join document_video dv on (vdob.idVideo = dv.idVideo);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_annotationset_full`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_annotationset_full`;
USE `webtool42_db`;
create or replace view view_annotationset_full as
select a.idAnnotationSet, a.idAnnotationStatus, a.status, 
	lu.idEntity idEntityLU, lu.idLU, 
    cxn.idEntity idEntityCxn, cxn.idConstruction,
	ti.idEntity as idEntityTypeInstance, 
    a.idDocumentSentence, ds.idSentence, ds.idDocument,
    a.idUser, u.name, u.email
from annotationset a 
join typeinstance ti on (a.idAnnotationStatus = ti.idTypeInstance)
join document_sentence ds on (a.idDocumentSentence = ds.idDocumentSentence)
left join lu on (a.idLU = lu.idLU)
left join construction cxn on (a.idConstruction = cxn.idConstruction)
left join user u on (a.iduser = u.idUser);

-- -----------------------------------------------------
-- View `webtool42_db`.`view_annotationset_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_annotationset_status`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_annotationset_status` AS
select ti.idTypeInstance, ti.entry, ti.info, ti.idColor, ti.idEntity, ent.name, ent.description, ent.idLanguage
from typeinstance ti
join entity e on e.identity = ti.idEntity
join entry ent on e.identity = ent.idEntity
where ti.idType=7;

-- -----------------------------------------------------
-- View `webtool42_db`.`view_annotation_comment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `webtool42_db`.`view_annotation_comment`;
USE `webtool42_db`;
CREATE  OR REPLACE VIEW `view_annotation_comment` AS
select ac.idAnnotationComment, ac.comment, ac.createdAt, ac.updatedAt,ac.idUser,ac.idDocument,ac.idObject,ac.annotationType,
	u.email, u.login
from annotationcomment ac
join user u on (ac.idUser = u.idUser);

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

chapter,section,axiom_number,fol,english
5,5.1,(5.1),(forall (x) (iff (p x) (exists (e)(and (p' e x)(Rexist e))))),p is true of x if and only if there is an eventuality e that is the eventuality of p being true of x and e really exists
5,5.1,(5.2),(forall (e1 x) (if (run' e1 x) (exists (e2) (and (go' e2 x)(gen e1 e2))))),"Whenever a running event e1 occurs, there is a going event e2 that it generates"
5,5.2,(5.3),(forall (e x y z) (if (give' e x y z)(argn x 1 e))),"If e is an eventuality of x giving y to z, then x is the first argument of e"
5,5.2,(5.4),(forall (e x y z) (if (give' e x y z)(argn y 2 e))),"If e is an eventuality of x giving y to z, then y is the second argument of e"
5,5.2,(5.5),(forall (e x y z) (if (give' e x y z)(argn z 3 e))),"If e is an eventuality of x giving y to z, then z is the third argument of e"
5,5.2,(5.6),(forall (e x y z) (if (give' e x y z)(argn e 0 e))),"If e is an eventuality of giving, then e is the 0th argument of itself"
5,5.2,(5.7),(forall (e x n) (if (argn x n e)(and (nonNegInteger n)(eventuality e)))),"If x is the nth argument of e, then n is a nonnegative integer and e is an eventuality"
5,5.2,(5.8),(forall (e)(iff (eventuality e)(argn e 0 e))),Something is an eventuality if and only if it is the 0th argument of itself
5,5.2,(5.9),(forall (e x) (iff (arg x e)(exists (n)(argn x n e)))),x is an argument of e if it is the nth argument for some n
5,5.2,(5.10),(forall (x e1) (iff (arg* x e1) (or (arg x e1) (exists (e2)(and (arg e2 e1)(arg* x e2)))))),"x is an arg* of e1 if x is an argument of e1, or an argument of an argument of e1, and so on"
5,5.2,(5.11),(forall (e x y z) (if (give' e x y z)(pred give e))),"If e is a giving event by x of y to z, then the entity we call give is the pred of e"
5,5.2,(5.12),(forall (e p) (if (pred p e)(and (predicate p)(eventuality e)))),The pred of an eventuality is a predicate and eventualities are eventualities
5,5.2,(5.13),(forall (e x y z) (if (give' e x y z)(arity 3 e))),A giving event has an arity of 3
5,5.2,(5.14),(forall (n e) (if (arity n e)(and (nonNegInteger n)(eventuality e)))),The arity of an eventuality is a nonnegative integer and eventualities are eventualities
5,5.2,(5.15),(forall (e) (iff (eventuality e) (exists (p n) (and (pred p e)(arity n e) (forall (i) (if (and (posInteger i) (leq i n)) (exists (x) (argn x i e)))))))),"If e is an eventuality, then it has a predicate p, an arity n and n arguments"
5,5.3,(5.16),(forall (e1 e2) (if (gen e1 e2)(and (eventuality e1)(eventuality e2)))),The gen relation is between two eventualities
5,5.3,(5.17),(forall (e) (not (gen e e))),The gen relation is antireflexive - an eventuality does not generate itself
5,5.3,(5.18),(forall (e1 e2) (if (and (gen e1 e2)(Rexist e1)) (Rexist e2))),"If e1 generates e2 and e1 really exists, then e2 really exists"
5,5.3,(5.19),(exists (e1 e2) (and (imply e1 e2)(not (gen e1 e2)))),Generation is stronger than implication - there exist events where one implies another but doesn't generate it
5,5.3,(5.20),(forall (e1 e2 t) (if (gen e1 e2)(iff (atTime e1 t)(atTime e2 t)))),"If e1 generates e2, then e1 and e2 occur at the same time"
5,5.3,(5.21),(forall (e1 e2 x s) (if (gen e1 e2)(iff (atLoc e1 x s)(atLoc e2 x s)))),"If e1 generates e2, then e1 and e2 occur at the same location"
6,6.1,(6.1),(forall (s1 s2) (if (set s1) (iff (equal s1 s2) (and (set s2) (forall (x) (iff (member x s1)(member x s2))))))),"Sets can be equal only to other sets, and they are equal when they contain exactly the same members"
6,6.1,(6.2),(forall (x s) (if (member x s)(set s))),The second argument of the member predicate is necessarily a set
6,6.1,(6.3),(forall (x) (equal x x)),Everything is equal to itself
6,6.1,(6.4),(forall (x y) (iff (equal x y)(equal y x))),Equality is symmetric
6,6.1,(6.5),(forall (x y z) (if (and (equal x y)(equal y z))(equal x z))),Equality is transitive
6,6.1,(6.6),(forall (x y)(iff (nequal x y)(not (equal x y)))),Two entities are not equal if they are not equal
6,6.1,(6.7),(forall (s) (iff (null s) (and (set s)(forall (x)(not (member x s)))))),The null set is the set with no members
6,6.1,(6.8),(forall (s s1 x) (iff (addElt s s1 x) (and (set s)(set s1) (forall (y) (iff (member y s) (or (equal y x)(member y s1))))))),"s is constructed by adding the element x to s1 exactly when the members of s are the members of s1, together with x"
6,6.1,(6.9),(forall (s x) (iff (singleton s x) (exists (s1) (and (addElt s s1 x)(null s1))))),A singleton set consisting of an entity x is defined by adding x to the null set
6,6.1,(6.10),(forall (s x y) (iff (doubleton s x y) (exists (s1) (and (nequal x y)(addElt s s1 x) (singleton s1 y))))),A doubleton set consists of exactly two distinct elements x and y
6,6.1,(6.11),(forall (s s1 x) (iff (deleteElt s s1 x) (and (set s)(set s1) (forall (y) (iff (member y s) (and (member y s1)(nequal y x))))))),The set s is obtained from set s1 by deleting an element x
6,6.1,(6.12),(forall (s s1 x y) (iff (replaceElt s s1 x y) (exists (s2) (and (deleteElt s2 s1 x) (addElt s s2 y))))),Set s is obtained from set s1 by replacing element x with element y
6,6.1,(6.13),(forall (s s1 s2) (iff (union s s1 s2) (and (set s)(set s1)(set s2) (forall (x) (iff (member x s) (or (member x s1)(member x s2))))))),Set s is the union of sets s1 and s2 if its members are members of either s1 or s2
6,6.1,(6.14),(forall (s s1 s2 s3) (iff (union3 s s1 s2 s3) (exists (s4) (and (union s s1 s4)(union s4 s2 s3))))),Union of three sets is performed by taking two sequential unions
6,6.1,(6.15),(forall (s s1 s2) (iff (setdiff s s1 s2) (and (set s)(set s1)(set s2) (forall (x) (iff (member x s) (and (member x s1) (not (member x s2)))))))),Set s is the set difference between s1 and s2 exactly when the members of s are the members of s1 less the members of s2
6,6.1,(6.16),(forall (s s1 s2) (iff (intersection s s1 s2) (and (set s)(set s1)(set s2) (forall (x) (iff (member x s) (and (member x s1)(member x s2))))))),Set s is the intersection of s1 and s2 if its members are in both s1 and s2
6,6.1,(6.17),(forall (s1 s2) (iff (subset s1 s2) (and (set s1)(set s2) (forall (x)(if (member x s1)(member x s2)))))),s1 is a subset of s2 if all members of s1 are also members of s2
6,6.1,(6.18),(forall (s1 s2) (iff (properSubset s1 s2) (and (subset s1 s2)(nequal s1 s2)))),A proper subset is a subset which is not equal
6,6.1,(6.19),(forall (s1 s2) (if (and (set s1)(set s2)) (iff (disjoint s1 s2) (not (exists (x) (and (member x s1)(member x s2))))))),Two sets are disjoint if they have no members in common
6,6.1,(6.20),(forall (s0 s) (iff (powerSet s0 s) (forall (s1)(iff (member s1 s0)(subset s1 s))))),The power set of a set is the set of all its subsets
6,6.1,(6.21),(forall (n s) (iff (card n s) (and (nonNegInteger n)(set s) (or (and (null s)(equal n 0)) (exists (s1 x m) (and (addElt s s1 x) (not (member x s1)) (card m s1) (sum n m 1))))))),"Cardinality is defined recursively: null set has cardinality 0, and adding a new element increases cardinality by 1"
6,6.1,(6.22),(forall (s) (iff (eventualities s) (and (set s) (forall (e) (if (member e s)(eventuality e)))))),The predicate eventualities is true of sets all of whose members are eventualities
7,7.1,(7.1),(forall (x e1 y e2) (iff (subst x e1 y e2) (exists (p n) (and (pred p e1)(pred p e2)(arity n e1)(arity n e2) (noSubstTypelt x e1 y e2) (forall (i z1 z2) (if (and (posInteger i)(leq i n) (argn z1 i e1)(argn z2 i e2)) (and (iff (eventuality z1) (eventuality z2)) (if (not (eventuality z1)) (and (if (nequal z1 x) (equal z2 z1)) (if (equal z1 x) (equal z2 y)))) (if (eventuality z1) (subst x z1 y z2))))))))),"x plays the same role in e1 that y plays in e2 - both eventualities have same predicate and arity, and corresponding arguments are either both eventualities (with recursive substitution) or non-eventualities where x maps to y"
7,7.1,(7.2),(forall (x1 x2 e1 y1 y2 e2) (iff (subst2 x1 x2 e1 y1 y2 e2) (exists (e3) (and (subst x1 e1 y1 e3) (subst x2 e3 y2 e2))))),"Two substitutions can be done by doing one at a time - substitute x1 with y1 in e1 to get e3, then substitute x2 with y2 in e3 to get e2"
7,7.2,(7.3),(forall (s) (iff (set s) (exists (x) (typelt x s)))),Something is a set if and only if it has a typical element
7,7.2,(7.4),(forall (x s y e1 e2) (if (and (typelt x s)(member y s)(subst x e1 y e2) (Rexist e1)) (Rexist e2))),All properties of typical elements are inherited by the real members of the set
7,7.2,(7.5),(forall (s x e) (if (dset s x e) (and (set s)(typelt x s)(arg* x e)))),"If s is a defined set with typical element x and property e, then s is a set, x is its typical element, and x appears in e"
7,7.2,(7.6),(forall (s x e y e1) (if (and (dset s x e)(subst x e y e1)(Rexist e) (notSubsetTypelt y s)) (iff (member y s)(Rexist e1)))),An entity is a member of a defined set if and only if the property e holds for it
7,7.3,(7.7),(forall (x e1 y e2) (iff (noSubstTypelt x e1 y e2) (exists (s) (and (typelt' e1 x s)(member y s))))),Blocks substitution when e1 is a typical element relation between x and s and y is a member of s
7,7.3,(7.8),(forall (y s) (iff (notSubsetTypelt y s) (not (exists (s1)(and (typelt y s1)(subset s1 s)))))),y is not a typical element of a subset of s - blocks problematic applications of defined set membership
7,7.4,(7.9),(forall (x y e) (if (fd y x e) (and (arg* x e)(arg* y e) (exists (s) (typelt x s))))),"If y is functionally dependent on x with respect to e, then both x and y appear in e and x is a typical element of some set"
7,7.4,(7.10),(forall (x y e s x1) (if (and (fd y x e)(Rexist e)(typelt x s)(member x1 s)) (exists (y1 e1) (and (subst2 x y e x1 y1 e1)(Rexist e1))))),"When e holds and a real entity instantiates x, then there is a real entity that instantiates y and the corresponding eventuality holds"
7,7.4,(7.11),(forall (x x1 y y1 e) (iff (skfct y1 y x1 x e) (and (fd y x e) (exists (e1) (and (subst2 x y e x1 y1 e1) (if (Rexist e)(Rexist e1))))))),y1 is the value of the function defined by the functional dependency of y on x with respect to e when applied to x1
7,7.4,(7.12),(forall (s1 x y e) (iff (rangeFd s1 y x e) (forall (y1) (iff (member y1 s1) (exists (x1) (skfct y1 y x1 x e)))))),The range of the functional dependency is the set of all values of the skolem function
7,7.4,(7.13),(forall (c1 c x1 x y e e1) (if (and (skfct c1 c x1 x e) (fd c y e) (nequal x y) (subst2 c1 x1 e1 c x e)) (fd c1 y e1))),Functional dependence relations are inherited by partial instantiations
7,7.4,(7.14),(forall (x) (iff (nonspecific x) (or (exists (s) (typelt x s)) (exists (y s e) (and (typelt y s) (fd x y e)))))),An entity is nonspecific if it is a typical element of a set or functionally dependent on a typical element of a set
7,7.4,(7.15),(forall (x) (iff (specific x) (not (nonspecific x)))),An entity is specific if and only if it is not nonspecific
7,7.5,(7.16),(forall (s e) (iff (parameters s e) (forall (x) (iff (member x s) (exists (s1) (and (arg* x e)(typelt x s1))))))),The parameters of an abstract eventuality e are those typical elements of sets that are somehow involved in e
7,7.5,(7.17),(forall (e1 e) (iff (partialInstance e1 e) (forall (s x) (if (and (member x s)(parameters s e)) (exists (x1 s1) (and (subst x e x1 e1)(typelt x s1) (or (member x1 s1) (exists (s2) (and (typelt x1 s2) (subset s2 s1)))))))))),"e1 is a partial instance of e when for every parameter x in e, there is a corresponding entity x1 in e1 which is either a member of the set that x ranges over or is a typical element of a subset of that set"
7,7.5,(7.18),(forall (e1 e) (iff (instance e1 e) (and (partialInstance e1 e) (forall (s1) (if (parameters s1 e1) (null s1)))))),A complete instantiation is a partial instantiation with no remaining parameters
7,7.5,(7.19),(forall (e1 y x) (iff (holdsFor e1 y x) (exists (s e2) (and (subst y e2 x e1)(typelt x s)(member y s) (Rexist e2))))),"An eventuality type e1 holds for an entity y as its x parameter if when the entity is substituted for x in the eventuality type, the resulting instantiation really exists"
8,8.1,(8.1),(forall (e e1 e2) (if (and' e e1 e2) (and (eventuality e) (eventuality e1) (eventuality e2) (iff (Rexist e) (and (Rexist e1)(Rexist e2)))))),"If e is the conjunction of e1 and e2, then all are eventualities, and e really exists exactly when e1 and e2 both really exist"
8,8.1,(8.2),(forall (s) (if (set s) (iff (Rexist s) (forall (e) (if (member e s)(Rexist e)))))),A set really exists if and only if all its members really exist
8,8.2,(8.3),(forall (e1 e2) (if (not' e1 e2) (and (eventuality e1)(eventuality e2) (iff (Rexist e1) (not (Rexist e2)))))),"If e1 is the eventuality of e2's not obtaining, then e1 really exists exactly when e2 does not really exist"
8,8.2,(8.4),(forall (e1 e2) (if (nott' e1 e2) (exists (e3) (and (instance e2 e3)(not' e1 e3))))),"Type negation: there is an eventuality type of which e2 is an instance, and the negation is the negation of that eventuality type"
8,8.2,(8.5),(forall (e1 e2) (if (and (not' e1 e2)(Rexist e1)) (and (eventuality e1)(eventuality e2) (not (Rexist e2))))),"If a negation really exists, the thing negated doesn't"
8,8.3,(8.6),(forall (e e1 e2) (if (or' e e1 e2) (and (eventuality e) (eventuality e1) (eventuality e2) (iff (Rexist e) (or (Rexist e1)(Rexist e2)))))),"If eventuality e is the disjunction of eventualities e1 and e2, then e really exists exactly when one of e1 and e2 really exists"
8,8.3,(8.7),(forall (e s) (if (disjunction e s) (and (eventuality e)(eventualities s) (iff (Rexist e) (exists (e1) (and (member e1 s)(Rexist e1))))))),The disjunction of a set really exists exactly when one of the members of the set really exists
8,8.3,(8.8),(forall (e e1 e2) (if (imply' e e1 e2) (and (eventuality e) (eventuality e2) (or (eventuality e1) (eventualities e1))))),"If e is an implication from e1 to e2, then e and e2 are eventualities, and e1 is either an eventuality or a set of eventualities"
8,8.3,(8.9),(forall (e e1 e2) (if (imply' e e1 e2) (iff (Rexist e) (if (Rexist e1)(Rexist e2))))),The implication really exists provided the consequent really exists whenever the antecedent really exists
8,8.3,(8.10),(forall (e e1 e2) (if (and (imply' e e1 e2)(Rexist e)(Rexist e1)) (Rexist e2))),"If e is the implication from e1 to e2, and e and e1 really exist, then e2 also really exists"
8,8.3,(8.11),(forall (e1 e2 e3 i1 i2 i3) (if (and (imply' i1 e1 e2)(imply' i2 e2 e3)(imply' i3 e1 e3) (Rexist i1)(Rexist i2)) (Rexist i3))),"Implication is transitive: if e1 implies e2 and e2 implies e3, then e1 implies e3"
8,8.3,(8.12),(forall (s1 s2) (iff (inconsistent s1 s2) (and (eventualities s1) (eventualities s2) (exists (e1 e2) (and (imply s1 e1)(imply s2 e2)(not' e2 e1)))))),Two sets of eventualities are inconsistent if one implies an eventuality and the other implies its negation
8,8.3,(8.13),(forall (s1 e2) (iff (minimallyProves s1 e2) (and (not (member e2 s1)) (imply s1 e2) (not (exists (s2) (and (properSubset s2 s1) (imply s2 e2))))))),"Some set s1 of eventualities minimally proves an eventuality e2 if s1 implies e2 but no proper subset of s1 proves e2, and e2 is not itself a member of s1"
9,9.1,(9.1),(forall (p) (iff (pair0 p) (exists (x y) (pair p x y)))),Something is a pair if and only if it is an ordered pair of two elements
9,9.1,(9.2),(forall (p x y) (if (pair p x y) (and (first x p)(second y p)))),"If p is the pair <x,y>, then x is the first element of p and y is the second element of p"
9,9.1,(9.3),(forall (p1 x1 y1 p2 x2 y2) (if (or (pair p1 x1 y1)(pair p2 x2 y2)) (iff (equal p1 p2) (and (pair p1 x1 y1)(pair p2 x2 y2) (equal x1 x2)(equal y1 y2))))),Two pairs are equal exactly when their first elements are equal and their second elements are equal
9,9.1,(9.4),(forall (p x1 x2 y1 y2) (if (and (pair p x1 y1)(pair p x2 y2)) (and (equal x1 x2)(equal y1 y2)))),The first and second elements of a pair are unique
9,9.1,(9.5),(forall (f s1 s2) (iff (function0 f s1 s2) (and (set s1)(set s2)(set f) (forall (p) (if (member p f) (exists (x y) (and (member x s1)(member y s2) (pair p x y))))) (forall (x) (if (member x s1) (exists (p) (and (member p f)(first x p))))) (forall (p1 p2 x) (if (and (first x p1)(first x p2) (member p1 f)(member p2 f)) (equal p1 p2))) (forall (y) (if (member y s2) (exists (p) (and (member p f)(second y p)))))))),"A function f from set s1 onto set s2 is a set of pairs where each element of s1 occurs exactly once as first element, and every element of s2 occurs as second element of at least one pair"
9,9.1,(9.6),(forall (f s1 s2) (if (function0 f s1 s2)(domain s1 f))),"If f is a function from s1 to s2, then s1 is the domain of f"
9,9.1,(9.7),(forall (f s1 s2) (if (function0 f s1 s2)(range s2 f))),"If f is a function from s1 to s2, then s2 is the range of f"
9,9.1,(9.8),(forall (f x y) (iff (map f x y) (exists (s1 s2 p) (and (function0 f s1 s2)(member p f) (first x p)(second y p))))),"Function f maps x to y when the pair <x,y> is a member of f; f(x) = y"
9,9.1,(9.9),(forall (y1 y x1 x e s1 s2) (if (and (skfct y1 y x1 x e)(typelt x s1)(rangeFd s2 y x e)) (exists (f) (and (function0 f s1 s2) (forall (p) (iff (pair p x1 y1)(member p f))))))),"When we have a Skolem function, we have a corresponding mathematical function"
9,9.2,(9.10),(forall (s n1 n2) (iff (ints s n1 n2) (and (posInteger n1)(posInteger n2)(set s) (forall (n) (iff (member n s) (and (posInteger n)(leq n1 n)(leq n n2))))))),"s is the set of all positive integers from n1 to n2, including n1 and n2"
9,9.2,(9.11),(forall (s) (iff (sequence s) (exists (s1 s2 n) (and (function0 s s1 s2)(ints s1 1 n))))),A sequence of length n is a function whose domain is the first n positive integers
9,9.2,(9.12),(forall (n s) (if (sequence s) (iff (length n s) (exists (s1 s2) (and (function0 s s1 s2)(ints s1 1 n)))))),The length of a sequence is the upper bound of its domain interval
9,9.2,(9.13),(forall (s n y) (if (sequence s) (iff (nth y n s)(map s n y)))),The nth element in a sequence is the entity that n is mapped to by the function
9,9.2,(9.14),(forall (s y) (if (sequence s) (iff (first y s)(nth y 1 s)))),The first element of a sequence is the nth element where n is 1
9,9.2,(9.15),(forall (s1 s) (iff (rest s1 s) (and (sequence s)(sequence s1) (forall (i x) (iff (map s1 i x) (exists (j) (and (posInteger i)(successor j i) (map s j x)))))))),The rest of a sequence is the sequence that remains after the first element is removed
9,9.2,(9.16),(forall (s y n) (if (and (sequence s)(length n s)) (iff (last y s)(nth y n s)))),The last element of a sequence is the nth element where n is the length of the sequence
9,9.2,(9.17),(forall (x s) (iff (inSeq x s) (exists (n) (nth x n s)))),An entity is in a sequence if it is the nth element of the sequence for some n
9,9.2,(9.18),(forall (x y s) (iff (beforeInSeq x y s) (exists (n1 n2) (and (sequence s)(nth x n1 s)(nth y n2 s) (lt n1 n2))))),"If one element's position n is less than another's, it is before the other in the sequence"
9,9.2,(9.19),(forall (x1 x2 s) (iff (successiveElts x1 x2 s) (exists (n1 n2) (and (successor n2 n1)(nth x1 n1 s)(nth x2 n2 s))))),Two elements are successive in a sequence if their positions are consecutive integers
11,11.1,(11.1),(forall (x) (if (bird x)(fly x))),Birds fly - classical monotonic version that leads to contradictions
11,11.1,(11.2),(forall (x) (if (and (bird x)(etc1 x)) (fly x))),"If x is a bird and x has other unspecified properties encoded as etc1, then x can fly"
11,11.1,(11.3),(forall (x) (if (emu x)(bird x))),Emus are birds
11,11.1,(11.4),(forall (x) (if (emu x)(not (fly x)))),Emus don't fly
11,11.1,(11.5),(forall (x) (if (and (bird x)(not (ab1 x))) (fly x))),"If x is a bird and x is not abnormal in a way specific to ab1, then x can fly - circumscriptive logic form"
11,11.1,(11.6),(forall (x) (if (emu x)(ab1 x))),Being an emu is one way of being abnormal with respect to flying
11,11.1,(11.7),(forall (x) (if (and (bird x)(etc2 x)) (twoLegged x))),Birds defeasibly have two legs
11,11.1,(11.8),(forall (x) (if (and (bird x)(etc3 x)) (feathered x))),Birds defeasibly have feathers
11,11.1,(11.9),(forall (x) (if (bird x)(iff (etc3 x)(feathered x)))),"For birds, the etc3 conditions are equivalent to being feathered"
11,11.1,(11.10),(forall (x) (if (and (bird x)(etc1 x))(etc3 x))),"If the extra conditions that enable a bird to fly are true, then so are the extra conditions that make it feathered"
11,11.1,(11.11),(forall (x) (if (and (bird x)(fly x))(feathered x))),Birds that can fly must have feathers
11,11.1,(11.12),(forall (x y)(if (and (mother x y)(etc4 x y))(love x y))),Mothers defeasibly love their children
11,11.1,(11.13),(forall (x y) (if (and (p x y)(etc.11.14 x y)) (exists (z) (q x z)))),General pattern for defeasible axioms with fully specified etc predicate
11,11.1,(11.14),(forall (x y) (if (and (p x y)(etc)) (exists (z) (q x z)))),General pattern for defeasible axioms with abbreviated etc predicate
12,12.1,(12.1),(forall (s) (if (scale s) (and (compositeEntity s) (exists (s1 e x y s2 s3) (and (componentsOf s1 s) (partialOrdering e x y s) (subset s2 s3)(relationsOf s3 s) (forall (e1) (if (member e1 s2) (exists (x1 y1) (and (member x1 s1)(member y1 s1) (subst2 x1 y1 e1 x y e))))))))))),A scale is a composite entity with components and a partial ordering relation among them
12,12.1,(12.2),(forall (e x y s) (if (partialOrdering e x y s) (and (scale s)(arg* x e)(arg* y e)))),"If e is a partial ordering on scale s, then s is a scale and e is a relation between x and y"
12,12.1,(12.3),(forall (y s) (iff (inScale y s) (and (scale s)(componentOf y s)))),Being in a scale is an abbreviation for being a component of a scale
12,12.1,(12.4),(forall (e x1 y1 s) (iff (lts' e1 x1 y1 s) (exists (e x y e1) (and (partialOrdering e x y s) (subst2 x y e x1 y1 e1))))),lts defines a 'less than' relation relative to a particular scale s using substitution into the partial ordering
12,12.1,(12.5),(forall (x s) (not (lts x x s))),The partial ordering is antireflexive - no element is less than itself
12,12.1,(12.6),(forall (x y s) (if (lts x y s)(not (lts y x s)))),The partial ordering is antisymmetric - if x < y then not y < x
12,12.1,(12.7),(forall (x y z s) (if (and (lts x y s)(lts y z s)) (lts x z s))),The partial ordering is transitive - if x < y and y < z then x < z
12,12.1,(12.8),(forall (x y s) (iff (gts y x s)(lts x y s))),Greater than is defined as the reverse of less than
12,12.1,(12.9),(forall (x y s) (if (lts x y s) (and (or (inScale x s) (exists (x1) (and (at x x1 s)(inScale x1 s)))) (or (inScale y s) (exists (y1) (and (at y y1 s)(inScale y1 s))))))),Arguments of lts must be either points on the scale or entities at points on the scale
12,12.1,(12.10),(forall (x1 x2 y1 y2 s) (and (if (at x1 y1 s) (iff (lts x1 y2 s)(lts y1 y2 s))) (if (at x2 y2 s) (iff (lts y1 x2 s)(lts y1 y2 s))) (if (and (at x1 y1 s)(at x2 y2 s)) (iff (lts x1 x2 s)(lts y1 y2 s))))),The at relation preserves the partial ordering - entities at points inherit the ordering of those points
12,12.1,(12.11),(forall (x s) (iff (onScale x s) (or (inScale x s) (exists (y) (and (inScale y s)(at x y s)))))),onScale covers both points in a scale and entities at points in a scale
12,12.1,(12.12),(forall (x y s) (iff (leqs x y s) (or (lts x y s) (and (onScale x s)(equal x y))))),Less than or equal is either less than or equal (for entities on the scale)
12,12.1,(12.13),(forall (x y s) (iff (geqs x y s) (or (gts x y s) (and (onScale x s)(equal x y))))),Greater than or equal is either greater than or equal (for entities on the scale)
12,12.1,(12.14),(forall (x y s) (if (and (leqs x y s)(leqs y x s)) (equal x y))),"If x ≤ y and y ≤ x, then x = y (antisymmetry for ≤)"
12,12.1,(12.15),(forall (x s) (iff (top x s) (and (inScale x s) (forall (y) (if (inScale y s)(leqs y x s)))))),The top of a scale is the highest point - all other points are less than or equal to it
12,12.1,(12.16),(forall (x s) (iff (bottom x s) (and (inScale x s) (forall (y) (if (inScale y s)(leqs x y s)))))),The bottom of a scale is the lowest point - it is less than or equal to all other points
12,12.1,(12.17),(forall (s1 s) (iff (subscale s1 s) (and (scale s1)(scale s) (forall (x) (if (inScale x s1)(inScale x s))) (forall (x y) (iff (lts x y s1) (and (inScale x s1)(inScale y s1) (lts x y s))))))),A subscale has a subset of components and the partial ordering restricted to that subset
12,12.1,(12.18),(forall (s1 s) (iff (reverse s1 s) (and (scale s1)(scale s) (forall (x y) (and (iff (inScale x s)(inScale x s1)) (iff (lts x y s)(lts y x s1))))))),The reverse of a scale has the same components but reversed partial ordering
12,12.1,(12.19),(forall (s1 s2) (if (and (scale s1)(scale s2)) (iff (disjoint s1 s2) (exists (s3 s4) (and (componentsOf s3 s1)(componentsOf s4 s2) (disjoint s3 s4)))))),Two scales are disjoint if their sets of components are disjoint
12,12.1,(12.20),(forall (e x y s) (if (lts' e x y s) (iff (totalOrdering e x y s) (forall (x1 y1) (if (and (inScale x1 s)(inScale y1 s)) (or (lts x1 y1 s)(equal x1 y1) (lts y1 x1 s))))))),A total ordering is a partial ordering where any two elements are comparable
12,12.1,(12.21),(forall (s) (if (scale s)(ground s))),A scale is potentially a ground - entities can be located 'at' points on a scale
12,12.2,(12.22),(forall (f s1 s2) (iff (function f s1 s2) (exists (s3 s4) (and (if (set s1)(equal s3 s1)) (if (scale s1)(componentsOf s3 s1)) (if (set s2)(equal s4 s2)) (if (scale s2)(componentsOf s4 s2)) (function0 f s3 s4))))),Extends the notion of function to scales by using their component sets as domain/range
12,12.2,(12.23),(forall (f s1 s2) (if (and (function f s1 s2)(scale s1)(scale s2)) (iff (monotoneIncreasing f) (forall (x1 x2 y1 y2) (if (and (map f x1 y1)(map f x2 y2)(lts x1 x2 s1)) (lts y1 y2 s2)))))),A scale-to-scale function is monotone-increasing if it preserves the 'less than' ordering
12,12.2,(12.24),(forall (f s1 s3) (iff (functionInto f s1 s3) (exists (s2) (and (or (subset s2 s3)(subscale s2 s3)) (function f s1 s2))))),A function f is 'into' a set or scale s3 if there is a subset or subscale s2 for which f is onto
12,12.3,(12.25),(forall (s s1 e) (iff (scaleDefinedBy s s1 e) (and (scale s)(componentsOf s1 s) (exists (x y) (partialOrdering e x y s))))),A scale is defined by specifying the set of entities as components and the relation as partial ordering
12,12.3,(12.26),(forall (s s1 e x y) (if (and (sequence s)(componentsOf s1 s) (beforeInSeq' e x y s)) (and (scaleDefinedBy s s1 e) (forall (z)(if (first z s)(bottom z s)))))),"A sequence is a scale whose partial ordering is the beforeInSeq relation, with first element as bottom"
12,12.3,(12.27),(forall (s1 e x y) (if (and (forall (s2)(if (member s2 s1)(set s2))) (subset' e x y)) (exists (s) (and (scaleDefinedBy s s1 e) (forall (z) (if (and (member z s1)(null z)) (bottom z s))))))),"A set of sets under the subset relation is a scale, with null set as bottom if present"
12,12.3,(12.28),(forall (s e) (iff (subsetConsistent s e) (and (scale s)(eventuality e) (forall (s0)(if (argn s0 1 e)(set s0))) (forall (x)(if (argn x 2 e)(exists (y)(at x y s)))) (forall (e1 e2 s1 s2 x1 x2) (if (and (instance e1 e)(argn s1 1 e1) (argn x1 2 e1) (instance e2 e)(argn s2 1 e2) (argn x2 2 e2) (subset s1 s2)) (leqs x1 x2 s)))))),A scale whose ordering is consistent with the subset ordering among sets associated with entities placed at points in the scale
12,12.3,(12.29),(forall (s1 s2 x1 x2 s) (if (and (subset s1 s2)(r s1 x1)(r s2 x2)) (leqs x1 x2 s))),"Given some mapping r, if s1 ⊆ s2 and r maps s1 to x1 and s2 to x2, then x1 ≤ x2 on the scale"
12,12.3,(12.30),(forall (s s1 s2) (if (compositeScale s s1 s2) (and (exists (s3) (and (componentsOf s3 s1)(componentsOf s3 s2) (componentsOf s3 s))) (forall (x y) (if (and (lts x y s1)(leqs x y s2)) (lts x y s))) (forall (x y) (if (and (leqs x y s1)(lts x y s2)) (lts x y s)))))),A composite scale has the same components as two original scales and ordering consistent with both
12,12.4,(12.31),(forall (s1 s) (if (Hi s1 s)(subscale s1 s))),The Hi region of a scale is a subscale
12,12.4,(12.32),(forall (s1 s) (if (Md s1 s)(subscale s1 s))),The Md (middle) region of a scale is a subscale
12,12.4,(12.33),(forall (s1 s) (if (Lo s1 s)(subscale s1 s))),The Lo (low) region of a scale is a subscale
12,12.4,(12.34),(forall (s1 s) (if (Hi s1 s) (forall (x) (iff (top x s)(top x s1))))),The top of the scale is in the Hi region and is the top of the Hi region
12,12.4,(12.35),(forall (s1 s) (if (Lo s1 s) (forall (x) (iff (bottom x s)(bottom x s1))))),The bottom of a scale is the bottom of its Lo region
12,12.4,(12.36),(forall (s s1 s2 x y) (if (and (Hi s1 s)(Lo s2 s)(inScale x s1)(inScale y s2)) (lts y x s))),"If a point is in the Lo region, then it is less than all the points in the Hi region"
12,12.4,(12.37),(forall (s e) (iff (scaleFor s e) (exists (s1) (and (Hi s1 s) (forall (e1 x y) (if (and (at' e1 x y s1)(argn x 1 e)) (iff (Rexist e)(Rexist e1)))))))),An entity x has property e exactly when x is at a point in the Hi region of scale s - connects absolute adjectives to their underlying scales
12,12.4,(12.38),(forall (e x y s1 s) (if (and (at' e x y s1)(Hi s1 s)(etc)) (exists (c a g g1) (and (member e c)(goal g a) (or (causalComplex c g) (and (not' g1 g)(causalComplex c g1))))))),"If something is in the Hi region of a scale, then defeasibly that property plays a causal role in some agent's goal being achieved or not achieved"
13,13.1,(13.1),(nonNegInteger 0),Zero is a nonnegative integer
13,13.1,(13.2),(forall (n) (if (nonNegInteger n) (exists (n1) (and (nonNegInteger n1)(successor n1 n))))),Every nonnegative integer has a successor which is also a nonnegative integer
13,13.1,(13.3),(forall (n1 n) (if (successor n1 n) (and (nonNegInteger n1)(nonNegInteger n)))),The arguments of successor are nonnegative integers
13,13.1,(13.4),(and (successor 1 0)(successor 2 1)(successor 3 2) (successor 4 3)(successor 5 4)(successor 6 5) (successor 7 6)(successor 8 7)(successor 9 8) (successor 10 9)),Definition of integers 1 through 10 using successor relation
13,13.1,(13.5),(forall (n) (iff (posInteger n)(and (nonNegInteger n)(nequal n 0)))),A positive integer is any nonnegative integer except zero
13,13.1,(13.6),(not (exists (n) (and (nonNegInteger n)(successor 0 n)))),No nonnegative integer has zero as its successor
13,13.1,(13.7),(forall (n n1 n2) (if (and (successor n1 n)(successor n2 n)) (equal n1 n2))),Successors are unique - each number has exactly one successor
13,13.1,(13.8),(forall (n) (if (nonNegInteger n)(sum n n 0))),The sum of a number n and zero is n
13,13.1,(13.9),(forall (n n1 n2 n3 n4) (if (and (successor n3 n2)(sum n4 n1 n2)) (iff (sum n n1 n3)(successor n n4)))),Recursive definition of addition: n1 + S(n2) = S(n1 + n2)
13,13.1,(13.10),(forall (n1 n2 n3) (if (and (nonNegInteger n2)(nonNegInteger n3)(sum n1 n2 n3)) (nonNegInteger n1))),The nonnegative integers are closed under addition
13,13.1,(13.11),(forall (n n1 n2 n3 n4 n5) (if (and (sum n4 n2 n3)(sum n5 n1 n2)) (iff (sum n n1 n4)(sum n n5 n3)))),Addition is associative: n1 + (n2 + n3) = (n1 + n2) + n3
13,13.1,(13.12),(forall (n n1 n2) (iff (sum n n1 n2)(sum n n2 n1))),Addition is commutative: n1 + n2 = n2 + n1
13,13.1,(13.13),(forall (n) (if (nonNegInteger n)(product 0 n 0))),The product of a number n and zero is zero
13,13.1,(13.14),(forall (n n1 n2 n3 n4) (if (and (successor n3 n2)(product n4 n1 n2)) (iff (product n n1 n3)(sum n n4 n1)))),Recursive definition of multiplication: n1 * S(n2) = (n1 * n2) + n1
13,13.1,(13.15),(forall (n1 n2 n3) (if (and (nonNegInteger n2)(nonNegInteger n3) (product n1 n2 n3)) (nonNegInteger n1))),The nonnegative integers are closed under multiplication
13,13.1,(13.16),(forall (n) (if (nonNegInteger n)(product n n 1))),One is the identity under multiplication
13,13.1,(13.17),(forall (n n1 n2 n3 n4 n5) (if (and (product n4 n2 n3)(product n5 n1 n2)) (iff (product n n1 n4)(product n n5 n3)))),Multiplication is associative: n1 * (n2 * n3) = (n1 * n2) * n3
13,13.1,(13.18),(forall (n n1 n2) (iff (product n n1 n2)(product n n2 n1))),Multiplication is commutative: n1 * n2 = n2 * n1
13,13.1,(13.19),(forall (n n1 n2 n3 n4 n5 n6) (if (and (sum n4 n2 n3)(product n5 n1 n2)(product n6 n1 n3)) (iff (product n n1 n4)(sum n n5 n6)))),Distributive law: n1 * (n2 + n3) = n1 * n2 + n1 * n3
13,13.1,(13.20),(forall (n1 n2) (if (and (nonNegInteger n1)(nonNegInteger n2)) (iff (lt n1 n2) (exists (n3)(and (posInteger n3)(sum n2 n1 n3)))))),n1 is less than n2 if there is some positive integer n3 such that n2 = n1 + n3
13,13.1,(13.21),(forall (n1 n2)(iff (leq n1 n2)(or (lt n1 n2)(equal n1 n2)))),Less than or equal is either less than or equal
13,13.1,(13.22),(forall (n1 n2)(iff (gt n1 n2)(lt n2 n1))),Greater than is the reverse of less than
13,13.1,(13.23),(forall (n1 n2)(iff (geq n1 n2)(or (gt n1 n2)(equal n1 n2)))),Greater than or equal is either greater than or equal
13,13.1,(13.24),(forall (n) (if (nonNegInteger n)(number n))),A nonnegative integer is a number
13,13.2,(13.25),(forall (a b) (if (and (nonNegInteger a)(posInteger b)) (exists (f) (fraction f a b)))),Fractions a/b exist for nonnegative integer numerator and positive integer denominator
13,13.2,(13.26),(forall (f1 f2 a1 a2 b1 b2 c1 c2) (if (and (fraction f1 a1 b1)(fraction f2 a2 b2) (product c1 a1 b2)(product c2 a2 b1)) (iff (equal f1 f2)(equal c1 c2)))),Two fractions are equal under the usual conditions: a1/b1 = a2/b2 iff a1*b2 = a2*b1
13,13.2,(13.27),(forall (n) (if (nonNegInteger n)(fraction n n 1))),Nonnegative integers can be embedded in rational numbers: n = n/1
13,13.2,(13.28),(forall (f1 f2 a1 a2 b1 b2 c1 c2) (if (and (fraction f1 a1 b1)(fraction f2 a2 b2) (product c1 a1 b2)(product c2 a2 b1)) (iff (lt f1 f2)(lt c1 c2)))),Extension of lt relation to rational numbers: a1/b1 < a2/b2 iff a1*b2 < a2*b1
13,13.2,(13.29),(forall (f f1 f2 a1 a2 b1 b2 c1 c2) (if (and (fraction f1 a1 b1)(fraction f2 a2 b2) (product c1 a1 a2)(product c2 b1 b2)) (iff (product f f1 f2)(fraction f c1 c2)))),Product of two fractions: (a1/b1) * (a2/b2) = (a1*a2)/(b1*b2)
13,13.2,(13.30),(forall (f a b)(if (fraction f a b)(number f))),A fraction is a number
13,13.2,(13.31),(forall (f a b) (if (fraction f a b)(and (number a)(number b)(nequal b 0)))),Product requires a number and a nonzero number for numerator and denominator
13,13.3,(13.32),(forall (s1 e x y) (if (and (lt' e x y) (forall (n)(if (member n s1) (and (geq n 0)(number n)))) (member 0 s1)) (exists (s) (and (scaleDefinedBy s s1 e)(nonNegNumericScale s))))),"If e is lt relation and s1 is a set of nonnegative numbers containing 0, then there is a nonnegative numeric scale"
13,13.3,(13.33),(forall (s) (if (nonNegNumericScale s) (exists (s1 e x y) (and (lt' e x y) (forall (n)(if (member n s1) (and (geq n 0)(number n)))) (member 0 s1) (scaleDefinedBy s s1 e))))),"A nonnegative numeric scale has the lt relation for its ordering and a set of numbers, including zero, as its components"
13,13.3,(13.34),(forall (m s1) (iff (measure m s1) (exists (s2) (and (scale s1)(nonNegNumericScale s2) (functionInto m s1 s2) (monotoneIncreasing m) (forall (x)(if (bottom x s1)(map m x 0))))))),"A measure is a monotone increasing function from a scale into a nonnegative numeric scale, mapping the bottom to zero"
13,13.3,(13.35),(forall (e x y s1 s m n u) (if (and (forall (z)(if (member z s1)(set z))) (exists (w)(and (member w s1)(null w))) (subset' e x y) (scaleDefinedBy s s1 e) (card' m n u)) (measure m s))),Cardinality is a measure on the scale of sets ordered by subset relation
13,13.3,(13.36),(forall (f x y m s1) (if (and (measure m s1)(inScale x s1)(inScale y s1)) (iff (proportion f x y m) (exists (n1 n2) (and (map m x n1)(map m y n2) (fraction f n1 n2)))))),The proportion of x to y is the fraction f = m(x)/m(y) where m is a measure
13,13.3,(13.37),(forall (f x y m) (if (proportion f x y m) (exists (s1) (and (measure m s1)(inScale x s1)(inScale y s1))))),The constraints on the arguments of proportion ensure they're on a scale with the given measure
13,13.3,(13.38),(forall (f s) (iff (identityFunction f s) (and (function f s s) (forall (x)(if (member x s)(map f x x)))))),The identity function maps every element of s into itself
13,13.3,(13.39),(forall (f s) (if (and (nonNegNumericScale s)(identityFunction f s)) (measure f s))),The identity function on a nonnegative numeric scale is a measure
13,13.3,(13.40),(forall (m s1 s2 x y) (if (and (measure m s1)(function m s1 s2)(disjoint s1 s2) (map m x y)) (at x y s2))),"When scales are disjoint, if an entity is mapped to a point by a measure, it is at that point"
13,13.4,(13.41),(forall (x y s1 m) (if (and (leqs x y s1)(measure m s1)) (iff (sameHOM x y s1 m) (exists (f f2) (and (proportion f y x m)(product f2 f f) (leq f2 10)))))),Two entities are the same half-order of magnitude if the proportion squared is ≤ 10 (when x ≤ y)
13,13.4,(13.42),(forall (x y s1 m) (if (and (gts x y s1)(measure m s1)) (iff (sameHOM x y s1 m)(sameHOM y x s1 m)))),"Same half-order of magnitude is symmetric (when x > y, use the other direction)"
13,13.4,(13.43),(forall (x y s1 m) (if (sameHOM x y s1 m) (and (inScale x s1)(inScale y s1)(measure m s1)))),The constraints on the arguments of sameHOM ensure they're on a scale with the given measure
14,14.1,(14.1),(forall (e1 e2) (if (change e1 e2)(and (eventuality e1)(eventuality e2)))),The arguments of change are eventualities
14,14.1,(14.2),(forall (e1 e2) (if (change e1 e2) (exists (x)(and (arg* x e1)(arg* x e2))))),A change of state is a change of state of something - the eventualities e1 and e2 have to involve some common entity x
14,14.1,(14.3),(forall (e1 e2 e3) (if (and (change e1 e2)(change e2 e3)(etc)) (change e1 e3))),"Change is defeasibly transitive - if e1 changes into e2 and e2 changes into e3, then generally there is a change from e1 to e3"
14,14.1,(14.4),(forall (e e1 e2) (if (change' e e1 e2) (or (inconsistent e1 e2) (exists (e3 e4 e5 e6) (and (change' e4 e1 e3)(change' e5 e3 e2) (and' e6 e4 e5)(gen e6 e)))))),"If the states are not inconsistent, then the change must be a composite of two changes through an inconsistent intermediate state"
14,14.1,(14.5),(forall (e e1 e2) (if (and (change e1 e2) (etc)) (inconsistent e1 e2))),"Because change is not normally cyclic, we can defeasibly infer that start and end states are inconsistent"
14,14.2,(14.6),(forall (e x) (iff (changeIn' e x) (exists (e1 e2 e3) (and (arg* x e1)(arg* x e2)(change' e3 e1 e2)(gen e3 e))))),There is a changeIn something when there is a change in its properties
14,14.2,(14.7),(forall (e e1 e3) (if (subst e3 e3 e1 e1) (iff (changeFrom' e e1) (exists (e2 e5) (and (change' e5 e1 e2)(gen e5 e)(inconsistent e3 e2)))))),"changeFrom requires that after the change, no eventuality of the same type as the start state really exists"
14,14.2,(14.8),(forall (e e2 e4) (if (subst e4 e4 e2 e2) (iff (changeTo' e e2) (exists (e1 e5) (and (change' e5 e1 e2)(gen e5 e)(inconsistent e4 e1)))))),changeTo requires that the start state must exclude any other instance of the type which the end state instantiates
14,14.2,(14.9),(forall (e x y z) (iff (move' e x y z) (exists (e1 e2 e3 s) (and (at' e1 x y s)(at' e2 x z s)(change' e3 e1 e2) (gen e3 e))))),An entity x moves from y to z exactly when there is a change from x's being at y to its being at z
14,14.2,(14.10),(forall (s) (if (nonNegNumericScale s)(vertical s))),A nonnegative numeric scale is vertical
14,14.2,(14.11),(forall (s) (if (vertical s) (scale s))),The argument of vertical has to be a scale
14,14.2,(14.12),(forall (e x y z s) (iff (increase x s) (exists (y z e1 e2) (and (at' e1 x y s)(at' e2 x z s)(lts y z s) (vertical s)(change e1 e2))))),"If an entity moves from a point on vertical scale to a higher point, there has been an increase"
14,14.2,(14.13),(forall (e x y z s) (iff (decrease x s) (exists (y z e1 e2) (and (at' e1 x y s)(at' e2 x z s)(lts z y s) (vertical s)(change e1 e2))))),"If an entity moves from a point on a vertical scale to a lower point, there has been a decrease"
17,17.1 Events and Subevents,(17.1),(forall (e1 e2) (if (subevent e1 e2) (not (subevent e2 e1)))),"The subevent relation is antisymmetric - if e1 is a subevent of e2, then e2 is not a subevent of e1."
17,17.1 Events and Subevents,(17.2),(forall (e1 e2 e3) (if (and (subevent e1 e2)(subevent e2 e3)) (subevent e1 e3))),The subevent relation is transitive - subevents of subevents are subevents.
17,17.1 Events and Subevents,(17.3),(forall (e) (iff (event e) (or (exists (e1 e2) (and (nequal e1 e2)(change' e e1 e2))) (exists (e0 e1 e2) (and (nequal e1 e2)(change' e0 e1 e2)(gen e e0))) (exists (e1) (subevent e1 e))))),"An event is an eventuality that involves a change of state - either directly as a change, as generating a change, or as having a subevent that involves change."
17,17.1 Events and Subevents,(17.4),(forall (e) (if (event e)(eventuality e))),Every event is an eventuality.
17,17.1 Events and Subevents,(17.5),(forall (e1 e2) (if (subevent e1 e2) (and (event e1)(event e2)))),The subevent relation holds only between events.
17,17.2 Event Sequences and Conditionals,(17.6),(forall (e e1 e2) (if (and (and' e e1 e2)(event e1)) (and (subevent e1 e)(event e)))),"The aggregate or conjunction of two eventualities is an event if at least one conjunct is an event, and the event conjunct is a subevent of the aggregate."
17,17.2 Event Sequences and Conditionals,(17.7),(forall (e e1 e2) (if (and (and' e e1 e2)(event e2)) (and (subevent e2 e)(event e)))),"By commutativity of conjunction, if the second conjunct is an event, then it is a subevent of the aggregate event."
17,17.2 Event Sequences and Conditionals,(17.8),(forall (e e1 e2) (iff (eventSequence e e1 e2) (and (event e1)(event e2) (and' e e1 e2)(beforeOrMeets e1 e2)))),"Two events are in sequence if one is before or meets the other, and the aggregate of the two events is their reified conjunction."
17,17.2 Event Sequences and Conditionals,(17.9),(forall (e e1 e2) (if (eventSequence e e1 e2) (and (event e)(subevent e1 e)(subevent e2 e)))),The components of an event sequence are subevents and the event sequence is itself an event.
17,17.2 Event Sequences and Conditionals,(17.10),(forall (e e1 e2) (iff (cond e e1 e2) (and (imply' e e1 e2)(event e2) (forall (t) (if (begins t e2)(atTime e1 t)))))),"A conditional event is an implicational relation between some eventuality and an event, where the eventuality must obtain at the beginning of the event."
17,17.2 Event Sequences and Conditionals,(17.11),(forall (e e1 e2) (if (cond e e1 e2)(and (subevent e2 e)(event e)))),"In a conditional event, the consequent event is a subevent and the conditional is itself an event."
17,17.3 Iterations,(17.12),(forall (e e1) (iff (iteration e e1) (exists (e2 e3) (and (eventSequence' e e2 e3)(instance e2 e1) (or (iteration e3 e1)(instance e3 e1)))))),"An iteration is recursively defined as an event sequence where the first element instantiates an event type, and the second element is either another iteration or instance of the same type."
17,17.3 Iterations,(17.13),(forall (e e1 e2) (iff (whileDo e e1 e2) (exists (e3 e4 e5) (and (cond e e1 e3)(eventSequence' e3 e4 e5) (instance e4 e2) (or (whileDo e5 e1 e2)(instance e5 e2)))))),"A whileDo event iterates an event type as long as a condition holds, defined recursively as a conditional whose consequent is a sequence of an instance and either another whileDo or final instance."
17,17.3 Iterations,(17.14),(forall (e e1 e2) (iff (repeatUntil e e1 e2) (exists (e3 e4 e5) (and (eventSequence' e e3 e4)(instance e3 e1) (cond e4 e2 e5) (or (repeatUntil e5 e1 e2)(instance e5 e1)))))),"A repeatUntil event executes an instance of an event type first, then checks a termination condition, defined recursively with the body instance occurring before the conditional check."
17,17.3 Iterations,(17.15),(forall (e s x e1) (iff (forAllOfSeq e s x e1) (exists (y e2 l e3 s1) (or (and (length 1 s)(first y s)(subst y e2 x e1) (equal e e2)) (and (length l s)(gt l 1)(first y s) (subst y e2 x e1)(eventSequence e e2 e3) (forAllOfSeq e3 s1 x e1)(rest s1 s)))))),"A forAllOfSeq event applies an event type to each member of a sequence in turn, defined recursively as either a single instance (for length 1) or an event sequence of the first instance followed by forAllOfSeq on the rest."
17,17.3 Iterations,(17.16),(forall (e1 e) (if (subevent e1 e) (exists (s1 s2 s3) (and (compositeEntity e) (componentsOf s1 e)(propertiesOf s2 e) (relationsOf s3 e) (forall (e2)(iff (member e2 s1)(subevent e2 e))) (forall (e2) (if (member e2 s1) (exists (e3) (and (event' e3 e2)(member e3 s2))))) (forall (e2) (if (member e2 s1) (exists (e3) (and (subevent' e3 e2 e) (member e3 s3))))))))),"A complex event is a composite entity whose components are its subevents, with event properties and subevent relations among its properties and relations."
18,18.2 Spatial Systems and Distance,(18.1),(forall (s) (iff (spatialSystem s) (and (compositeEntity s) (exists (s1) (and (componentsOf s1 s) (forall (x) (if (member x s1)(physobj x))))) (exists (s2 s3) (and (relationsOf s2 s)(subset s3 s2) (forall (e) (if (member e s3) (exists (d x1 x2 u) (distance' e d x1 x2 u s))))))))),A spatial system is a composite entity whose components are physical objects and among whose relations are distance relations between components.
18,18.2 Spatial Systems and Distance,(18.2),(forall (d x1 x2 u s) (if (distance d x1 x2 u s) (and (nonNegInteger d)(spatialSystem s) (componentOf x1 s)(componentOf x2 s) (spatialUnit u)))),"Distance requires a non-negative integer, two components of a spatial system, and a spatial unit."
18,18.2 Spatial Systems and Distance,(18.3),(forall (x u s) (if (and (componentOf x s)(spatialUnit u)(spatialSystem s)) (distance 0 x x u s))),The distance between an entity and itself is zero.
18,18.2 Spatial Systems and Distance,(18.4),(forall (d x1 x2 u s) (iff (distance d x1 x2 u s)(distance d x2 x1 u s))),The distance between two entities is symmetric.
18,18.2 Spatial Systems and Distance,(18.5),(forall (d1 d2 d3 d4 x1 x2 x3 u s) (if (and (distance d1 x1 x2 u s)(distance d2 x2 x3 u s) (distance d3 x1 x3 u s)(sum d4 d1 d2)) (leq d3 d4))),The triangle inequality holds - the direct distance between two points is less than or equal to the sum of distances through an intermediate point.
18,18.2 Spatial Systems and Distance,(18.6),(forall (d1 d2 s) (iff (shorterDistance d1 d2 s) (exists (u x1 x2 x3 x4) (and (distance d1 x1 x2 u s)(distance d2 x3 x4 u s) (lt d1 d2))))),One distance is shorter than another in a spatial system if there exist pairs of objects such that the first distance is numerically less than the second.
18,18.2 Spatial Systems and Distance,(18.7),(forall (s1 s) (iff (nearnessScale s1 s) (exists (u s2 s3 e d1 d2) (and (scaleDefinedBy s2 s3 e) (forall (d) (if (member d s3) (exists (x1 x2)(distance d x1 x2 u s)))) (shorterDistance' e d1 d2 s)(reverse s1 s2))))),"A nearness scale for a spatial system is the reverse of a scale whose elements are distances and whose ordering is shorterDistance, so shorter distances are in the Hi region."
18,18.2 Spatial Systems and Distance,(18.8),(forall (x1 x2 s) (if (and (componentOf x1 s)(componentOf x2 s)) (iff (near x1 x2 s) (exists (s1 s2 d u) (and (nearnessScale s1 s)(Hi s2 s1) (distance d x1 x2 u s)(inScale d s2)))))),For x1 to be near x2 is for the distance between them to be in the Hi region of a nearness scale.
18,18.3 Location,(18.9),(forall (s) (if (spatialSystem s)(ground s))),A spatial system is a possible ground for the at relation by virtue of having physical objects as components.
18,18.3 Location,(18.10),(forall (x y s) (if (atLoc x y s) (and (spatialSystem s)(at x y s)))),The atLoc predicate is the at relation specialized to spatial systems.
18,18.3 Location,(18.11),(forall (s y1 y2 x1 x2) (if (and (componentOf y1 s)(componentOf y2 s) (atLoc x1 y1 s)(atLoc x2 y2 s)) (iff (near x1 x2 s)(near y1 y2 s)))),Two entities that are at locations in a spatial system are near if and only if their locations are near.
19,19.1 Basic Person Structure,(19.1),(forall (p) (if (person p)(agent p))),A person is a kind of agent.
19,19.1 Basic Person Structure,(19.2),(forall (p) (if (person p)(physobj p))),A person is also a kind of physical object.
19,19.1 Basic Person Structure,(19.3),(forall (p) (if (person p) (exists (b m)(and (body b p)(mind m p))))),A person has a body and a mind.
19,19.1 Basic Person Structure,(19.4),(forall (m p) (if (mind m p) (compositeEntity m))),"A mind is a composite entity, allowing us to talk about entities external to the mind."
19,19.1 Basic Person Structure,(19.5),(forall (b p) (if (body b p)(physobj b))),A body is a physical object.
19,19.1 Basic Person Structure,(19.6),(forall (b p) (if (body b p) (and (spatialSystem b) (exists (s) (and (componentsOf s b) (forall (x) (iff (member x s)(bodyPart x p)))))))),"A body is a spatial system whose components are body parts, since all body parts are physical objects."
19,19.1 Basic Person Structure,(19.7),(forall (p s) (iff (bodyPartsOf s p) (exists (b) (and (person p)(body b p)(componentsOf s b))))),"A person p has a set of body parts, namely, the components of the body."
19,19.2 Perception,(19.8),(forall (a x m) (if (and (perceive a x)(mind m a)) (and (agent a)(externalTo x m)))),Perception is a relation between an agent and an entity or eventuality external to the mind.
19,19.2 Perception,(19.9),(forall (p x e2) (if (perceive' e2 p x) (exists (e1 s) (and (near' e1 x p s)(enable e1 e2))))),Something being near a person is an enabling condition for perceiving it.
19,19.2 Perception,(19.10),(forall (p x) (if (and (person p)(bodyPartsOf s1 p)) (exists (s2) (and (subset s2 s1) (forall (o) (iff (member o s2)(senseOrgan o p))))))),The sense organs are a subset of the body parts.
19,19.2 Perception,(19.11),(forall (o p) (if (senseOrgan o p)(bodyPart o p))),It follows that sense organs are body parts.
19,19.2 Perception,(19.12),(forall (p x e2) (if (and (person p)(perceive' e2 p x)) (exists (o e1) (and (senseOrgan o p)(intact' e1 o)(enable e1 e2))))),"When something is perceived, there is a sense organ whose intact-ness enables the perception."
19,19.3 Voluntary Control,(19.13),(forall (p s1) (if (and (person p)(bodyPartsOf s1 p)) (exists (s2) (and (subset s2 s1) (forall (x) (if (member x s2) (exists (e1 e2 y z) (and (move' e2 x y z)(will' e1 p e2) (dcause e1 e2))))))))),A subset of body parts can be directly controlled by a person's will - the person's willing an event is the direct cause of the motion of the body part.
19,19.3 Voluntary Control,(19.14),(forall (p) (if (person p) (exists (e1 e2 x) (and (lift' e2 p x)(arm x p)(will' e1 p e2) (dcause e1 e2))))),Example: a person can voluntarily lift his or her arm - the lifting is directly caused by willing it.
22,22.1,(22.1),(forall(x y e1 e2) (iff(similarInThat x y e1 e2) (and(arg* x e1)(arg* y e2)(subst x e1 y e2)(Rexist e1)(Rexist e2)))),"x and y are similar in that e1 holds for x and e2 holds for y, where e1 and e2 are substitutable properties that both really exist"
22,22.1,(22.2),(forall (x y e1 e2) (iff (differentInThat x y e1 e2) (and (arg* x e1)(arg* y e2)(subst x e1 y e2)(Rexist e1) (not (Rexist e2))))),x and y are different in that e1 holds for x but the corresponding property e2 does not hold for y
22,22.1,(22.3),(forall (x1 x2) (iff (similar0 x1 x2) (exists (m p) (and (null m) (or (simPr0 x1 x2 m) (and (eventuality x1)(eventuality x2) (simStr0 x1 x2 m))))))),Two entities are similar0 if they have similar properties or if they are eventualities with similar structure
22,22.1,(22.4),(forall (e1 e2 m) (iff (simStr0 e1 e2 m) (or (equal e1 e2) (exists (p d m1) (and (pair d e1 e2)(addElt m1 m d) (pred p e1)(pred p e2) (forall (n x1 x2 d1) (if (and (argn x1 n e1)(argn x2 n e2) (pair d1 x1 x2)(not (member d1 m))) (simPr0 x1 x2 m1)))))))),Two eventualities have similar structure if they are equal or have the same predicate and similar arguments
22,22.1,(22.5),(forall (x1 x2 m) (iff (simPr0 x1 x2 m) (exists (d m1) (and (pair d x1 x2)(addElt m1 m d) (or (equal x1 x2) (exists (e3 e4 p n d1) (and (pred p e3)(pred p e4) (argn x1 n e3)(argn x2 n e4) (pair d1 e3 e4)(not (member d1 m)) (simStr0 e3 e4 m1)))))))),Two entities have similar properties if they are equal or share a property with the same predicate and corresponding arguments
22,22.1,(22.6),(forall (x1 x2 s) (iff (similar1 x1 x2 s) (exists (m p) (and (null m) (or (simPr1 x1 x2 m s) (and (eventuality x1)(eventuality x2) (simStr1 x1 x2 m s))))))),Two entities are similar1 with shared properties s if they have similar properties or similar structure as eventualities
22,22.1,(22.7),(forall (e1 e2 m s) (iff (simStr1 e1 e2 m s) (or (and (equal e1 e2)(singleton s e2)) (exists (p d) (and (pair d e1 e2)(addElt m1 m d) (pred p e1)(pred p e2) (iterArgs e1 e2 1 m1 s1) (addElt s s1 e2)))))),"Two eventualities have similar structure with shared properties s, either by equality or by having the same predicate and similar arguments"
22,22.1,(22.8),(forall (e1 e2 n m s) (iff (iterArgs e1 e2 n m s) (exists (x1 x2 d1 s1 s2 n1 n0) (and (argn x1 n e1)(argn x2 n e2) (pair d1 x1 x2)(addElt m1 m d1) (if (member d1 m)(null s1)) (or (member d1 m)(simPr1 x1 x2 m s1)) (successor n1 n)(arity n0 e2) (if (leq n1 n0)(iterArgs e1 e2 n1 m1 s2)) (if (gt n1 n0)(null s2)) (union s s1 s2))))),Iterate through corresponding arguments of two eventualities to accumulate shared properties
22,22.1,(22.9),(forall (x1 x2 m s) (iff (simPr1 x1 x2 m s) (or (and (equal x1 x2)(eventuality x2)(singleton s x2)) (and (equal x1 x2)(not (eventuality x2))(null s)) (exists (d m1 t) (and (pair d x1 x2)(addElt m1 m d)(null t) (iterProps x1 x2 t m1 s) (not (null s))))))),"Two entities have similar properties with shared property set s, handling equality cases and iterating through properties"
22,22.1,(22.10),(forall (x1 x2 t m s) (iff (iterProps x1 x2 t m s) (or (exists (e3 e4 p n t1 d1) (and (pred p e3)(pred p e4) (argn x1 n e3)(argn x2 n e4) (not (imply t e4)) (addElt t1 t e4) (pair d1 e3 e4)(addElt m1 m d1) (if (member d1 m)(singleton s1 e4)) (or (member d1 m)(simStr1 e3 e4 m s1)) (iterProps x1 x2 t1 m1 s2) (union s s1 s2))) (null s)))),Iterate through inferentially independent properties of two entities to find matches
22,22.1,(22.11),(forall (x1 x2) (iff (similar0 x1 x2) (exists (s) (and (similar1 x1 x2 s)(not (null s)))))),Two entities are similar0 if and only if they are similar1 with a non-empty set of shared properties
22,22.1,(22.12),(forall (x y z) (if (and (similar1 x z s1)(similar1 y z s2) (properSubset s2 s1)) (moreSimilar x y z))),"If x and y are both similar to z, and x's shared properties with z properly contain y's shared properties, then x is more similar to z than y is"
22,22.1,(22.13),(forall (p1 p2 e) (iff (moreSimScale p1 p2) (exists (x y z) (and (pair p1 x z)(pair p2 y z) (moreSimilar x y z))))),One pair is more similar than another if the first element of each pair is more similar to their common standard than the second
22,22.1,(22.14),(forall (s) (iff (similarityScale s) (exists (s1 e p1 p2) (and (forall (p)(if (member p s1)(pair0 p))) (moreSimScale' e p1 p2) (scaleDefinedBy s s1 e))))),A similarity scale is defined by the moreSimScale relation over pairs
22,22.1,(22.15),(forall (x z) (iff (similar x z) (exists (s s1 p) (and (similarityScale s)(Hi s1 s)(inScale p s1) (pair p x z))))),Two things are similar if their pair is in the high region of a similarity scale
22,22.1,(22.16),(forall (x z) (iff (different x z) (exists (s s1 p) (and (similarityScale s)(Lo s1 s)(inScale p s1) (pair p x z))))),Two things are different if their pair is in the low region of a similarity scale
22,22.1,(22.17),(forall (x y) (iff (similar x y)(similar y x))),"Similarity is symmetric - if x is similar to y, then y is similar to x"
22,22.2,(22.18),(forall (m x1 x2) (iff (ceMapping m x1 x2) (exists (u1 s11 s12 s13 u2 s21 s22 s23) (and (union3 u1 s11 s12 s13)(componentsOf s11 x1) (propertiesOf s12 x1)(relationsOf s13 x1) (union3 u2 s21 s22 s23)(componentsOf s21 x2) (propertiesOf s22 x2)(relationsOf s23 x2) (function m u1 u2) (forall (y1) (if (member y1 s11) (exists (y2) (and (member y2 s21)(map m y1 y2))))) (forall (y1 y2 e1 e2 n p) (if (and (member y1 s11) (or (member e1 s12)(member e1 s13)) (map m y1 y2)(map m e1 e2)) (and (iff (argn y1 n e1)(argn y2 n e2)) (iff (pred p e1)(pred p e2))))))))),"A composite entity mapping preserves components, properties, relations, and their structural relationships"
22,22.2,(22.19),(forall (x p) (iff (exhibitPattern x p) (exists (m) (and (pattern p)(patternInstance x p) (ceMapping m p x))))),A composite entity exhibits a pattern if it is an instance of the pattern with a proper mapping
22,22.2,(22.20),(forall (x1 x2) (iff (commonPattern x1 x2) (exists (p) (and (exhibitPattern x1 p)(exhibitPattern x2 p))))),Two composite entities have a common pattern if they both exhibit the same pattern
22,22.2,(22.21),(forall (m p x1 x2) (iff (cePredReplace m p x1 x2) (exists (s12 s13 u1) (and (propertiesOf s12 x1)(relationsOf x13 x1) (union u1 s12 s13) (forall (e1 e2 q1 q2) (if (and (member e1 u1)(map m e1 e2) (pred q1 e1)(map p q1 q2)) (pred q2 e2))))))),Composite entity predicate replacement maps one entity to another by changing predicates according to mapping p
22,22.2,(22.22),(forall (m p x1 x2) (iff (structureMapping m p x1 x2) (exists (x3) (and (cePredReplace m1 p x1 x3) (ceMapping m2 x3 x2) (iff (map m x y) (exists (z) (and (map m1 x z)(map m2 z y)))))))),A structure mapping combines predicate replacement with composite entity mapping
22,22.2,(22.23),(forall (x1 x2) (iff (analogous x1 x2) (exists (m p) (structureMapping m p x1 x2)))),Two things are analogous if there is a structure mapping between them
22,22.3,(22.24),(forall (a x y) (iff (compare a x y) (exists (e1 e2 e3 e4) (and (thinkOf a e1)(thinkOf a e2) (similarInThat x y e1 e2) (thinkOf a e3)(thinkOf a e4) (differentInThat x y e3 e4))))),To compare entities is to think about their shared and differing properties
22,22.3,(22.25),(forall (e0 a x1 x2) (if (and (compare' e0 a x1 x2) (etc)) (exists (e e2 e3 e4) (and (cause e0 e)(changeTo' e e2) (or (thinkThat' e2 a e3)(thinkThat' e2 a e4)) (similar' e3 x1 x2)(different' e4 x1 x2))))),Comparing entities defeasibly causes one to think they are either similar or different
22,22.3,(22.26),(forall (s) (iff (comparisonMetric s)(similarityScale s))),A similarity scale constitutes a comparison metric
22,22.3,(22.27),(forall (e0 a x1 x2) (iff (findPattern' e0 a x1 x2) (exists (e e2 e3) (and (changeTo' e e2)(thinkThat' e2 a e3) (commonPattern' e3 x1 x2)(gen e e0))))),To find a pattern in two things is to come to think that pattern holds in them
22,22.3,(22.28),(forall (e0 a x1 x2) (iff (drawAnalogy' e0 a x1 x2) (exists (e e2 e3 m) (and (changeTo' e e2)(thinkThat' e2 a e3) (structureMapping' e3 m x1 x2))))),To draw an analogy between two things is to think that a structure mapping holds between them
23,23.1,(23.1),(forall (a m) (if (and (agent a)(memory m a)) (forall (e c) (iff (store' e a c) (exists (e1 e2) (and (inFocus c a)(changeTo' e1 e2) (inm' e2 c m)(gen e1 e))))))),An agent stores a concept in memory when there is a change from a state in which the concept is in focus but not in memory to one in which it is in memory
23,23.1,(23.2),(forall (a m) (if (and (agent a)(memory m a)) (forall (e c) (iff (retrieve' e a c) (exists (e1 e2) (and (inm c m)(changeTo' e1 e2) (inFocus' e2 c a)(gen e1 e))))))),To retrieve a concept from memory is to change from a state in which the concept is in memory and not in focus to one in which it is in focus
23,23.1,(23.3),(forall (a c)(if (store a c)(agent a))),Storing is an action by agents
23,23.1,(23.4),(forall (a c)(if (retrieve a c)(agent a))),Retrieving is an action by agents
23,23.1,(23.5),(forall (e c m a) (if (and (inm' e c m)(memory m a)) (exists (e1)(and (store' e1 a c)(cause e1 e))))),The only way for a concept to get into an agent's memory is for it to be stored
23,23.2,(23.6),(forall (m a c) (if (and (memory m a)(inm c m)) (exists (x) (accessibility x c m)))),Concepts in memory have an accessibility which is an element in a partial ordering
23,23.2,(23.7),(forall (x c m) (if (accessibility x c m) (exists (a) (memory m a)))),Accessibility is a function mapping a concept and an agent's memory into an element of a partial ordering
23,23.2,(23.8),(forall (x1 x2 c m) (if (and (accessibility x1 c m)(accessibility x2 c m)) (equal x1 x2))),Accessibility is a functional relationship - one concept in one memory has exactly one accessibility value
23,23.2,(23.9),(forall (x c m a) (if (and (accessibility x c m)(memory m a)) (exists (s) (and (scale s)(inScale x s) (accessibilityScale s a))))),Accessibilities are partially ordered; they are elements in the agent's accessibility scale
23,23.2,(23.10),(forall (s a) (if (accessibilityScale s a) (and (agent a)(scale s)))),Accessibility scales belong to agents and are scales
23,23.2,(23.11),(forall (m a s) (if (and (memory m a)(accessibilityScale s a)) (exists (x0) (and (memoryThreshold x0 a)(inScale x0 s))))),"For any given agent, there is an accessibility value below which concepts are not retrieved from memory - the memory threshold"
23,23.2,(23.12),(forall (m a s) (if (and (memory m a)(accessibilityScale s a)) (forall (x0) (iff (memoryThreshold x0 a) (forall (x1 c e e1) (if (and (accessibility x1 c m)(gts' e x1 x0 s) (retrieve' e1 a c)) (enable e e1))))))),A concept's accessibility being above the memory threshold enables retrieval
23,23.2,(23.13),(forall (c a) (iff (accessible c a) (exists (m x1 s x0) (and (memory m a)(accessibility x1 c m) (accessibilityScale s a)(memoryThreshold x0 a) (lts x0 x1 s))))),"If a concept's accessibility is above the memory threshold, then it is accessible"
23,23.2,(23.14),(forall (c1 c2 i1 i2 x1 x2 s1 s2 a) (if (and (importanceScale s1 a)(accessibilityScale s2 a) (importance i1 c1 a)(importance i2 c2 a) (accessibility x1 c1 a)(accessibility x2 c2 a) (lts i1 i2 s1)(etc)) (leqs x1 x2 s2))),There is an at least defeasible monotonic relation between the importance of a concept and its accessibility
23,23.3,(23.15),(forall (e1 c1 a c2) (iff (remind' e1 c1 a c2) (exists (e2 e3) (and (inFocus' e2 c1 a)(cause e2 e3)(retrieve' e3 a c2) (gen e3 e1))))),One concept can remind an agent of another concept when the first concept being in focus causes the second to be remembered
23,23.3,(23.16),(forall (x y a) (if (associated x y a)(agent a))),The relation associated requires an agent as third argument
23,23.3,(23.17),(forall (x y a) (if (and (associated x y a)(etc))(associated y x a))),The relation associated is defeasibly symmetric in x and y
23,23.3,(23.18),(forall (a e1 e2 e3) (if (and (cause' e1 e2 e3)(believe a e1)) (associated e2 e3 a))),Causes and effects are associated if the agent believes the causal relation
23,23.3,(23.19),(forall (a e1 e2 e3) (if (and (imply' e1 e2 e3)(believe a e1)) (associated e2 e3 a))),Antecedents and consequents in implicative rules are associated if the agent believes the implication
23,23.3,(23.20),(forall (a e x e1) (if (and (believe a e1)(arg' e1 x e)) (associated e x a))),Eventualities are associated with their arguments if the agent believes the argument relation
23,23.3,(23.21),(forall (c1 c2 a e e3) (if (and (associated c1 c2 a)(changeTo' e e3) (inFocus' e3 c1 a)) (exists (e0 e1 e2 x1 x2 s) (and (change' e0 e1 e2)(accessibility' e1 x1 c2 a) (accessibility' e2 x2 c2 a)(lts x1 x2 s) (accessibilityScale s a)(cause e e0))))),A concept being in focus raises the accessibility of associated concepts
23,23.4,(23.22),(forall (c a) (iff (remember1 a c)(accessible a c))),"Remember1: the agent has the concept in memory and it is accessible, but not necessarily in focus"
23,23.4,(23.23),(forall (c a) (iff (remember2 a c)(retrieve a c))),Remember2: there has actually been a retrieval from memory
23,23.4,(23.24),(forall (c a) (iff (remember3 a c) (exists (e) (and (cause a e)(retrieve' e a c))))),Remember3: the agent plays a causal role in the remembering
23,23.4,(23.25),(forall (c a) (iff (remember4 a c) (exists (e) (and (succeed a e)(retrieve' e a c))))),"Remember4: there is a distinct attempt to retrieve something from memory, and it succeeds"
23,23.4,(23.26),(forall (c a) (if (remember2 a c)(remember1 a c))),Each sense of remembering implies the previous
23,23.4,(23.27),(forall (c a) (if (remember3 a c)(remember2 a c))),Each sense of remembering implies the previous
23,23.4,(23.28),(forall (c a) (if (remember4 a c)(remember3 a c))),Each sense of remembering implies the previous
23,23.4,(23.29),(forall (c a) (if (remember1 a c)(remember a c))),All types of remembering are senses of remember
23,23.4,(23.30),(forall (a m c) (if (and (person a)(memory m a)(inm c m)(etc)) (exists (e s) (able a e s)(remember' e a c)))),"Because people can cause concepts to be in focus and this may cause them to remember other concepts, people have an ability to remember things"
23,23.4,(23.31),(forall (e a c) (iff (forget1' e a c) (exists (e1 e2) (and (changeFrom' e1 e2)(accessible' e2 c a) (gen e1 e))))),To forget1 a concept is for the accessibility to change from being above the memory threshold to being below it
23,23.4,(23.32),(forall (a c) (if (forget1 a c)(not (remember1 a c)))),"If an agent forgets something in the forget1 sense, they do not remember it under any notion of remembering"
23,23.4,(23.33),(forall (e a c) (iff (forget2' e a c) (exists (e1 e2) (and (retrieve' e1 a c)(goodFor e1 a)(not' e2 e1) (gen e2 e))))),To forget2 is to not retrieve when such a retrieval would have been good for you in some way
23,23.4,(23.34),(forall (e a c) (iff (forget3' e a c) (exists (e1 e2 e3) (and (cause' e1 a e2)(changeFrom' e2 e3) (inFocus' e3 c a)(gen e1 e))))),To forget3 is when the agent intentionally ceases to have the concept in focus
23,23.5,(23.35),(forall (a e t e1) (if (and (agentOf a e)(atTime e t)(inFocus' e1 e a)) (exists (e2) (and (atTime' e2 e1 t)(enable e2 e))))),"If an agent is to do an event at time t, then that event being in the agent's focus of attention at time t enables the event"
23,23.5,(23.36),(forall (a e) (iff (rememberTo a e) (exists (e1 t e2 e3 e4) (and (atTime' e1 e t)(goal e1 a)(agentOf a e) (retrieve' e2 a e1)(cause e2 e3)(atTime' e3 e4 t) (inFocus' e4 e1 a))))),An agent remembers to do something if that action was part of their plan and retrieving it causes them to have that goal in focus at the designated time
23,23.6,(23.37),(forall (c a) (if (repressed c a) (exists (m) (and (memory m a)(inm c m)(not (accessible c a)))))),"If a concept c is repressed for an agent a, then c is in a's memory but it is not accessible"
23,23.6,(23.38),(forall (a x) (if (and (repressed' e x a)(etc)) (exists (e0 e1 e2) (and (thinkOf' e1 a x)(unhappy' e2 a)(cause' e0 e1 e2) (cause e0 e))))),"If something is repressed, then it is probably because thinking about it causes one to be unhappy"
24,24.1,(24.1),(forall (a c) (iff (thinkOf a c) (exists (f) (and (focusOfAttention f a)(inm c f))))),"To think of some concept, entity, or eventuality is to have it in the focus of attention"
24,24.1,(24.2),(forall (a e e1) (if (and (eventuality e)(perceive' e1 a e)(etc)) (exists (e2) (and (thinkThat' e2 a e)(cause e1 e2))))),"If we perceive an eventuality, then defeasibly this causes us to think that it holds - we are conscious of it and we believe it"
24,24.1,(24.3),(forall (a x e1) (if (and (perceive' e1 a x)(etc)) (exists (e e2) (and (Rexist' e x)(thinkThat' e2 a e)(cause e1 e2))))),"If we perceive anything, eventuality or not, then defeasibly this causes us to think that it really exists"
24,24.1,(24.4),(forall (x y a e1) (if (and (associated x y a)(thinkOf' e1 a x)(etc)) (exists (e2) (and (thinkOf' e2 a y)(cause e1 e2))))),"If two entities are associated for an agent, then thinking of one will defeasibly cause the agent to think of the other"
24,24.1,(24.5),(forall (a e e1) (iff (predict' e1 a e) (exists (t1 e2 t2 e3) (and (atTime e1 t1)(atTime' e2 e t2) (not (before t2 t1)) (thinkThat' e3 a e2)(gen e3 e1))))),To predict an eventuality is to believe it will occur at some time that is not before the time of the prediction
24,24.1,(24.6),(forall (x y a e e1 e2 e3) (if (and (cause' e e1 e2)(thinkThat a e)(thinkThat' e3 a e1) (etc)) (exists (e4) (and (predict' e4 a e2)(cause e3 e4))))),"If an agent believes in a causal relation and thinks that the cause holds, then defeasibly the agent will predict the effect"
24,24.1,(24.7),(forall (a e e1 t1) (if (and (predict' e1 a e)(atTime e1 t1)) (iff (validated e1) (exists (t2) (and (atTime e t2)(not (before t2 t1))))))),"If a predicted eventuality actually happens at some future time, then the prediction is validated"
24,24.1,(24.8),(forall (a e e1 t1) (if (and (predict' e1 a e)(atTime e1 t1)) (iff (invalidated e1) (forall (t2) (if (not (before t2 t1))(not (atTime e t2))))))),"If it does not happen at some future time, the prediction is invalidated"
24,24.1,(24.9),(forall (a e e1) (iff (explain a e e1) (exists (e2) (and (thinkThat a e2)(cause' e2 e1 e))))),To explain an eventuality is to think that some specific eventuality caused it
24,24.1,(24.10),(forall (a e e1 e2 e3 e4 e5) (if (and (believe a e3)(cause' e3 e1 e) (believe a e4)(cause' e4 e2 e)(thinkOf' e5 a e)(etc)) (exists (e6 e7) (and (thinkOf' e6 a e7)(or' e7 e1 e2)(cause e5 e6))))),"If agent a believes e1 can cause e and e2 can cause e, and a thinks of e, then that will defeasibly cause a to think of the disjunction of e1 and e2"
24,24.1,(24.11),(forall (a e e1 e2 e3 e4 e5) (if (and (believe a e3)(causallyInvolved' e3 e e1) (believe a e4)(causallyInvolved' e4 e e2) (thinkOf' e5 a e)(etc)) (exists (e6 e7) (and (thinkOf' e6 a e7)(or' e7 e1 e2)(cause e5 e6))))),"If the agent believes that an eventuality e could be a partial cause for eventuality e1 or could be a partial cause of eventuality e2, this defeasibly will cause the agent to think of the disjunction of e1 and e2"
24,24.2,(24.12),(forall (e e1 e2 s) (iff (branch e e1 e2 s) (and (member e s)(member e1 s)(member e2 s) (or (or' e e1 e2)(or' e e2 e1))))),"e is a branch to e1 and e2 in s exactly when e, e1 and e2 are all members of s and e is a disjunction of e1 and e2"
24,24.2,(24.13),(forall (e e1 e2 s) (iff (branch e e1 e2 s)(branch e e2 e1 s))),Branch is symmetric in its middle two arguments
24,24.2,(24.14),(forall (e e1 e2) (iff (or' e e1 e2) (exists (e3 e4) (and (disjunct' e3 e1 e)(disjunct' e4 e2 e))))),"e3 is the relation of e1's being a disjunct in the disjunction e, and similarly for e4 and e2"
24,24.2,(24.15),(forall (r e1 e2 s) (if (eventualities s) (iff (csArc r e1 e2 s) (or (and (causallyInvolved' r e1 e2) (member e1 s)(member e2 s)) (exists (e3) (and (member e1 s)(member e2 s)(member e3 s) (branch e1 e2 e3 s) (disjunct' r e2 e1))))))),"A causal system arc is either a causally involved relation or a relation between a disjunction and one of its disjuncts, that is, in a branch"
24,24.2,(24.16),(forall (c) (iff (causalSystem c) (exists (v s) (and (componentsOf v c)(relationsOf s c) (eventualities v) (forall (r) (if (member r s) (exists (e1 e2) (csArc r e1 e2 v)))))))),"c is a causal system if and only if c is a composite entity whose components are eventualities, and whose relations are causal links among these eventualities"
24,24.2,(24.17),(forall (c v) (if (causalSystem c) (iff (eventualitiesOf v c) (componentsOf v c)))),We will call the components of a causal system its eventualities
24,24.2,(24.18),(forall (r e1 e2 c) (if (causalSystem c) (iff (csArc r e1 e2 c) (exists (v) (and (eventualitiesOf v c)(csArc r e1 e2 v)))))),It will be convenient to allow csArc to take causal systems as its fourth argument as well as sets of eventualities
24,24.2,(24.19),(forall (e1 e2 c) (iff (causallyLinked e1 e2 c) (exists (r v s) (and (eventualitiesOf v c)(relationsOf s c) (member r s) (or (csArc r e1 e2 c)(csArc r e2 e1 c) (exists (e3 c0 s0) (and (or (csArc' r e1 e3 c) (csArc' r e3 e1 c)) (deleteElt s0 s r) (causalSystem c0) (eventualitiesOf v c0) (relationsOf s0 c0) (causallyLinked e3 e2 c0)))))))),"Two eventualities e1 and e2 are causally linked in a causal system c if there is a chain of csArc relations in c between e1 and e2, regardless of direction"
24,24.2,(24.20),(forall (c1 e c) (iff (connSubCS c1 e c) (exists (v1 v) (and (eventualitiesOf v c)(eventualitiesOf v1 c1) (member e v)(member e v1) (forall (e1) (iff (member e1 v1) (and (member e1 v) (or (equal e1 e) (causallyLinked e e1 c))))))))),A connected subsystem c1 of a causal system c containing eventuality e
24,24.2,(24.21),(forall (c) (iff (connectedCausalSystem c) (exists (v s) (and (causalSystem c)(eventualitiesOf v c) (relationsOf s c) (forall (e1 e2) (if (and (member e1 v)(member e2 v)) (causallyLinked e1 e2 c))))))),A connected causal system is a causal system in which all eventualities are causally linked by relations in the causal system
24,24.2,(24.22),(forall (c) (iff (branchlessCausalSystem c) (exists (s1 s2) (and (causalSystem c)(eventualitiesOf v c) (relationsOf s c) (forall (r) (if (member r s) (exists (e1 e2) (and (member e1 v)(member e2 v) (causallyInvolved' r e1 e2))))))))),"A branchless causal system is a causal system all of whose arcs are causallyInvolved relations, rather than disjunctions"
24,24.2,(24.23),(forall (e c) (iff (isolated e c) (exists (v) (and (eventualitiesOf v c)(member e v) (not (exists (r e1) (or (csArc r e1 e c)(csArc r e e1 c)))))))),A node e is isolated with respect to a causal system c if there are no arcs into it and no arcs out of it
24,24.2,(24.24),(forall (e c) (iff (eventualityIn e c) (exists (v) (and (eventualitiesOf v c)(member e v))))),We will say that the members of the eventualities of a causal system are the eventualities in it
24,24.3,(24.25),(forall (c e1 r e2 c0) (iff (oneArcDiff c e1 r e2 c0) (exists (v0 s0 v s d) (and (causalSystem c0)(causalSystem c) (eventualitiesOf v0 s0)(relationsOf s0 c0) (eventualitiesOf v c)(relationsOf s c) (union v v0 d)(doubleton d e1 e2) (causallyInvolved' r e1 e2)(not (member r s0)) (addElt s s0 r))))),"The two causal systems c and c0 differ by only one arc, the arc r from e1 to e2. Causal system c will be the larger one, the one that is obtained by adding arc r to c0"
24,24.3,(24.26),(forall (c2 c0 d) (iff (delCSRel c2 c0 d) (exists (v0 s0 s2) (and (eventualitiesOf v0 c0)(relationsOf s0 c0) (eventualitiesOf v0 c2)(relationsOf s2 c2) (deleteElt s2 s0 d))))),Causal system c2 results from deleting the relation d from causal system c0
24,24.3,(24.27),(forall (c e0 e1 e2 c0) (iff (resolveBranch c e0 e1 e2 c0) (exists (d c2 c1 v0 v v1) (and (causalSystem c0)(causalSystem c) (eventualitiesOf v0 c0)(eventualitiesOf v c) (branch e0 e1 e2 v0)(disjunct' d e2 e0) (delCSRel c2 c0 d)(connSubCS c1 e2 c2) (or (and (causallyLinked e1 e2 c2)(null v1)) (and (not (causallyLinked e1 e2 c2)) (eventualitiesOf v1 c1))),Causal system c results from taking the branch from e0 to e1 and e2 in causal system c0 and resolving it to e1 (part 1 - complex definition continues)
24,24.3,(24.28),(forall (c1 c2) (iff (contigCS c1 c2) (or (exists (e1 r e2) (or (oneArcDiff c1 e1 r e2 c2) (oneArcDiff c2 e1 r e2 c1))) (exists (e0 e1 e2) (or (resolveBranch c1 e0 e1 e2 c2) (resolveBranch c2 e0 e1 e2 c1)))))),Two causal systems are contiguous if they stand in oneArcDiff or resolveBranch relations
24,24.4,(24.29),(forall (c1 c2) (iff (contigCS c1 c2)(contigCS c2 c1))),The contigCS relation is obviously symmetric
24,24.4,(24.30),(forall (c a) (iff (ecs c a) (exists (v s) (and (causalSystem c)(eventualitiesOf v c) (relationsOf s c) (forall (e) (if (member e v)(thinkOf a e))) (forall (r) (if (member r s) (or (thinkOf a r)(believe a r)))))))),"The agent a is thinking of every eventuality in the causal system, and the arcs in the causal system are either believed or in focus"
24,24.4,(24.31),(forall (b a c) (if (ecs c a) (iff (backgroundBeliefs b a) (exists (v s) (and (eventualitiesOf v c)(relationsOf s c) (forall (e1 e2) (if (and (member e1 b)(not' e2 e1)) (not (member e2 v)))) (forall (r e1 e2 e3) (if (and (causallyInvolved' r e1 e2) (not' e3 r)(member e3 b)) (not (member r s))))))))),b is the set of agent a's background beliefs - negations of background beliefs are never in the causal system
24,24.4,(24.32),(forall (s a) (iff (ecsSeq s a) (and (sequence s) (forall (c1) (if (inSeq c1 s)(ecs c1 a))) (forall (n n1 l c1 c2) (if (and (gt n 0)(length l s)(lt n l) (successor n1 n) (nth c1 n s)(nth c2 n1 s)) (contigCS c1 c2))) (exists (s0) (and (sequence s0) (forall (e1 n) (iff (nth e1 n s0) (exists (c1) (and (nth c1 n s) (ecs' e1 c1 a))))) (forall (n n1 l e1 e2) (if (and (gt n 0)(length l s0)(lt n l) (successor n1 n) (nth e1 n s0)(nth e2 n1 s0)) (change e1 e2)))))))),An envisioned causal system sequence is a sequence of envisioned causal systems in which successive causal systems are contiguous and linked by change-of-state relations
24,24.4,(24.33),(forall (e s a) (iff (envisionedEv e s a) (exists (c) (and (ecsSeq s a)(inSeq c s)(eventualityIn e c))))),An eventuality in any element of an envisioned causal system sequence is an envisioned eventuality
24,24.4,(24.34),(forall (a e1 e2) (iff (envisionFromTo a e1 e2) (exists (s) (and (ecsSeq s a)(first e1 s)(last e2 s))))),Envisioning a sequence from one causal system to another
24,24.4,(24.35),(forall (a e1) (iff (envisionFrom a e1) (exists (e2) (envisionFromTo a e1 e2)))),Less specific version - envisioning from a causal system
24,24.4,(24.36),(forall (a e2) (iff (envisionTo a e2) (exists (e1) (envisionFromTo a e1 e2)))),Less specific version - envisioning to a causal system
24,24.4,(24.37),(forall (a) (if (person a) (exists (s e1 c) (and (ecsSeq' e1 s a)(able a e1 c))))),People have an ability to envision causal system sequences
24,24.4,(24.38),(forall (s a) (if (and (ecsSeq s a) (forall (c v) (if (and (inSeq c s)(eventualitiesOf v c)) (exists (e) (and (member e v)(arg* x e)))))) (thinkAbout a x))),"If every element of an ecsSeq includes a property of x among its eventualities, then the agent is thinking about x"
24,24.5,(24.39),(forall (a c v s) (if (and (causalSystem c) (eventualitiesOf v c)(relationsOf s c)) (iff (believe a c) (and (believe a v)(believe a s))))),To believe a causal system is to believe the conjunction of the set of eventualities and the set of causallyInvolved relations that characterize the causal system
24,24.5,(24.40),(forall (a) (if (person a) (exists (s t) (and (ecsSeq s a)(during s t))))),Some envisionments are about events and states that happen in the real world at a particular time
24,24.5,(24.41),(forall (a) (if (person a) (exists (s) (and (ecsSeq s a) (forall (t) (not (during s t))))))),"Some envisionments are about fictional worlds, as in fiction and dreams, and have never happened and never will"
24,24.5,(24.42),(forall (a e d1 d2) (iff (changeGBel a e d1 d2) (exists (e1 e2) (and (gbel' e1 a e d1)(gbel' e2 a e d2) (nequal d1 d2)(change e1 e2))))),Agent a's belief in e changes from d1 to d2
24,24.5,(24.43),(forall (a e d1 d2 c v) (if (and (ecs c a)(eventualitiesOf v c)(member e v) (changeGBel a e d1 d2)(gt d1 d2)(etc)) (exists (d3 d4) (and (changeGBel a c d3 d4)(gt d3 d4))))),"Defeasibly, decreasing the belief in an element of a causal system causes a decrease in the belief in the causal system as a whole"
24,24.5,(24.44),(forall (a e d1 d2 c v) (if (and (ecs c a)(eventualitiesOf v c)(member e v) (changeGBel a e d1 d2)(lt d1 d2)(etc)) (exists (d3 d4) (and (changeGBel a c d3 d4)(lt d3 d4))))),"Defeasibly, increasing the belief in an element of a causal system causes an increase in the belief in the causal system as a whole"
24,24.5,(24.45),(forall (a r d1 d2 c s) (if (and (ecs c a)(relationsOf s c)(member r s) (changeGBel a r d1 d2)(gt d1 d2)(etc)) (exists (d3 d4) (and (changeGBel a c d3 d4)(gt d3 d4))))),"Defeasibly, decreasing the belief in a relation of a causal system causes a decrease in the belief in the causal system as a whole"
24,24.5,(24.46),(forall (a e d1 d2 c s) (if (and (ecs c a)(relationsOf s c)(member r s) (changeGBel a e d1 d2)(lt d1 d2)(etc)) (exists (d3 d4) (and (changeGBel a c d3 d4)(lt d3 d4))))),"Defeasibly, increasing the belief in a relation of a causal system causes an increase in the belief in the causal system as a whole"
24,24.5,(24.47),(forall (a c c0 e1 e2 r e3 e4 v0) (if (and (ecs' e3 c0 a)(ecs' e4 c a) (oneArcDiff c e1 r e2 c0) (eventualitiesOf v0 c0)(not (member e1 v0)) (believe a e1)(change' e0 e3 e4)(etc)) (exists (e) (and (changeGBel' e a c0 d1 d2)(gt d2 d1) (cause e0 e))))),"If there is a change from entertaining causal system c0 to entertaining causal system c, where c includes a new possible cause that is already believed, this defeasibly causes an increase in belief in c0"
24,24.5,(24.48),(forall (a c c0 e1 e2 r e3 e4 v0) (if (and (ecs' e3 c0 a)(ecs' e4 c a) (oneArcDiff c e1 r e2 c0)(member e1 v0) (eventualitiesOf v0 c0)(not (member e2 v0)) (believe a e2)(change' e0 e3 e4)(etc)) (exists (e) (and (changeGBel' e a c0 d1 d2)(gt d2 d1) (cause e0 e))))),There is a change in which the agent thinks of a new possible effect and already believes that to be true. This causes the agent's belief in the original causal system to increase
24,24.5,(24.49),(forall (a c c0 e1 e2 r e3 e4 v0) (if (and (ecs' e3 c0 a)(ecs' e4 c a) (oneArcDiff c e1 r e2 c0)(eventualitiesOf v0 c0) (member e1 v0)(not (member e2 v0)) (not' e5 e2)(believe a e5) (change' e0 e3 e4)(etc)) (exists (e) (and (changeGBel' e a c0 d1 d2)(lt d2 d1) (cause e0 e))))),"Predictions can also be falsified, and this decreases the degree of belief in the original causal system"
24,24.5,(24.50),(forall (c c0 c1 c2 v1 e0 e1 e2 e3 e4 e5 e6 e7 d) (if (and (ecs' e3 c0 a)(ecs' e4 c a) (resolveBranch c e0 e1 e2 c0) (disjunct' d e2 e0)(delCSRel c2 c0 d) (connSubCS c1 e2 c2)(eventualitiesOf v1 c1) (member e5 v1)(not' e6 e5)(believe a e6) (change' e7 e3 e4)(etc)) (exists (e) (and (changeGBel' e a c d1 d2)(gt d2 d1) (cause e7 e))))),"Suppose a causal system has a branch in it, and a false proposition is found in the connected subsystem of one of the disjuncts. Then defeasibly there is an increased graded belief in the causal system with that branch resolved to the other disjunct"
24,24.5,(24.51),(forall (a c t) (iff (cwu0 c a t) (exists (e1 v) (and (ecs' e1 c a)(atTime e1 t) (eventualitiesOf v c) (forall (e2) (if (and (eventuality e2) (perceive' e3 a e2)(atTime e3 t)) (member e2 v))))))),"If the causal system includes all the eventualities that the agent perceives and the causal system is believed, then the envisioned causal system is the agent's current world understanding at time t"
24,24.5,(24.52),(forall (c a) (iff (cwu c a)(exists (t) (and (cwu0 c a t)(Now t))))),"A two-argument version of the predicate, by stipulating that t is Now. This has the effect of anchoring the current world understanding to the same time as the rest of the axiom"
25,25.1,(25.1),(forall (a c) (if (and (agent a)(cwu c a)) (exists (e0 e e1) (and (able a e0 c)(explain' e0 a e e1))))),"For any agent with current world understanding c, there exist some eventualities that the agent is able to explain"
25,25.1,(25.2),(forall (a) (if (and (person a)(etc)) (exists (e e1)(explain a e e1)))),"Defeasibly, for any person, there are eventualities that they really do explain"
25,25.1,(25.3),(forall (e a c) (iff (and (mystery e a)(cwu c a)) (and (agent a)(eventuality e) (not (exists (e1 e0) (and (able a e0 c) (explain' e0 a e e1))))))),An eventuality is a mystery for an agent if the agent is not able to explain it within their current world understanding
25,25.1,(25.4),(forall (a) (if (person a) (exists (e) (mystery e a)))),"For any person, there are eventualities that are mysteries to them"
25,25.1,(25.5),(forall (a) (if (and (agent a) (etc)) (exists (e0 e e1) (and (goal e0 a)(explain' e0 a e e1))))),"Defeasibly, agents have goals to explain certain eventualities"
25,25.1,(25.6),(forall (a c) (if (and (agent a)(cwu c a)) (exists (e e1 e2 e3 e4) (and (explain' e3 a e e1)(explain' e4 a e e2) (nequal e1 e2)(possible e3 c)(possible e4 c))))),"For any agent, there exist eventualities that have multiple different possible explanations"
25,25.1,(25.7),(forall (a e e1 e2 d1 d2) (if (and (agent a)(explain a e e1)(explain a e e2) (gbel a e1 d1)(gbel a e2 d2)(gt d1 d2)) (betterExplanationFor e1 e2 e a))),One explanation is better than another for an agent if the agent has higher graded belief in it
25,25.1,(25.8),(forall (a) (if (and (agent a)(etc)) (exists (d) (and (knowledgeDomain d) (forall (e e1 e2) (if (and (member e1 d)(not (member e2 d)) (explain a e e1)(explain a e e2)) (betterExplanationFor e1 e2 e a))))))),"Defeasibly, agents have preferred knowledge domains such that explanations in those domains are better than explanations outside them"
25,25.1,(25.9),(forall (a e e1 s) (if (and (explain a e e1)(member e1 s) (forall (e2) (if (and (member e2 s)(explain a e e2) (nequal e1 e2)) (betterExplanationFor e1 e2 e a)))) (bestExplanationFor e1 e a s))),An explanation is the best in a set if it is better than all other explanations in that set
25,25.1,(25.10),(forall (a e e1 e3 e4 s) (if (and (bestExplanationFor' e3 e1 e a s)(believe a e) (forall (e2) (iff (member e2 s)(explain a e e2))) (cause' e4 e1 e)(believe' e5 a e4)(etc)) (cause e3 e5))),"Defeasibly, if an explanation is the best among all possible explanations, this causes the agent to believe that explanation causes the explained eventuality"
25,25.2,(25.11),(forall (a e e1) (if (and (explain a e e1)(etc)) (exists (e2 e3 e4 e5) (and (adoptGoalToExplain' e2 a e) (generateExplanations' e3 a e s) (assessExplanations' e4 a s e) (adoptExplanation' e5 a e1 e) (before e2 e3)(before e3 e4)(before e4 e5))))),"Defeasibly, the explanation process involves adopting a goal, generating candidates, assessing them, and adopting the best explanation, in that temporal order"
25,25.2,(25.12),(forall (a e) (iff (adoptGoalToExplain a e) (exists (e1 e2 e3) (and (changeTo e2)(goal' e2 e3 a) (explain' e3 a e e1))))),To adopt a goal to explain e is to change into a state where one has the goal of explaining e
25,25.2,(25.13),(forall (a e) (if (and (agent a)(learn a e)(not (predict a e))(etc)) (adoptGoalToExplain a e))),A common reason for adopting a goal to explain something is that it had not been predicted
25,25.2,(25.14),(forall (a e s) (iff (generateExplanations a e s) (and (thinkOf a s) (forall (e1) (if (member e1 s) (and (explain a e e1)(possible e1 c) (cwu c a))))))),"To generate candidate explanations is to think of a set of eventualities that possibly cause the effect, given one's current world understanding"
25,25.2,(25.15),(forall (e0 a s e) (iff (assessExplanations' e0 a s e) (forall (e2) (if (member e2 e0) (exists (e3 e4 e5 e6) (and (changeTo' e2 e3)(believe' e3 a e4) (betterExplanationFor' e4 e5 e6 e a))))))),To assess candidate explanations is to determine among various pairs which ones are better through belief formation about comparative quality
25,25.2,(25.16),(forall (a e1 e) (iff (adoptExplanation a e1 e) (exists (e2 e3) (and (changeTo e2)(believe' e2 a e3) (cause' e3 e1 e))))),To adopt e1 as an explanation for e is to come to believe that e1 is the cause of e
25,25.2,(25.17),(forall (a e1 e) (iff (rejectExplanation a e1 e) (exists (e2 e3 e4) (and (changeTo e2)(believe' e2 a e3)(not' e3 e4) (cause' e4 e1 e))))),To reject an explanation e1 for e is to change into a state where one believes that e1 does not cause e
25,25.2,(25.18),(forall (a e s e1 e2 e3) (if (and (agent a)(generateExplanations a e s) (adoptExplanation' e3 a e1 e)(member e1 s) (member e2 s)(nequal e2 e1)(etc)) (exists (e4) (and (rejectExplanation' e4 a e2 e)(cause e3 e4))))),"Defeasibly, adopting one explanation causes an agent to reject other explanations from the same generated set"
25,25.3,(25.19),(forall (a e) (iff (explanationFailure a e) (forall (e1 e2) (if (and (try a e2)(explain' e2 a e e1)) (fail a e2))))),An explanation failure occurs exactly when every explanation attempt fails
25,25.3,(25.20),(forall (a e s) (if (and (adoptGoalToExplain a e) (generateExplanations a e s)(null s)) (explanationFailure a e))),"If the agent adopts the goal to explain but generates no candidate explanations, there is an explanation failure"
25,25.3,(25.21),(forall (a e s) (if (and (adoptGoalToExplain a e) (generateExplanations a e s) (not (assessExplanations a s e))) (explanationFailure a e))),"If the agent generates candidates but does not assess them, there is an explanation failure"
25,25.3,(25.22),(forall (a e s) (if (and (adoptGoalToExplain a e) (generateExplanations a e s) (assessExplanations a s e) (not (adoptExplanation a e1 e))) (explanationFailure a e))),"If the agent generates and assesses candidates but does not adopt an explanation, there is an explanation failure"
26,26.1,(26.1),(forall (e0 a e t1 t0) (iff (expect' e0 a e t1 t0) (exists (e1 e2) (and (atTime' e1 e t1)(believe' e2 a e1) (atTime e2 t0)(before t0 t1)(gen e2 e0))))),"e0 is the eventuality of agent a, at time t0, expecting that e will happen or hold at time t1. The belief e2 that e will happen or hold at t1 constitutes the expectation"
26,26.1,(26.2),(forall (a e t1 t0) (iff (unexpect a e t1 t0) (exists (e1 e2) (and (atTime' e1 e t1)(believe' e2 a e1) (not (atTime e2 t0)))))),It is possible to fail to believe some event will occur at some future time - unexpect means this
26,26.1,(26.3),(forall (s a e t1 t0) (iff (expectationJustification s a e t1 t0) (exists (e0 e1 s1 e2) (and (expect' e0 a e t1 t0)(cwu0' e1 s a t0) (eventualitiesOf s1 s)(atTime' e2 e t1) (member e2 s1)(cause e1 e0))))),Agent a's current world understanding s at time t0 includes e being true at time t1. The fact e1 that s is the current world understanding causes the expectation e0
26,26.1,(26.4),(forall (a e t1) (iff (addExpectation a e t1 t0) (exists (s0 s1 e0 e1 t2) (and (ecs' e0 s0 a)(ecs' e1 s1 a) (not (expectationJustification s0 a e t1 t2)) (expectationJustification s1 a e t1 t0) (change e0 e1))))),To add a justified expectation e is to extend an envisioned causal system to the point where e is predicted
26,26.1,(26.5),(forall (a e t1) (iff (removeExpectation a e t1 t0) (exists (s0 s1 e0 e1 t2) (and (ecs' e0 s0 a)(ecs' e1 s1 a) (expectationJustification s0 a e t1 t2) (not (expectationJustification s1 a e t1 t0)) (change e0 e1))))),To remove a justified expectation is just the opposite - move from having justification to not having justification
26,26.1,(26.6),(forall (a) (if (person a) (exists (e0 c e t1 t0) (and (able a e0 c)(addExpectation' e0 a e t1 t0))))),People have an ability to add expectations
26,26.1,(26.7),(forall (a) (if (person a) (exists (e0 c e t1 t0) (and (able a e0 c)(removeExpectation' e0 a e t1 t0))))),People have an ability to remove expectations
26,26.1,(26.8),(forall (a e t1) (iff (expectationConfirmation a e t1) (exists (t0) (and (expect a e t1 t0)(atTime e t1))))),"When the future time of an expectation arrives, the expectation is confirmed if the expected event actually occurs at that time"
26,26.1,(26.9),(forall (a e t1) (iff (expectationViolation a e t1) (exists (t0) (and (expect a e t1 t0)(not (atTime e t1)))))),"When the future time of an expectation arrives, the expectation is violated if the expected event does not occur at that time"
27,27.1,(27.1),(forall (a b e) (iff (envisionMentalState a b e) (exists (s s1 x) (and (ecs s a)(thinkOf' e b x)(eventualitiesOf s1 s) (member e s1))))),"Agent a envisions agent b's mental state e if a envisions a causal system s, and if e is b's thinking of something x, and e is a member of s's set of eventualities"
27,27.1,(27.2),(forall (a b e) (if (and (person a)(person b)(etc)) (exists (e1 c) (and (able a e1 c)(envisionMentalState' e1 a b e))))),"People are defeasibly able to envision other people's mental states, subject to implicit constraint conditions"
27,27.1,(27.3),(forall (a b e) (iff (otherAgentReason a b e) (and (nequal a b)(envisionMentalState a b e)))),Other-agent reasoning is envisioning the mental state of someone other than the envisioning agent
27,27.1,(27.4),(forall (a b e) (iff (otherAgentReasonFail a b e) (exists (e1) (and (fail a e1)(otherAgentReason' e1 a b e))))),People sometimes fail to envision the mental state of other people
27,27.1,(27.5),(forall (a e) (iff (introspect a e)(envisionMentalState a a e))),Introspection happens when one envisions one's own mental states
27,27.1,(27.6),(forall (a e) (iff (introspectFail a e) (exists (e1) (and (fail a e1)(introspect' e1 a e))))),Introspection failure happens when an agent fails to introspect
27,27.1,(27.7),(forall (a b) (if (and (person a)(person b)) (exists (s s1 e x) (and (causalSystem s)(eventualitiesOf s1 s)(member e s1) (thinkOf' e b x)(believe a s))))),People have models of how people in general think - one agent has a belief in a causal system involving another agent's thinking
27,27.1,(27.8),(forall (a) (if (person a) (exists (g) (forall (b) (if (member b g) (exists (s s1 e x) (and (causalSystem s)(eventualitiesOf s1 s) (member e s1)(thinkOf' e b x) (believe a s)))))))),"More specifically, people have models of how members of certain groups think"
28,28.1,(28.1),(forall (e a) (if (goal e a)(and (eventuality e)(agent a)))),"If eventuality e is a goal of agent a, then e is an eventuality and a is an agent"
28,28.1,(28.2),(forall (e1 x) (if (p' e1 x) (exists (e2)(and (q' e2 x)(cause e1 e2))))),"Agents know facts about what causes what - if p holds of x in e1, then there exists e2 where q holds of x and e1 causes e2"
28,28.1,(28.3),(forall (e1 x) (if (p' e1 x) (exists (e2)(and (q' e2 x)(enable e1 e2))))),"Agents know facts about what enables what - if p holds of x in e1, then there exists e2 where q holds of x and e1 enables e2"
28,28.1,(28.4),(forall (a e1 e2) (if (and (goal e2 a)(cause e1 e2))(goal e1 a))),"If agent a has goal e2 and e1 causes e2, then a will also have e1 as a goal"
28,28.1,(28.5),(forall (a e0 e1 e2) (if (and (goal e2 a)(cause' e0 e1 e2)(believe a e0)) (goal e1 a))),"If a has goal e2 and believes e1 causes e2, then a will have e1 as a goal"
28,28.1,(28.6),(forall (a e0 e1 e2 g2) (if (and (goal' g2 e2 a)(cause' e0 e1 e2)(believe a e0)) (exists (g1)(and (goal' g1 e1 a)(cause g2 g1))))),"If agent a wants e2 and believes e1 causes e2, that wanting will cause a to want e1"
28,28.1,(28.7),(forall (a e0 e1 e2 g2) (if (and (goal' g2 e2 a)(cause' e0 e1 e2)(believe a e0)) (exists (g1) (and (goal' g1 e1 a)(cause g2 g1)(subgoal e1 e2))))),"If agent a wants e2 and believes e1 causes e2, then a will want e1 as a subgoal of e2"
28,28.1,(28.8),(forall (a e0 e1 e2 g2) (if (and (goal' g2 e2 a)(cause' e0 e1 e2)(believe a e0)(etc)) (exists (g1) (and (goal' g1 e1 a)(cause g2 g1)(subgoal e1 e2))))),"If agent a has a goal e2 and believes e1 causes e2, then defeasibly this wanting e2 will cause a to want e1 as a subgoal of e2"
28,28.1,(28.9),(forall (a e1 e2) (if (and (goal e2 a)(enable e1 e2))(goal e1 a))),"If agent a has goal e2 and e1 enables e2, then a will also have e1 as a goal"
28,28.1,(28.10),(forall (a e0 e1 e2) (if (and (goal e2 a)(enable' e0 e1 e2)(believe a e0)) (goal e1 a))),"If a has goal e2 and believes e1 enables e2, then a will have e1 as a goal"
28,28.1,(28.11),(forall (a e0 e1 e2 g2) (if (and (goal' g2 e2 a)(enable' e0 e1 e2)(believe a e0)) (exists (g1)(and (goal' g1 e1 a)(cause g2 g1))))),"If agent a wants e2 and believes e1 enables e2, that wanting will cause a to want e1"
28,28.1,(28.12),(forall (a e0 e1 e2 g2) (if (and (goal' g2 e2 a)(enable' e0 e1 e2)(believe a e0)) (exists (g1) (and (goal' g1 e1 a)(cause g2 g1)(subgoal e1 e2))))),"If g2 is a's having a goal e2 and a believes that e1 enables e2, then there will be a g1 that is a's having a goal e1, e1 will be a subgoal of e2, and a's having goal e2 causes a to have goal e1"
28,28.1,(28.13),(forall (e1 e2) (if (subgoal e1 e2) (exists (a e3 e4 e5 s) (and (goal e2 a)(goal e1 a) (causalComplex' e3 s e2)(member' e4 e1 s) (and' e5 e3 e4)(believe a e5))))),"The subgoal relation is a relation between two goals, and implies the agent's belief that the subgoal is in a causal complex for the goal"
28,28.1,(28.14),(forall (e1 e2 e3 a) (if (and (subgoal e1 e2)(subgoal e2 e3)) (subgoal e1 e3))),The subgoal relation is transitive
28,28.1,(28.15),(forall (e e1 a) (if (and (goal' e e1 a)(believe a e)(etc)) (Rexist e))),"If one believes he or she has a goal, then defeasibly he or she really does have the goal. We are usually pretty reliable about knowing what we want"
28,28.2,(28.16),(forall (e a) (iff (knowledgeGoal e a) (exists (e1) (and (goal e1 a)(know' e1 a e))))),"A knowledge goal is a goal of knowing something, because most actions have knowledge prerequisites"
28,28.2,(28.17),(forall (e a t) (iff (preservationGoal e a t) (exists (e1 t1) (and (goal e1 a)(during' e1 e t) (begins t1 t)(atTime e t1))))),"A preservation goal is a goal that some state that is true now remain true in the future, over some time period"
28,28.2,(28.18),(forall (e a t) (iff (preservationGoalViolation e a t) (exists (e1 t1) (and (preservationGoal e a t)(not' e1 e)(atTime e1 t1) (insideTime t1 t))))),It is possible for a preservation goal to be violated
28,28.2,(28.19),(forall (e a t) (iff (persistentGoal e a t) (exists (e1) (and (goal' e1 e a)(during e1 t))))),"A goal can be persistent in that it remains a goal even after it is achieved. The condition e1 is e's being a goal of agent a, and it holds all through time interval t"
28,28.2,(28.20),(forall (e a t1 t2) (iff (envisionedFutureGoal e a t1 t2) (exists (e1 e2 e3) (and (thinkOf' e1 a e3)(atTime' e3 e2 t2)(goal' e2 e a) (atTime e1 t1)(before t1 t2))))),Some goals are envisioned to be desired only at some point in the future. e is a goal that agent a imagines at time t1 having at some subsequent time t2
28,28.2,(28.21),(forall (e a t1 t2) (iff (achievedGoal e a t1 t2) (exists (e1 e2 e3) (and (goal' e1 e a)(atTime e1 t1) (instance e3 e)(atTime' e2 e3 t2) (before t1 t2)(cause e1 e2))))),"Sometimes goals are achieved. A goal that has been achieved is an eventuality that was once a goal and now really exists, and its once having been a goal should have played a causal role in its current real existence"
28,28.2,(28.22),(forall (e a t1 t2) (iff (unachievedGoal e a t1 t2) (exists (e1 e2) (and (atTime' e2 e t2)(goal' e1 e2 a) (atTime e1 t1)(before t1 t2) (not (exists (e3) (and (instance e3 e) (atTime e3 t2)))))))),Sometimes goals are not achieved. Eventuality e was a goal of a's at time t1 and it (or an instance of it) does not really exist at time t2
28,28.2,(28.23),(forall (e a t1) (iff (neverAchievedGoal e a t1) (forall (t2) (if (before t1 t2)(unachievedGoal e a t1 t2))))),Sometimes goals are never achieved. Eventuality e that agent a had as a goal at time t1 has never subsequently happened
28,28.2,(28.24),(forall (e1 e2 a) (iff (conflictingGoals e1 e2 a) (and (goal e1 a)(goal e2 a) (forall (e3 t) (if (and (instance e3 e1)(atTime e3 t)) (exists (e4) (and (not' e4 e2)(atTime e4 t)))))))),"Goals can be classified with respect to each other. It is possible for goals to conflict with each other - both e1 and e2 are goals of a's, but if an instance of one holds at some time t, then the negation of the other holds at time t as well"
28,28.2,(28.25),(forall (e1 e2 a) (iff (auxiliaryGoal e1 e2 a) (exists (e0 e3 e4 e5 e6 e7) (and (goal' e0 e1 a)(goal e2 a) (if (and (changeTo' e3 e4)(believe' e4 a e5) (conflictingGoals' e5 e1 e2 a)) (and (cause e3 e6)(changeFrom' e6 e0))))))),"A goal can be auxiliary to another goal, in the sense that the agent wants both goals, but in case of conflict between the goals, the auxiliary goal is the one that is abandoned"
28,28.3,(28.26),(forall (e s e1) (iff (sharedGoal' e e1 s) (exists (e0) (and (goal' e0 e1 s)(mb s e0)(gen e0 e) (forall (x)(if (member x s)(agent x))))))),"A shared or collaborative goal is a goal in which the agent having the goal is a collective. Moreover, the members of the collective mutually believe the collective has the goal"
28,28.3,(28.27),(forall (x s e1) (if (and (sharedGoal e1 s)(member x s)) (goal e1 x))),"Because mutual belief implies belief and because if you believe you have a goal then you do really do have the goal, it follows that the individual members of s have e1 as a goal"
28,28.3,(28.28),(forall (e1 e2 a1 a2) (iff (competitiveGoals e1 e2 a1 a2) (exists (e3) (and (subst a1 e1 a2 e2)(goal e1 a1)(goal e2 a2) (and' e3 e1 e2) (not (exists (e4 t) (and (instance e4 e3) (atTime e4 t)))))))),"The goals of different agents can conflict. One way is for the goals to be competitive - more than one agent has the goal of the same property being true of himself. a1 plays the same role in e1 as a2 plays in e2, a1 has e1 as a goal, a2 has e2 as a goal, and they can't both hold at once"
28,28.3,(28.29),(forall (a1 a2 e1) (iff (adversarialGoals e1 a1 a2) (exists (e2) (and (goal e1 a1)(goal e2 a2)(not' e2 e1))))),"In adversarial goals, the goals are in direct conflict. One agent wants a goal and the other agent wants its negation"
28,28.4,(28.30),(forall (e a e1) (iff (try' e a e1) (exists (e0 e2 e3 e4) (and (goal e1 a)(subgoal' e3 e2 e1)(instance e4 e2) (agentOf a e4)(cause e3 e4)(gen e4 e))))),"When we try to bring about some goal, we devise at least a partial plan to achieve it, including subgoals of the original goal which are actions on our part, and we execute some of those subgoals. Moreover, our executing those actions is a direct result of our having those actions as subgoals"
28,28.4,(28.31),(forall (a e1) (if (try a e1) (exists (e2 e3 e4) (and (instance e3 e1)(causallyInvolved' e4 e2 e3) (believe a e4)(agentOf a e2))))),"It follows that if you try to do something e1, then you perform some action or actions that you believe are causally involved in effecting an instance of e1"
28,28.4,(28.32),(forall (e a e1) (iff (succeed' e a e1) (exists (e2 e3) (and (try' e2 a e1)(instance e3 e1) (cause e2 e3)(gen e3 e))))),To succeed at some goal is to try to do it and to have that trying cause the goal to actually occur
28,28.4,(28.33),(forall (a e1) (iff (fail a e1) (and (try a e1) (not (exists (e2) (and (instance e2 e1)(Rexist e2))))))),To fail at some goal is to try to do it and for it not to actually occur
28,28.5,(28.34),(forall (x e) (if (and (compositeEntity x)(changeIn' e x)) (iff (functionality0 e x) (exists (e2 e3 a) (and (goal' e2 e a)(agent' e3 a)(imply e3 e2)))))),A composite entity that goes through changes can be viewed as having as an associated goal some element or subset of those changes. We will define that 'goal' as the functionality of the whole
28,28.5,(28.35),(forall (e1 y e x) (iff (functionality e1 y e x) (exists (s) (and (functionality0 e x)(causalComplex s e) (member e1 s)(arg* y e1)(componentOf y x))))),"If a component has some property or engages in some behavior that is in a causal complex for the functionality of the composite entity as a whole, we can say that property or behavior is the functionality of the component with respect to the functionality0 of the whole"
28,28.5,(28.36),(forall (x) (iff (intact x) (forall (e1 y e) (if (functionality e1 y e x) (not (exists (e2 e3) (and (arg* y e2)(not' e3 e1) (cause e2 e3)))))))),"A component is intact if it is able to fulfill its functionality. That is, there are no properties of the component that would cause the functionality not to occur"
28,28.6,(28.37),(forall (e a) (iff (goodFor e a) (exists (e1 s) (and (goal e1 a)(causalComplex s e1)(member e s))))),An eventuality is good for us if it contributes causally somehow to the achievement of one of our goals
28,28.6,(28.38),(forall (e a) (iff (badFor e a) (exists (e1 e2 s) (and (not' e2 e1)(goal e1 a)(causalComplex s e2) (member e s))))),An eventuality is bad for us if it contributes causally somehow to the nonachievment of one of our goals
28,28.7,(28.39),(forall (x1 x2 a) (if (moreValuable x1 x2 a)(and (nequal x1 x2)(agent a)))),"A concept, entity or eventuality is more or less valuable to an agent depending on its relation to the agent's goals. The entities being compared are distinct"
28,28.7,(28.40),(forall (x1 x2 a) (if (moreCostly x1 x2 a)(and (nequal x1 x2)(agent a)))),Type constraint for cost comparison - entities being compared must be distinct and a must be an agent
28,28.7,(28.41),(forall (x1 x2 a) (if (moreImportant x1 x2 a)(and (nequal x1 x2)(agent a)))),Type constraint for importance comparison - entities being compared must be distinct and a must be an agent
28,28.7,(28.42),(forall (x1 x2 x3 a) (if (and (moreValuable x1 x2 a)(moreValuable x2 x3 a)) (moreValuable x1 x3 a))),"Being partial orderings, the three relations are transitive - value version"
28,28.7,(28.43),(forall (x1 x2 x3 a) (if (and (moreCostly x1 x2 a)(moreCostly x2 x3 a)) (moreCostly x1 x3 a))),"Being partial orderings, the three relations are transitive - cost version"
28,28.7,(28.44),(forall (x1 x2 x3 a) (if (and (moreImportant x1 x2 a)(moreImportant x2 x3 a)) (moreImportant x1 x3 a))),"Being partial orderings, the three relations are transitive - importance version"
28,28.7,(28.45),(forall (e1 s a) (iff (ubSupergoal e1 s a) (and (agent a)(goal e1 a)(not (member e1 s)) (forall (e2) (if (member e2 s)(subgoal e2 e1))) (forall (e2 e3) (if (and (member e2 s)(subgoal e2 e3)) (or (subgoal e3 e1)(equal e3 e1) (exists (g1 g3) (and (subgoal' g1 e2 e1) (subgoal' g3 e2 e3) (if (changeFrom g1) (changeFrom g3)))))))))),"An eventuality e1 is an upper bound supergoal of e2 if every path from the top-level goal down to e2 passes through e1. Thus, every reason for doing e2 is in service of e1"
28,28.7,(28.46),(forall (e1 s a) (iff (lubSupergoal e1 s a) (and (ubSupergoal e1 s a) (forall (e) (if (ubSupergoal e s a) (or (equal e e1)(subgoal e1 e))))))),A goal e1 is a least upper bound supergoal if it is an upper bound supergoal and a subgoal of all other upper bound supergoals
28,28.7,(28.47),(forall (s e1 e2 a) (if (and (singleton s e2)(lubSupergoal e1 s a)) (moreValuable e1 e2 a))),"If eventuality e1 dominates eventuality e2 on every path in the agent's plan that includes e2, then e1 is more valuable than e2. Every reason for wanting e2 is in the service of e1"
28,28.7,(28.48),(forall (s e1 e2 a) (if (and (singleton s e2)(lubSupergoal e1 s a)) (moreCostly e1 e2 a))),Cost version of least upper bound supergoal dominance
28,28.7,(28.49),(forall (s e1 e2 a) (if (and (singleton s e2)(lubSupergoal e1 s a)) (moreImportant e1 e2 a))),Importance version of least upper bound supergoal dominance
28,28.7,(28.50),(forall (s e a) (if (lubSupergoal e s a)(moreValuable e s a))),"The least upper bound supergoal of a set of goals is more important than the whole set, as all the members of the set are in the service of the supergoal - value version"
28,28.7,(28.51),(forall (s e a) (if (lubSupergoal e s a)(moreCostly e s a))),Cost version of supergoal dominance over goal set
28,28.7,(28.52),(forall (s e a) (if (lubSupergoal e s a)(moreImportant e s a))),Importance version of supergoal dominance over goal set
28,28.7,(28.53),(forall (e a) (iff (posGoalRelevant e a) (exists (e1) (and (goal e1 a)(imply e e1))))),An eventuality e is positively goal-relevant to an agent a if its occurrence implies the satisfaction of some goal e1 of a's
28,28.7,(28.54),(forall (e a) (iff (negGoalRelevant e a) (exists (e1 e2) (and (goal e1 a)(not' e2 e1)(imply e e2))))),An eventuality e is negatively goal-relevant to an agent a if its occurrence implies the satisfaction of the negation e2 of some goal e1 of a's
28,28.7,(28.55),(forall (e a) (iff (goalRelevant e a) (or (posGoalRelevant e a)(negGoalRelevant e a)))),An eventuality as 'goal-relevant' to an agent if its existence implies the existence or nonexistence of one of the agent's goals
28,28.7,(28.56),(forall (s e a) (iff (posGoalConsequences s e a) (forall (e1) (iff (member e1 s) (and (goal e1 a)(imply e e1)))))),The positive goal consequences of an eventuality are those goals that are positively impacted by e
28,28.7,(28.57),(forall (s e a) (iff (negGoalConsequences s e a) (forall (e1) (iff (member e1 s) (and (goal e1 a) (exists (e2) (not' e2 e1)(imply e e2))))))),The negative goal consequences of an eventuality are those goals that are negatively impacted by e
28,28.7,(28.58),(forall (s e a) (iff (goalConsequences s e a) (exists (s1 s2) (and (posGoalConsequences s1 e a) (negGoalConsequences s2 e a) (union s s1 s2))))),The goal consequences of an eventuality combine positive and negative goal consequences
28,28.7,(28.59),(forall (x s e a) (if (and (moreValuable x s a)(posGoalConsequences s e a)) (moreValuable x e a))),"The value of an eventuality depends on the value of its goal consequences. If something x is more valuable than the goal consequences of eventuality e, then it is more valuable than e"
28,28.7,(28.60),(forall (x s e a) (if (and (moreValuable s x a)(posGoalConsequences s e a)) (moreValuable e x a))),Second direction of value transfer from goal consequences to eventuality
28,28.7,(28.61),(forall (x s e a) (if (and (moreCostly x s a)(negGoalConsequences s e a)) (moreCostly x e a))),Cost version of goal consequence transfer - first direction
28,28.7,(28.62),(forall (x s e a) (if (and (moreCostly s x a)(negGoalConsequences s e a)) (moreCostly e x a))),Cost version of goal consequence transfer - second direction
28,28.7,(28.63),(forall (x s e a) (if (and (moreImportant x s a)(goalConsequences s e a)) (moreImportant x e a))),Importance version of goal consequence transfer - first direction
28,28.7,(28.64),(forall (x s e a) (if (and (moreImportant s x a)(goalConsequences s e a)) (moreImportant e x a))),Importance version of goal consequence transfer - second direction
28,28.7,(28.65),(forall (s x a) (iff (posGrProps s x a) (forall (e) (iff (member e s) (and (arg* x e)(posGoalRelevant e a)))))),"The value, cost, and importance of an entity depends on the value, cost, and importance of its properties and of the events it participates in. Positive goal-relevant properties"
28,28.7,(28.66),(forall (s x a) (iff (negGrProps s x a) (forall (e) (iff (member e s) (and (arg* x e)(negGoalRelevant e a)))))),Negative goal-relevant properties of an entity
28,28.7,(28.67),(forall (s x a) (iff (grProps s x a) (forall (e) (iff (member e s) (and (arg* x e)(goalRelevant e a)))))),All goal-relevant properties of an entity (positive and negative)
28,28.7,(28.68),(forall (s x1 x2 a) (if (and (moreValuable x1 s a)(posGrProps s x2 a)) (moreValuable x1 x2 a))),"The value, cost, and importance of an entity depend on the value, cost, and importance of its goal-relevant properties. Value version - first direction"
28,28.7,(28.69),(forall (s x1 x2 a) (if (and (moreValuable s x1 a)(posGrProps s x2 a)) (moreValuable x2 x1 a))),Value version - second direction
28,28.7,(28.70),(forall (s x1 x2 a) (if (and (moreCostly x1 s a)(negGrProps s x2 a)) (moreCostly x1 x2 a))),Cost version - first direction
28,28.7,(28.71),(forall (s x1 x2 a) (if (and (moreCostly s x1 a)(negGrProps s x2 a)) (moreCostly x2 x1 a))),Cost version - second direction
28,28.7,(28.72),(forall (s x1 x2 a) (if (and (moreImportant x1 s a)(grProps s x2 a)) (moreImportant x1 x2 a))),Importance version - first direction
28,28.7,(28.73),(forall (s x1 x2 a) (if (and (moreImportant s x1 a)(grProps s x2 a)) (moreImportant x2 x1 a))),Importance version - second direction
28,28.7,(28.74),(forall (s a) (iff (valueScale s a) (exists (s1 e x1 x2) (and (scaleDefinedBy s s1 e)(moreValuable' e x1 x2 a) (agent a)(member x1 s1)(member x2 s1))))),We can now define a value scale as a scale whose components are any arbitrary set and whose partial ordering is moreValuable
28,28.7,(28.75),(forall (x a) (iff (valuable x a) (exists (s s1) (and (valueScale s a)(Hi s1 s)(inScale x s1))))),Something is valuable to an agent a if it is in the Hi region of a's value scale
28,28.7,(28.76),(forall (x y a) (iff (value y x a) (exists (s) (and (valueScale s a)(inScale y a)(equal x y))))),"The value of something, its place in a value scale, is just itself, as an element in that scale. y is the value of x to agent a if y simply is x and it has a place in a value scale"
28,28.7,(28.77),(forall (s a) (iff (costScale s a) (exists (s1 e x1 x2) (and (scaleDefinedBy s s1 e)(moreCostly' e x1 x2 a) (agent a)(member x1 s1)(member x2 s1))))),Cost scale definition parallel to value scale
28,28.7,(28.78),(forall (s a) (iff (importanceScale s a) (exists (s1 e x1 x2) (and (scaleDefinedBy s s1 e)(moreImportant' e x1 x2 a) (agent a)(member x1 s)(member x2 s))))),Importance scale definition parallel to value scale
28,28.7,(28.79),(forall (x a) (iff (costly x a) (exists (s s1) (and (costScale s a)(Hi s1 s)(inScale x s1))))),Something is costly to an agent if it is in the Hi region of the agent's cost scale
28,28.7,(28.80),(forall (x a) (iff (important x a) (exists (s s1) (and (importanceScale s a)(Hi s1 s)(inScale x s1))))),Something is important to an agent if it is in the Hi region of the agent's importance scale
28,28.7,(28.81),(forall (x y a) (iff (cost y x a) (exists (s) (and (costScale s a)(inScale y a)(equal x y))))),The cost of something is its place in a cost scale
28,28.7,(28.82),(forall (x y a) (iff (importance y x a) (exists (s) (and (importanceScale s a)(inScale y a)(equal x y))))),The importance of something is its place in an importance scale
29,29.1,(29.1),(forall (a) (if (agent a) (exists (e)(and (goal e a)(thrive' e a))))),"It is formally convenient to assume that agents have one plan that they are always developing, executing, monitoring, and revising, and that that plan is in the service of a single goal called 'Thriving'"
29,29.1,(29.2),(forall (e a) (if (thrive' e a)(agent a))),"If e is an eventuality of a thriving, then a is an agent"
29,29.2,(29.3),(forall (e p) (if (pleasure e p)(person p))),The expression (pleasure e p) means that the eventuality e is the experience of person p feeling pleasure
29,29.2,(29.4),(forall (e0 e p) (if (and (pleasure' e0 e p)(Rexists e0))(know p e0))),"When someone feels pleasure, they know it, and that fact is in their focus of attention"
29,29.2,(29.5),(forall (e p) (if (pleasure e p)(inFocus e p))),"When someone feels pleasure, that fact is in their focus of attention"
29,29.2,(29.6),(forall (e0 e p) (if (and (pleasure' e0 e p)(believe p e0)) (Rexist e0))),"Moreover, if someone believes he or she feels pleasure, they really do. It is not something one can be mistaken about"
29,29.2,(29.7),(forall (p1 p2 e1 e2) (if (and (pleasure e1 p1)(pleasure e2 p2)(nequal p1 p2)) (nequal e1 e2))),"Pleasure is a private experience. If two distinct persons p1 and p2 have experiences of pleasure e1 and e2, the experiences are distinct"
29,29.2,(29.8),(forall (e1 a) (iff (pleasurable e1 p) (exists (e) (and (pleasure e p)(cause e1 e))))),A closely related concept identifies the cause of the pleasure. Eventuality e1 is pleasurable to person p if e1 causes the experience e of pleasure in p
29,29.2,(29.9),(forall (e0 e1 p) (if (and (pleasurable' e0 e1 p)(Rexists e0)(etc)) (know p e0))),"We normally know the causes of our feelings of pleasure, but not always"
29,29.2,(29.10),(forall (e0 e1 e2 p) (if (and (pleasurable' e0 e1 p)(believe' e2 p e0)(etc)) (exists (g0) (and (goal' g0 e1 p)(cause e2 g0))))),"The principal property of pleasure, for our purposes, is that if we believe something is pleasurable, it will often cause us to adopt it as a goal"
29,29.2,(29.11),(forall (e p) (if (and (pleasure e p)(etc)) (exists (e1 e2) (and (thrive' e1 p)(believe' e2 p e1)(cause e e2))))),"When we feel pleasure, that normally causes us to believe we are thriving"
29,29.2,(29.12),(forall (e1 e2 p) (if (and (moreValuable e1 e2 p)(etc)) (morePleasurable e1 e2 p))),"Defeasibly, the more valuable a goal is to us, the more pleasurable its achievement should be"
29,29.2,(29.13),(forall (e p) (if (pain e p)(person p))),The expression (pain e p) means that the eventuality e is the experience of person p feeling pain
29,29.2,(29.14),(forall (e0 e p) (if (and (pain' e0 e p)(Rexists e0))(know p e0))),"When someone feels pain, they know it, and that fact is in their focus of attention. It is not something they can be mistaken about"
29,29.2,(29.15),(forall (e p) (if (pain e p)(inFocus e p))),"When someone feels pain, that fact is in their focus of attention. In these axioms the pain itself (e) is in focus"
29,29.2,(29.16),(forall (p1 p2 e1 e2) (if (and (pain e1 p1)(pain e2 p2)(nequal p1 p2)) (nequal e1 e2))),"Pain is a private experience. If two distinct persons p1 and p2 have experiences of pain e1 and e2, the experiences are distinct"
29,29.2,(29.17),(forall (e1 a) (iff (painful e1 p) (exists (e) (and (pain e p)(cause e1 e))))),A closely related concept identifies the cause of the pain. Eventuality e1 is painful to person p if e1 causes the experience e of pain in p
29,29.2,(29.18),(forall (e p) (if (and (painful' e0 e1 p)(Rexists e0)(etc)) (know p e0))),"We normally know the causes of our feelings of pain, but not always"
29,29.2,(29.19),(forall (e p) (if (and (pain e p)(etc)) (exists (x e1 e2) (and (bodyPart x p)(changeFrom' e1 e2)(intact' e2 x) (cause e1 e))))),"More than pleasure, pain tends to be associated with a particular body part and indicates that damage is being done to that body part. Breaking your arm is painful, and the pain is telling you that your arm is broken"
29,29.2,(29.20),(forall (e0 e1 e2 p) (if (and (painful' e0 e1 p)(believe' e2 p e0)(etc)) (exists (g0 e3) (and (goal' g0 e3 p)(not' e3 e1)(cause e2 g0))))),"The principal property of pain, for our purposes, is that if we believe something is painful, it will often cause us to adopt as a goal causing the pain to stop"
29,29.2,(29.21),(forall (e p) (if (and (pain e p)(etc)) (exists (e1 e2 e3) (and (thrive' e1 p)(not' e3 e1)(believe' e2 p e3) (cause e e2))))),"When we feel pain, that normally causes us to believe we are not thriving"
29,29.2,(29.22),(forall (x y p) (if (and (moreCostly e1 e2 p)(etc)) (morePainful e1 e2 p))),"Just as we did with pleasure, we can help out Martians and robots by saying that there is a correlation between how painful something is and the cost of the goals we are willing to sacrifice to eliminate the pain"
29,29.3,(29.23),(forall (a e1 t1 e2 t2) (if (stvslt a e1 t1 e2 t2) (exists (e3 e4) (and (agent a)(before t1 t2) (atTime' e3 e1 t1)(goal e3 a) (atTime' e4 e2 t2)(goal e4 a) (conflictingGoals e3 e4 a) (moreValuable e2 e1 a))))),"A very common conflict when we are trying to decide what to do is between satisfying short-term goals and pursuing long-term goals. The constraints are: one time is before the other, the goals conflict, and the long-term goal is more valuable"
29,29.3,(29.24),(forall (e a e1) (iff (pickST' e a e1) (exists (t1 e2 t2 e4 g2 e5) (and (stvslt a e1 t1 e2 t2) (atTime' e4 e2 t2)(goal' g2 e4 a) (changeFrom' e5 g2)(gen e5 e))))),To pick the short-term goal e1 is to be in this situation and to change from having e2 as a goal. Picking the short-term option is equivalent to abandoning e4 as a goal
29,29.3,(29.25),(forall (e a e2) (iff (pickLT' e a e2) (exists (e1 t1 t2 e3 g1 e5) (and (stvslt a e1 t1 e2 t2) (atTime' e3 e1 t1)(goal' g1 e3 a) (changeFrom' e5 g1)(gen e5 e))))),The definition of picking the long-term option e2 is similar - changing from having the short-term goal
29,29.3,(29.26),(forall (t e1 e2 a) (iff (gratificationDelay t e1 e2 a) (exists (t1 t2) (and (stvslt a e1 t1 e2 t2) (intervalBetween t t1 t2))))),We can call the interval between t1 and t2 the 'gratification delay'
29,29.3,(29.27),(forall (t e1 e2 a) (if (and (gratificationDelay t e1 e2 a)(etc)) (exists (y) (cost y t a)))),Much of the issue in the choice between short-term and long-term goals is that there is usually a cost to the delay
29,29.4,(29.28),(forall (x) (if (p x)(q x))),Suppose for example that we want a rule that says this universal implication
29,29.4,(29.29),(forall (e1 x) (if (p' e1 x) (exists (e2)(and (q' e2 x)(imply e1 e2))))),We can make the implication relation between the eventualities explicit and write
29,29.4,(29.30),(forall (e1 x) (if (p' e1 x) (exists (e2 e3) (and (q' e2 x)(imply' e3 e1 e2)(mb S e3))))),Now we can reify the implication and treat it as an object of mutual belief by a particular set S of agents
29,29.4,(29.31),(forall (s t) (iff (goalTheme t s) (forall (a e) (if (and (member a s)(member e t)) (exists (e1) (and (instance e1 e)(goal e1 a))))))),"We can define a 'goal theme' as a relation between a set of agents and a set of goals from which we can conclude those agents have those goals. If t is a goal theme among the group s, then t is a set of eventuality types and the members of s are likely to have as goals instances of the eventuality types in set t"
29,29.4,(29.32),(forall (s t e a) (if (and (goalTheme t s)(member e t)(member a s)) (exists (e0 e1 e2) (and (mb s e0)(causallyInvolved' e0 e1 e2) (instance e1 e)(thrive' e2 a))))),"Agents have goals because they believe they will contribute ultimately to the goal of thriving. Thus, we can characterize goal themes in terms of mutual belief in causal knowledge"
29,29.4,(29.33),(forall (s t x e1 e y) (if (and (dset s x e1)(p' e1 x)(singleton t e)(q' e y)) (goalTheme t s))),A belief that it is a goal theme of a group defined by property p that q be true would be expressed by axioms of this form
29,29.4,(29.34),(forall (s) (iff (hedonists s) (exists (t) (and (goalTheme t s) (forall (e a) (if (and (member e t)(member a s)) (pleasurable e a))))))),"Following up on our discussion of pleasure and pain, we can define a hedonist (or a set of hedonists) as someone who chooses goals that are pleasurable experiences"
30,30.1,(30.1),(forall (s a e0 e e1 e2 g) (iff (threatSituation s a e0 e e1 e2 g) (exists (s1 e3) (and (ecs s a)(member e0 s1)(eventualitiesOf s1 s) (causallyInvolved e0 e)(branch e e1 e2 s) (imply e1 e3)(not' e3 g)(goal g a) (not (imply e2 e3)))))),"s is a threat situation for agent a with respect to situation e0, involving an envisioned branch e to alternatives e1 and e2, where one alternative e1 leads to the negation of a goal g and the other e2 does not"
30,30.1,(30.2),(forall (s a e0 e e1 e2 g) (if (threatSituation s a e0 e e1 e2 g)(threat e1 a s))),e1 is the threat to agent a in situation s
30,30.1,(30.3),(forall (e1 a) (iff (threat0 e1 a)(exists (s)(threat e1 a s)))),e1 is a threat to a in some threat situation
30,30.1,(30.4),(forall (s a e0 e e1 e2 g) (if (threatSituation s a e0 e e1 e2 g)(goalInThreat g a s))),g is the goal of a's that is threatened by situation s
30,30.1,(30.5),(forall (s a e0 e e1 e2 g) (if (threatSituation s a e0 e e1 e2 g) (threatCondition e a s))),The envisioned branch point e is the threat condition
30,30.1,(30.6),(forall (s a e0 e e1 e2 g) (iff (realThreatSituation s a e0 e e1 e2 g) (and (threatSituation s a e0 e e1 e2 g)(cwu s a) (Rexist e0)))),A threat situation is real if the envisioned causal system is the current world understanding and the anchor e0 really exists
30,30.1,(30.7),(forall (e1 a c) (iff (possibleThreat e1 a c) (exists (s e0 e e2 g) (and (realThreatSituation s a e0 e e1 e2 g) (possible e1 c))))),A possible threat arises in a real threat situation where the threat e1 is possible with respect to constraints c
30,30.1,(30.8),(forall (e1 a c) (iff (impossibleThreat e1 a c) (exists (s e0 e e2 g) (and (realThreatSituation s a e0 e e1 e2 g) (not (possible e1 c)))))),An impossible threat arises in a real threat situation where the threat e1 is impossible with respect to constraints c
30,30.1,(30.9),(forall (e1 a) (iff (realizedThreat e1 a) (exists (s a e0 e e2 g e3 t1 t2) (and (realThreatSituation' e3 s a e0 e e1 e2 g) (atTime e3 t1)(atTime e1 t2)(before t1 t2))))),A threat is realized if there was a threat situation at time t1 and the threat e1 actually occurred at a later time t2
30,30.1,(30.10),(forall (e1 a) (iff (unrealizedThreat e1 a) (exists (s a e0 e e2 g e3 t1) (and (realThreatSituation' e3 s a e0 e e1 e2 g) (atTime e3 t1) (not (exists (t2) (and (atTime e1 t2)(before t1 t2)))))))),A threat is unrealized if there is no subsequent time t2 at which the threat actually occurs
30,30.2,(30.11),(forall (s1 s a) (iff (threatDetection s1 s a) (exists (e0 e e1 e2 g) (and (ecsSeq s1 a)(last s s1) (threatSituation s a e0 e e1 e2 g))))),s1 is the process of detecting threat situation s by agent a through an envisioning sequence
30,30.2,(30.12),(forall (a) (if (person a) (exists (s1 s c) (and (able a s1 c)(threatDetection s1 s a))))),People have an ability to detect threats
30,30.2,(30.13),(forall (a s1 s) (iff (threatDetectionFailure a s1 s) (and (fail a s1)(threatDetection s1 s a)))),People can fail to identify a threat
30,30.2,(30.14),(forall (x a) (iff (concern x a) (exists (e3 e1 c) (and (believe a e3)(possibleThreat' e3 e1 a c) (arg* x e1))))),To be concerned about something x is to believe there is a possible threat e1 involving x
30,30.2,(30.15),(forall (a) (iff (biasAgainstRisk a) (forall (e3 s e0 e e1 e2 g) (if (and (threatSituation s a e0 e e1 e2 g) (concern' e3 e1 a)(agentOf a e0)) (exists (e4 e5 c) (and (likely e4 c)(cwu c a)(cause' e4 e3 e5) (not' e5 e0))))))),Agent a has a bias against risk if concerns about threats likely cause a to refrain from risky actions
30,30.2,(30.16),(forall (a) (iff (biasTowardRisk a) (forall (e3 s e0 e e1 e2 g) (if (and (threatSituation s a e0 e e1 e2 g) (concern' e3 e1 a)(agentOf a e0)) (exists (e4 e5 c) (and (not (likely e4 c))(cwu c a) (cause' e4 e3 e5)(not' e5 e0))))))),Agent a has a bias toward risk if concerns about threats are not likely to cause a to refrain from risky actions
30,30.2,(30.17),(forall (a e1) (iff (addThreat a e1) (exists (e3) (and (changeTo e3)(concern' e3 e1 a))))),"When threats are identified, they are added to those that the agent is concerned with"
30,30.2,(30.18),(forall (a e1) (iff (removeThreat a e1) (exists (e3) (and (changeFrom e3)(concern' e3 e1 a))))),"When threats are no longer a concern, they are removed"
30,30.3,(30.19),(forall (s a) (iff (seriousnessScale s a) (exists (s1 s2) (and (likelihoodScale s1)(importanceScale s2 a) (compositeScale s s1 s2) (forall (e1 x) (if (at e1 x s)(threat0 e1 a))))))),"The seriousness scale is a composite of likelihood and importance scales, with threats as elements"
30,30.3,(30.20),(forall (e e1 e2 a) (iff (moreSerious' e e1 e2 a) (exists (s s1) (and (seriousnessScale s a)(scaleDefinedBy s s1 e))))),e is the eventuality of one threat e1 being more serious than threat e2 to agent a
30,30.3,(30.21),(forall (e e1 a) (iff (serious' e e1 a) (exists (s) (and (seriousnessScale s a)(scaleFor s e))))),e is the eventuality of threat e1 being serious to agent a (in the Hi region of the scale)
30,30.3,(30.22),(forall (x e1 a) (iff (seriousness x e1 a) (exists (s) (and (seriousnessScale s a)(at e1 x s))))),x is the seriousness measure of threat e1 to agent a (its place in the scale)
30,30.3,(30.23),(forall (a e1) (iff (assessThreat a e1) (exists (x e3 e4 d) (and (try a e3)(changeTo' e3 e4)(know' e4 a d) (seriousness' d x e1 a))))),To assess a threat is to try to come to know the seriousness of the threat
31,31.1,(31.1),(forall (a e2 e1 s1 s2) (iff (connectedSubgoal* e2 e1 a s1 s2) (or (and (equal e1 e2)(member e1 s1)) (exists (e3 r) (and (member e3 s1)(subgoal e3 e1) (subgoal' r e3 e1)(member r s2) (connectedSubgoal* e2 e3 a s1 s2)))))),"e2 is a connected subgoal* of e1 for agent a with respect to set s1 of eventualities and set s2 of subgoal relations, if e2 and e1 are identical and in s1, or if there is a subgoal e3 of e1 for a in s1 whose subgoal relation r is in set s2, and e2 is a connected subgoal* of e3 for a with respect to sets s1 and s2."
31,31.1,(31.2),(forall (p a e) (iff (plan p a e) (exists (s1 s2) (and (compositeEntity p) (componentsOf s1 p)(relationsOf s2 p) (member e s1) (forall (e1) (if (member e1 s1) (connectedSubgoal* e1 e a s1 s2))) (forall (r) (if (member r s2) (exists (e2 e3) (and (member e2 s1)(member e3 s1) (subgoal' r e2 e3))))))))),"p is a plan by agent a to bring about eventuality e exactly when p is a composite entity whose components are subgoals of e (or subgoals of subgoals, etc.), and whose relations are subgoal relations between pairs of elements in s1."
31,31.1,(31.3),(forall (p e1) (iff (subgoalIn e1 p) (exists (a e s) (and (plan p a e)(componentsOf s p)(member e1 s))))),"Eventuality e1 is a subgoal in plan p if there exists an agent a and goal e such that p is a plan by a for e, and e1 is a component of p."
31,31.1,(31.4),(forall (s p) (iff (subgoalsOf s p) (exists (a g) (and (plan p a g)(componentsOf s p))))),"Set s is the set of subgoals of plan p if there exists an agent a and goal g such that p is a plan by a for g, and s are the components of p."
31,31.1,(31.5),(forall (p1 p) (iff (subplan p1 p) (exists (a e e1 s1 s2 s3 s4) (and (plan p a e)(plan p1 a e1) (componentsOf s1 p)(componentsOf s2 p1) (subset s2 s1) (relationsOf s3 p)(relationsOf s4 p1) (subset s4 s3))))),"Plan p1 is a subplan of plan p if both are plans by the same agent, and the components and relations of p1 are subsets of those of p."
31,31.1,(31.6),(forall (s a e) (iff (planseq s a e) (exists (n) (and (sequence s)(length n s) (forall (i1 i2 p1 p2) (if (and (posInteger i1)(successor i2 i1) (lt i1 n)(nth p1 i1 s)(nth p2 i2 s)) (exists (e1 e2) (and (plan' e1 p1 a e)(plan' e2 p2 a e) (change e1 e2))))))))),A plan sequence is a sequence of plans where there has been a change from each element of the sequence being a's plan to achieve e to the next element in the sequence being a's plan to achieve e.
31,31.1,(31.7),(forall (a e1 e2 p g) (if (and (subgoal e2 e1)(subgoalIn e1 p)(subgoalIn e2 p)(plan p a g)) (exists (e) (and (believe a e)(causallyInvolved' e e2 e1))))),Two eventualities come to be in a subgoal relation because the agent believes there is a causal or enablement relation between them.
31,31.1,(31.8),(forall (p a e) (if (plan p a e)(ecs p a))),A plan can be thought of as an envisioned causal system.
31,31.1,(31.9),(forall (s a e) (if (planseq s a e)(ecsSeq s a))),Planning is a variety of envisioning.
31,31.2,(31.10),(forall (a e) (if (desire a e) (exists (e0 e1) (and (believe a e1)(causallyInvolved' e1 e e0) (thrive' e0 a))))),"If agent a desires a state or event e, then a believes e plays a causal role in a's thriving."
31,31.2,(31.11),(forall (p a) (if (thePlan p a) (exists (e) (and (plan p a e)(thrive' e a))))),The Plan is a plan to thrive.
31,31.2,(31.12),(forall (p a e1) (if (and (thePlan p a)(agentOf a e1)(Rexist e1)(etc)) (exists (e2) (and (subgoalIn' e2 e1 p)(cause e2 e1))))),Actions e1 of a's that really occur are defeasibly caused by a's having the action as a subgoal in the Plan.
31,31.2,(31.13),(forall (s a) (iff (thePlanseq s a) (and (planseq s a e0)(thrive' e0 a) (forall (p i) (iff (nth p i s) (exists (e t) (and (thePlan' e p a)(atTime e t)))))))),A plan p is in the Plan sequence of agent a if and only if there is some time t at which p was the Plan of a's.
31,31.2,(31.14),(forall (a e) (iff (intend a e) (exists (p) (and (thePlan p a)(subgoalIn e p)(agentOf a e))))),An intention is a subgoal in the Plan of an agent that is an action by the agent.
31,31.2,(31.15),(forall (a e) (if (eventuality e) (iff (decideTo a e) (exists (e1) (and (changeTo e1)(subgoalIn' e1 e p) (thePlan p a)))))),To decide to do something is to effect a change of state from one in which that something is not a goal in the Plan to one in which it is.
31,31.2,(31.16),(forall (p1 a g) (if (plan p1 a g) (iff (decideTo a p1) (exists (p e1) (and (changeTo e1)(subplan' e1 p1 p) (thePlan p a)))))),We can also decide to execute entire plans.
31,31.2,(31.17),(forall (g a p s) (if (and (goal g a)(planseq s a g)(last p s) (decideTo a p)) (planTo a g p))),"If agent a has goal g, a envisions a plan sequence s for achieving g, plan p is the last element in the sequence s, and a decides to add p as a subplan of thePlan, then a plans to achieve g by means of plan p."
31,31.2,(31.18),(forall (a e) (if (will a e)(agent a))),The constraint on the first argument of will is that it is an agent.
31,31.2,(31.19),(forall (a e) (if (will a e)(agentOf a e))),The only constraint we will stipulate here is that a must be the agent of e.
31,31.2,(31.20),(forall (e1 a e) (if (and (will' e1 a e)(cause e1 e))(dcause e1 e))),"If agent a wills e and e actually occurs as a result, then the willing has directly caused e, that is, there are no intermediate eventualities in the causal chain initiated by the willing."
31,31.2,(31.21),(forall (a e p) (if (and (thePlan p a)(will a e))(subgoalIn e p))),"Generally, when someone wills to do something, it is because he or she intends to do it. That is, the action is the next action in thePlan."
31,31.2,(31.22),(forall (p a e0 e e1 c) (if (and (thePlan p a)(subgoalIn' e0 e p)(agentOf a e) (will' e1 a e)(possible e1 c)(etc)) (causallyInvolved e0 e))),"If some action by the agent is in the Plan, it is possible for a to will the action, and the action occurs, then defeasibly its being in the plan is causally involved in the occurrence."
31,31.3,(31.23),(forall (p e) (if (strategy p e) (exists (a s) (and (plan p a e)(parameters s e)(not (null s)))))),A rather weak constraint on a strategy is that it is a plan whose top-level goal is an eventuality type.
31,31.3,(31.24),(forall (p e) (if (tactic p e) (exists (a s) (and (plan p a e)(parameters s e)(not (null s)))))),A tactic is also some agent's general plan.
31,31.3,(31.25),(forall (p1 e1 p2 e2) (if (and (strategy p1 e1)(tactic p2 e2)) (not (subplan p1 p2)))),"A strategy is not a subplan of a tactic. Strategies can contain tactics, but tactics do not contain strategies."
31,31.3,(31.26),(forall (p e) (if (and (tactic p e)(etc)) (exists (p1) (and (strategy p1 e1)(subplan p p1))))),"A stronger rule would be that a tactic has some strategic goal it is ultimately in the service of, so we can say that if something is a tactic, it is the subplan of some strategy."
31,31.4,(31.27),(forall (e a c) (iff (executable1 e a c t) (or (executable e a c t) (atTime e t) (exists (b) (and (agent b)(committed b e) (executable e b c t))) (forall (e1) (if (subgoal e1 e)(executable1 e1 a c t)))))),"Event e is executable1 by agent a given constraints c if it is executable by a, or if it will happen anyway, or if some other agent b is committed to making sure e occurs, or if its subgoals are all executable1."
31,31.4,(31.28),(forall (a e e1) (if (and (committed a e1)(atTime' e1 e t)(agentOf a e)(etc)) (atTime e t))),"Its principal property is that if someone is committed to an event occurring and is the agent of that event, then defeasibly that event will occur."
31,31.4,(31.29),(forall (p a e c) (iff (completePlan p a e c) (exists (t) (and (Now t)(executable1 e a c t))))),A plan is complete when its top-level goal is executable1 now (given constraints c).
31,31.5,(31.30),(forall (p a e c) (iff (partialPlan p a e c) (and (plan p a e)(not (completePlan p a e c))))),A partial plan is a plan that is not complete.
31,31.5,(31.31),(forall (p1 p) (iff (planInstance p1 p) (exists (a g) (and (plan p a g)(instance p1 p))))),A plan instance is created by substituting values for parameters in a plan type.
31,31.5,(31.32),(forall (p1 p) (iff (planInstancePlus p1 p) (exists (a g p0) (and (plan p1 a g)(plan p0 a g)(planInstance p0 p) (subplan p0 p1))))),A planInstancePlus is a plan instance that has possibly been extended by elaborating some of the subgoals into subplans for achieving them.
31,31.5,(31.33),(forall (p a g) (if (normalPlan p a g) (plan p a g))),A normal plan is a plan.
31,31.5,(31.34),(forall (p1 a1 a g1) (iff (adversarialPlan p1 a1 a g1) (exists (p g) (and (nequal a a1)(plan p a g)(plan p1 a1 g1) (not' g1 g))))),p1 is an adversarial plan by agent a1 to achieve goal g1 which is the negation of a goal g another agent a is trying to achieve.
31,31.5,(31.35),(forall (p2 p1 a a1 g1) (iff (counterplan p2 p1 a a1 g1) (exists (e1 e2) (and (nequal a a1)(adversarialPlan p1 a1 a g1) (cause' e1 p1 g1)(not' e2 e1) (plan p2 a e2))))),Here p1 is an adversarial plan of agent a1's to block agent a's goal. Plan p2 is a counterplan by agent a to block plan p1 of a1's.
31,31.5,(31.36),(forall (g a1 a2) (iff (competitiveGoal g a1 a2) (exists (g1 g2) (and (nequal a1 a2)(instance g1 g)(instance g2 g) (goal g1 a1)(goal g2 a2) (inconsistent g1 g2))))),"A competitive goal is one that can be instantiated for each of the competing agents, but it cannot hold for both agents."
31,31.5,(31.37),(forall (p a1 a2 g) (iff (competitivePlan p a1 a2 g) (exists (g1) (and (plan p a1 g1)(instance g1 g) (competitiveGoal g a1 a2))))),A competitive plan is a plan that is aimed at achieving a competitive goal.
31,31.5,(31.38),(forall (p a a1 g) (iff (assistivePlan p a a1 g) (exists (e e1) (and (nequal a a1)(goal' e g a)(goal' e1 g a1) (cause e1 e)(plan p a g))))),"Here e is the eventuality of g's being a goal of a's, e1 is the eventuality of g's being a goal of a1's, and the latter causes the former. That is, agent a has adopted the goal g precisely because it was a goal of agent a1's."
31,31.5,(31.39),(forall (p s g) (iff (sharedPlan p s g) (and (forall (a)(if (member a s)(agent a))) (goal g s)(plan p s g) (forall (e g1 g2) (if (and (subgoal' e g1 g2)(subgoalIn g1 p) (subgoalIn g2 p)(etc)) (mb s e))) (forall (a e) (if (and (member a s)(subgoalIn e p)(arg* a e)) (committed a e)))))),"p is a shared plan by a group s of agents to achieve goal g. All members of s are agents, the group has g as a goal and p is a plan for achieving the goal, the members of s mutually believe in the structure of the plan, and the members of s are committed to performing their parts in the plan."
31,31.5,(31.40),(forall (p a a1 g) (iff (envisionedPlan p a a1 g) (and (plan p a g)(ecs p a1)))),"An envisioned plan is a plan that is envisioned by another agent. A plan is a causal system, and the expression (ecs p a1) says that p is a causal system envisioned by agent a1."
31,31.5,(31.41),(forall (p a a1 g) (iff (unknownPlan p a a1 g) (and (plan p a g)(nequal a a1)(not (know a1 p))))),An unknown plan is a plan by one agent that is not known by another agent.
31,31.5,(31.42),(forall (p a g) (iff (nonconsciousPlan p a g) (and (plan p a g)(not (know a p))))),A nonconscious plan is one that is not known to the planning agent himself or herself.
31,31.5,(31.43),(forall (a e) (if (and (do a e)(etc)) (exists (e1) (and (arg* a e)(Rexist e)(goal' e1 e a)(cause e1 e))))),"Here e really happens. Eventuality e1 is e's being a goal of a's, and e1 causes e."
31,31.5,(31.44),(forall (p a g) (if (plan p a g) (iff (do a p) (forall (e) (if (and (subgoalIn e p)(arg* a e))(do a e)))))),"Because a plan is a structured set of eventualities, we can also speak of plans being executed, or done."
31,31.5,(31.45),(forall (p a g) (iff (reusedPlan p a g) (exists (p1 p2) (and (planInstancePlus p1 p)(planInstancePlus p2 p) (nequal p1 p2)(do a p1)(do a p2))))),"If these instances are actually executed, we can call the plan a 'reused plan.'"
31,31.5,(31.46),(forall (p a g) (if (occasionalPlan p a g)(reusedPlan p a g))),Both occasional and repeated plans are reused plans.
31,31.5,(31.47),(forall (p a g) (if (repeatedPlan p a g)(reusedPlan p a g))),Both occasional and repeated plans are reused plans.
31,31.5,(31.48),(forall (p a g) (iff (periodicPlan p a g) (exists (s) (and (reusedPlan p a g) (forall (p1) (iff (member p1 s)(planInstancePlus p1 p))) (periodicTseq s))))),p is a periodic plan if its instantiations constitute a periodic temporal sequence.
31,31.5,(31.49),(forall (p a g t) (iff (continuousPlan p a g t) (exists (e)(and (do' e a p)(timeSpanOf t e) (interval t))))),A plan that is continuous over interval t is one whose execution has a time span of t.
31,31.6,(31.50),(forall (e1 e2) (iff (help0 e1 e2)(causallyInvolved e1 e2))),The simplest notion of 'help' is that one event helps another event to happen if it is in its causal complex.
31,31.6,(31.51),(forall (a a1 e) (iff (help1 a a1 e) (exists (e1) (and (goal e a1)(causallyInvolved e1 e)(do a e1))))),"Agent a helps agent a1 achieve a1's goal e if a does something e1 that is in the causal complex for e. Note that a and a1 need not be distinct, as you can help yourself."
31,31.6,(31.52),(forall (a a1 e) (iff (help2 a a1 e) (exists (e1 e2) (and (goal' e2 e a1)(causallyInvolved e1 e) (do a e1)(cause e2 e1))))),"Here e2 is the condition of e being a goal of a1's, and it functions as a cause of a's doing e1. Because you want (e2) to live (e), I'll take your keys away (e1). I've thereby helped you continue to live."
31,31.6,(31.53),(forall (a a1 e) (iff (help3 a a1 e) (exists (p s e1) (and (sharedPlan p s e)(doubleton s a a1)(goal e a1) (subgoalIn e1 p)(arg* a e1))))),"Here p is the shared plan by agents a and a1 to achieve a1's goal e, and e1 is a subgoal in that plan that a plays a role in."
32,32.1,(32.1),(forall (a g) (iff (addGoal a g) (exists (p e) (and (thePlan p a)(subgoalIn' e g p)(changeTo e))))),Agent a adds goal g if and only if there is a change to g being a subgoal in a's plan.
32,32.1,(32.2),(forall (a g) (iff (removeAchievedGoal a g) (exists (p e e1 e2) (and (thePlan p a)(subgoalIn' e g p)(changeFrom' e1 e) (changeTo' e2 g)(cause e2 e1))))),There is a change from g being a goal in agent a's Plan and this was caused by g becoming true in the real world.
32,32.1,(32.3),(forall (a g) (iff (abandonGoal a g) (exists (p e) (and (thePlan p a)(subgoalIn' e g p)(changeFrom e) (not g))))),"There is a change from g being a subgoal in agent a's Plan even though g is not true, or does not hold."
32,32.1,(32.4),(forall (a g c) (iff (removeViolatedGoal a g c) (exists (p e e1 e2) (and (thePlan p a)(subgoalIn' e g p)(changeFrom' e1 e) (impossible' e2 g c)(cause e2 e1))))),"This is one kind of goal abandonment, where the goal's impossibility (with respect to constraints c) is what causes the goal to be abandoned. Resignation is ceasing to have a goal because of a realization or belief that it is impossible to achieve."
32,32.1,(32.5),(forall (a g) (iff (suspendGoal a g) (exists (p e1 e2 e3 e4 t1 t2) (and (thePlan p a)(change e1 e2) (subgoalIn' e1 e3 p)(subgoalIn' e2 e4 p) (atTime' e3 g t1)(atTime' e4 g t2) (before t1 t2))))),There is a change from a's wanting to do g at time t1 to a's wanting to do g at some later time t2.
32,32.1,(32.6),(forall (a g1 g2) (iff (modifyGoal a g1 g2) (exists (p e1 e2) (and (change e1 e2)(thePlan p a) (subgoalIn' e1 g1 p)(subgoalIn' e2 g2 p) (similar g1 g2))))),"Agent a modifies goal g1 into goal g2, where g1 and g2 are similar in that they share properties."
32,32.1,(32.7),(forall (a g1 g2) (iff (specifyGoal a g1 g2) (and (modifyGoal a g1 g2)(imply g2 g1)))),Agents can modify a goal to a more specific goal. The relation between the old and new goals is implication.
32,32.1,(32.8),(forall (a g1 g2) (iff (generalizeGoal a g1 g2) (and (modifyGoal a g1 g2)(imply g1 g2)))),Agents can modify a goal to a more general goal.
32,32.1,(32.9),(forall (a g) (iff (pursueGoal a g) (exists (p) (or (and (plan p a g)(ecs p a)) (planTo a g p) (try a g))))),"To be pursuing a goal is to be developing or executing a plan for achieving it. In line 4 the agent is just envisioning a plan, that is, planning. In line 5 the agent has decided on a plan to execute. In line 6 the agent is actually trying to achieve the goal."
32,32.2,(32.10),(forall (s a) (if (priorityScale s a) (and (agent a)(scale s)))),"First, we introduce a priority scale for an agent."
32,32.2,(32.11),(forall (p a g1 g2 g s1 s2 s3 s x11 x12 x2 x3 y1 y2) (if (and (thePlan p a)(subgoalIn g1 p)(subgoalIn g2 p) (importanceScale s1 a)(difficultyScale s2 g) (likelihoodScale s3) (instance g1 g)(instance g2 g) (priorityScale s a) (at g1 x11 s1)(at g2 x12 s1) (at g1 x2 s2)(at g2 x2 s2)(at g1 x3 s3)(at g2 x3 s3) (at g1 y1 s)(at g2 y2 s) (lts x11 x12 s1)(etc)) (lts y1 y2 s))),"If g1 and g2 are subgoals in agent a's Plan with same difficulty and likelihood but g1's importance is less than g2's, then g1's priority is less than g2's priority."
32,32.2,(32.12),(forall (p g a) (iff (priority p g a) (exists (s) (and (priorityScale s a)(at g p s))))),The priority of a goal is its location on the priority scale.
32,32.3,(32.13),(forall (e g a) (iff (goalJustification e g a) (exists (p g1) (and (thePlan p a)(subgoalIn g1 p) (plan e a g1)(subgoalIn g e))))),A justification e for a goal g is a plan of which g is a part that links g with some goal g1 in the agent's Plan.
32,32.3,(32.14),(forall (a g e p) (if (priority' e p g a) (iff (assessGoal a g) (or (envisionFrom a g)(envisionFrom a e) (envisionTo a g)(envisionTo a e))))),"Where e is the property of p being the priority of goal g, then to assess g is to envision causal chains from or to g or e, thus exploring the causes or consequences of the goal or its priority."
32,32.3,(32.15),(forall (g1 g2) (iff (conflict g1 g2) (forall (t) (and (if (atTime g1 t)(not (atTime g2 t))) (if (atTime g2 t)(not (atTime g1 t))))))),Two goals are in conflict if they cannot both obtain at the same time.
32,32.3,(32.16),(forall (a g1 g2 g3 g4) (iff (resolveConflictingGoals a g1 g2 g3 g4) (and (modifyGoal a g1 g3)(modifyGoal a g2 g4) (conflict g1 g2)(not (conflict g3 g4))))),"Here goals g1 and g2 conflict with each other. Agent a modifies goal g1 to goal g3 and modifies goal g2 to g4, where g3 and g4 do not conflict."
32,32.3,(32.17),(forall (a g1 g2) (iff (preferGoal a g1 g2) (exists (e0 e1 e2 e3 e4 e) (and (and' e0 e1 e2)(arg* g1 e1)(arg* g2 e2) (pursueGoal' e3 a g1)(pursueGoal' e4 a g2) (cause e0 e)(prefer' e a e3 e4))))),"Here e3 is agent a's pursuit of goal g1, e4 is a's pursuit of g2, and a prefers the former to the latter, because of properties e1 of g1 and e2 of g2."
32,32.3,(32.18),(forall (a g) (iff (prioritizeGoal a g) (exists (e1 e2 p1 p2) (and (goal g a)(change e1 e2) (priority' e1 p1 g a)(priority' e2 p2 g a))))),"Here p1 is the original priority of agent a's goal g, and p2 is the new priority."
32,32.3,(32.19),(forall (g a p e1 s1 s) (if (and (goal g a)(priority p g a)(inScale' e1 p s1) (Hi s1 s)(priorityScale s a)(etc)) (exists (e2) (and (pursueGoal' e2 a g)(cause e1 e2))))),"If agent a has goal g with priority p, then that priority's being high will defeasibly cause the goal to be pursued. This is the chief effect of priorities."
32,32.3,(32.20),(forall (g a p e1 e2 s1 s) (if (and (goal g a)(priority p g a)(inScale' e1 p s1)(Lo s1 s) (priorityScale s a)(pursueGoal' e2 a g)(etc)) (exists (e3) (and (not' e3 e2)(cause e1 e3))))),A goal with a low priority will defeasibly not be pursued. A low enough priority can lead to the goal's being abandoned.
33,33.1,(33.1),(forall (e a p) (iff (actionIn e a p) (exists (g e1) (and (agentOf a e)(plan p a g)(subgoalIn' e1 e p) (cause e1 e))))),An action e by an agent a in a plan p of a's is an eventuality in which a is the agent of the action and that occurs because it is in the plan p. Here e1 is the condition of eventuality e being a subgoal in plan p. It causes e to actually occur.
33,33.1,(33.2),(forall (e a p) (iff (sideEffect e a p) (exists (e1) (and (subgoalIn e1 p)(not (subgoalIn e p)) (causallyInvolved e1 e))))),A side effect of an execution of a plan is an eventuality that is caused by the achievement of some subgoal in the plan but is itself not a subgoal of the plan.
33,33.1,(33.3),(forall (a b s p) (iff (envisionExecution a b s p) (exists (g) (and (ecsSeq s a)(plan p b g) (forall (c1 e1) (if (and (inSeq c1 s)(eventualityIn e1 c1)) (or (subgoalIn e1 p)(sideEffect e1 b p)))) (exists (c2 e2) (and (inSeq c2 s)(eventualityIn e2 c2) (actionIn e2 b p))))))),"Agent a envisions a sequence s of executions of some agent b's plan p. This holds when s is a sequence of causal systems that is envisioned by a, when every element of the sequence consists of eventualities that are either subgoals in p or side effects, and when at least one of those eventualities is an action by b."
33,33.1,(33.4),(forall (a s) (iff (envisionSelfExecution a s p) (envisionExecution a a s p))),A very important special case of this is when an agent envisions the execution of the agent's own plan.
33,33.2,(33.5),(forall (a b s g) (iff (envisionExecutionSuccess a b s g) (exists (p) (and (envisionExecution a b s p)(plan p b g) (envisionedEv g s a))))),An agent envisions success in an execution of a plan if the goal of the plan is one of the envisioned eventualities.
33,33.2,(33.6),(forall (a b s g) (iff (envisionExecutionFailure a b s g) (exists (p e1) (and (envisionExecution a b s p)(plan p b g) (not' e1 g)(envisionedEv e1 s a))))),An agent envisions failure in an execution of a plan if the negation of the goal of the plan is one of the envisioned eventualities.
33,33.2,(33.7),(forall (a b s e p) (iff (envisionExecutionSideEffect a b e s p) (exists (g) (and (envisionExecution a b s p)(plan p b g) (sideEffect e b p)(envisionedEv e s a))))),Agents can envision the side effects of plans.
33,33.2,(33.8),(forall (d a b s g c) (iff (envisionedLikelihoodOfSuccess d a b s g c) (exists (e1) (and (envisionExecutionSuccess a b s g) (likelihood' e1 d g c)(believe a e1))))),"d is the likelihood (a point on the likelihood scale) that agent a envisions the ecs sequence s to contain the successful achievement of goal g by agent b, given constraints c."
33,33.2,(33.9),(forall (e a b s g) (iff (envisionedOpportunity e a b s g) (exists (p1 g1 p) (and (envisionExecution a b s p1)(plan p1 b g1) (envisionedEv e s a)(not (subgoalIn e p1)) (plan p b g)(subgoalIn e p))))),"An envisioned opportunity is an eventuality that is discovered in the course of envisioning the execution of a plan by an agent, that is not a subgoal in that plan, but that is a subgoal in another plan to achieve some goal of the agent's."
33,33.2,(33.10),(forall (t s0 a b s) (iff (thresholdOfFailure t s0 a b s) (exists (p g e e1 e2 x x1 x2 z e0) (and (envisionExecution a b s p)(plan p b g) (inSeq x s)(inSeq x1 s)(inSeq x2 s) (resolveBranch x e e1 e2 x1) (resolveBranch x e e2 e1 x2) (lts' e1 z t s0)(geqs' e2 z t s0) (not' e0 g)(eventualityIn e0 x1) (eventualityIn g x2))))),"t is a threshold point on a scale s0 in agent a's envisionment s of b's plan. The envisionment contains a two-way branch point that is resolved in both ways. The disjunction branched on is whether some entity z is less than, or greater than or equal to, the threshold. Failure to achieve goal g is in the less-than branch. Success is in the greater-than-or-equal-to branch."
33,33.3,(33.11),(forall (x s e) (iff (specific1 x s e) (exists (e1) (and (member x s)(arg* x e1)(causallyInvolved e1 e) (forall (y e2) (if (and (member y s)(nequal y x) (subst x e1 y e2)) (or (not e2) (not (causallyInvolved e2 e))))))))),"Entity x is a specific member of set s with respect to some purpose e. This holds when there is a property e1 of x that is causally involved in e, and when for all other members of the set, the corresponding property either does not hold or is not causally involved in e."
33,33.3,(33.12),(forall (x s e) (iff (arbitrary x s e) (forall (e1 y) (if (and (arg* x e1)(causallyInvolved e1 e) (member y s)) (exists (e2) (and (subst x e1 y e2) (causallyInvolved e2 e))))))),"Entity x is an arbitrary member of set s with respect to purpose e. This holds when for any property e1 that x has that impacts e, any other member y of the set has the corresponding property e2 and it also impacts e."
33,33.3,(33.13),(forall (b e0 a a1 e) (iff (arbitraryExecutionContext b e0 a a1 e) (exists (s p e1 b1 s1) (and (envisionExecution' e0 a a1 s p) (backgroundBeliefs' e1 b1 e0)(dset s1 b1 e1) (arbitrary b s1 e))))),"A set b of background beliefs is an arbitrary execution context for an execution envisionment event e0 by agent a, where the arbitrariness is with respect to purpose e. This holds exactly when e0 is an envisioning by a of a sequence s of executions of some plan p of agent a1's, and furthermore b is an arbitrary member of the set s1 of such sets b1 of background beliefs."
33,33.4,(33.14),(forall (t0 x) (iff (momentInExecution t0 x) (exists (t s) (and (timeSpanOf t s)(eventualitiesOf s x) (insideTime t0 t))))),A moment in an envisioned execution is an instant in its time span.
33,33.4,(33.15),(forall (t0 x e) (iff (arbitraryMomentInExecution t0 x e) (exists (e1 t s) (and (momentInExecution' e1 t x) (arbitrary t0 s e)(dset s t e1))))),"An instant t0 is an arbitrary moment in an envisioned execution x if it is an arbitrary member of the set of such moments, given some purpose e."
33,33.4,(33.16),(forall (d x u a b) (iff (envisionedExecutionDuration d x u a b) (exists (s p) (and (envisionExecution a b s p)(inSeq x s) (durationOf d x u))))),"The envisioned duration of an execution is the duration of an execution that is being envisioned. Agent a envisions a sequence s of contiguous ecs's containing x, and d is the duration of x in units u."
34,34.4,(34.1),(forall (a e e1 s) (iff (tryBy a e e1 s) (exists (e2 e3) (and (causalComplex' e2 s e)(member e1 s)(agentOf a e1) (believe a e2)(goal' e3 e a)(cause e3 e1))))),For agent a to try to achieve e by doing e1 is for a to believe that e1 is in a causal complex s for e and for a to do e1 where a's having the goal e causes a to do e1.
34,34.4,(34.2),(forall (a e e1 s) (iff (failBy a e e1 s) (and (tryBy a e e1 s)(not e)))),To fail when trying by some means can be defined as trying without the goal coming to exist.
34,34.4,(34.3),(forall (a e e1 s) (iff (failType1 a e e1 s) (and (failBy a e e1 s)(not (causalComplex s e))))),A type 1 failure can be defined as failing to achieve the goal e because s is not a causal complex for e.
34,34.4,(34.4),(forall (a e e1 s) (iff (failType2 a e e1 s) (and (failBy a e e1 s) (exists (e2) (and (member e2 s)(not e2)))))),A type 2 failure happens when eventualities in s other than e1 do not hold.
34,34.4,(34.5),(forall (a e e1 s) (iff (failType2a a e e1 s) (and (failType2 a e e1 s)(hope a s)(not (believe a s))))),A type 2a failure is where a fails to achieve e by means of e1 where a hopes but does not believe that s holds. An example of this is a 'Hail Mary' pass.
34,34.4,(34.6),(forall (a e e1 s) (iff (failType3 a e e1 s) (exists (e2 e3 e4 s1) (and (failBy' e2 a e e1 s)(failBy' e3 a e1 e4 s1) (cause e3 e2))))),"A type 3 failure is the recursive case. The agent a fails to achieve e by means of e1 because a fails to achieve e1. The failure to achieve e1 could be a type 1, 2, or 3 failure."
35,35.1,(35.1),(forall (e e1 e2 a) (if (and (cond e e1 e2)(agentOf a e2)(etc)) (exists (g) (and (goal g a) (or (enable e1 g)(not' g e1)))))),"If there is a conditional action by an agent a, then either the condition enables a goal of a's or the negation of the condition is a goal of a's. In the first case the agent is exploiting the occurrence of the condition. In the second he is escaping from the consequences of the condition. In either case, the condition is relevant to his goals."
35,35.1,(35.2),(forall (e e1 e2 a) (if (and (whileDo e e1 e2)(agentOf a e2)(etc)) (exists (e0) (and (not' e0 e1)(goal e0 a))))),The negation of the condition in a whileDo is defeasibly a goal of the agent's. That's why the agent keeps executing the body until the condition is gone.
35,35.1,(35.3),(forall (e e1 e2 a) (if (and (repeatUntil e e1 e2)(agentOf a e1)(etc)) (goal e2 a))),A similar rule holds for repeatUntil. The termination condition e2 is defeasibly a goal of the agent's.
35,35.2,(35.4),(forall (p1 p c) (iff (partialSubplan p1 p c) (exists (a g1) (and (subplan p1 p)(plan p1 a g1) (partialPlan p1 a g1 c))))),"A partial subplan is one in which the terminal nodes are not all executable, given a set of constraints c."
35,35.2,(35.5),(forall (a p1 p) (iff (subplanAgent a p1 p) (and (subplan p1 p) (forall (e) (if (and (subgoalIn e p1) (exists (a1) (agentOf a1 e))) (agentOf a e)))))),"Someone is a subplan agent if they are the agent of every action in the subplan. That is, a is the agent of every subgoal in the subplan p1 that has an agent."
35,35.2,(35.6),(forall (e p) (iff (planTermination e p) (exists (a g) (and (subgoalIn e p)(plan p a g) (forall (e1) (if (subgoalIn e1 p)(not (before e e1)))) (causalComplex p g)(cause e g))))),"The termination of a plan is the final action in the plan, after which the goal is achieved."
35,35.2,(35.7),(forall (e1 e) (iff (knowledgePrecondition e1 e) (exists (a e2) (and (enable e1 e)(know' e1 a e2))))),A knowledge precondition is the eventuality of someone a knowing something e2 where that knowing is an enabling condition in the causal complex for e.
35,35.2,(35.8),(forall (e1 e) (iff (resourcePrecondition e1 e) (exists (a s x e2) (and (at' e1 x a s)(enable e1 e2)(changeIn' e2 x) (causallyInvolved e2 e))))),A resource precondition involves having a resource at hand that enables an action through undergoing change that is causally involved in the effect. What distinguishes both resources and tools is that they go through a change of state (perhaps location) and that change plays an intermediate causal role in the effect occurring.
35,35.3,(35.9),(forall (p a g) (iff (conditionalPlan p a g e) (exists (e1) (and (plan p a g)(cond p e e1))))),"A conditional plan is a plan whose corresponding event is a conditional event. That is, p is a plan of a's to achieve goal g, executed only when condition e occurs."
35,35.3,(35.10),(forall (p a g) (iff (repetitivePlan p a g) (exists (e1 e2) (and (plan p a g) (or (whileDo p e1 e2)(repeatUntil p e1 e2)))))),A repetitive plan is a plan with a 'while do' or 'repeat until' structure.
35,35.3,(35.11),(forall (p1 p) (iff (periodicSubplan p1 p) (exists (t) (and (subplan p1 p)(timeSpanOf t p1) (periodicTseq t))))),Periodic subplans can be defined as plans whose time spans are periodic temporal sequences.
35,35.3,(35.12),(forall (e0 e) (iff (requiredPrecondition e0 e) (exists (e1 e2) (and (or' e e1 e2)(enable e0 e1)(enable e0 e2))))),"A required precondition is an eventuality that is an enabling condition for a disjunctive effect. That is, it is a precondition of each disjunct."
36,36.1,(36.1),(forall (e a g s) (iff (planning e a g s) (and (ecsSeq' e s a)(goal g a)(planseq s a g)))),"The activity of planning is an agent's sequence of envisionments of a causal system that is a plan for achieving one of the agent's goals. The expression (planning e a g s) says that e is an activity by agent a to plan to achieve goal g, where s is the sequence of plans produced by this activity."
36,36.1,(36.2),(forall (e0 a g) (if (pursueGoal' e0 a g) (exists (e s) (and (planning e a g s)(subevent e e0))))),Goal pursuit has planning as a subevent.
36,36.1,(36.3),(forall (a g) (if (and (person a)(goal g a)) (exists (e s c)(and (able a e c)(planning e a g s))))),"People have an ability to construct, adapt, and modify plans. Planning activity includes all types of planning, including plan adaptation, reactive planning, and constructing elaborate plans from scratch."
36,36.2,(36.4),(forall (e a1 a2 g s) (iff (collaborativePlanning e a1 a2 g s) (exists (e1 e2 s1 s2) (and (planning e1 a1 g s1)(planning e2 a2 g s2) (and' e e1 e2)(doubleton a a1 a2)(goal g a) (forall (p) (iff (inSeq p s) (or (inSeq p s1)(inSeq p s2)))))))),"Collaborative planning activity by agents a1 and a2 is the conjunction of a1's planning to achieve goal g and a2's planning to achieve the same goal g, where the set consisting of a1 and a2 has g as a collective goal. Moreover, the plans in the joint sequence of plans come from one of the agents or the other."
36,36.2,(36.5),(forall (e a1 a2 g s) (iff (assistivePlanning e a1 a2 g s) (exists (e1 e2 g1 s1 s2) (and (planning e1 a1 g1 s1)(planning e2 a2 g s2) (and' e e1 e2)(subgoal g1 g) (forall (p) (iff (inSeq p s) (or (and (assistivePlan p a1 a2 g) (inSeq p s1)) (inSeq p s2)))))))),"Assistive planning is a slightly weaker notion. Here agent a1, who is assisting agent a2, does not necessarily have the goal that both agents achieve goal g, but only that agent a2 achieves g. Agent a1 is satisfied to accomplish a subgoal g1 of g."
36,36.2,(36.6),(forall (e a1 a2 g s) (iff (competitivePlanning e a1 a2 g s) (exists (e1 e2 s1 s2) (and (planning e1 a1 g s1)(planning e2 a2 g s2) (and' e e1 e2) (forall (p) (iff (inSeq p s) (or (and (competitivePlan p a1 a2 g) (inSeq p s1)) (and (competitivePlan p a2 a1 g) (inSeq p s2))))))))),Two agents can also be opposed in their efforts. Competitive planning is where two agents work toward goals that cannot both occur at once.
36,36.2,(36.7),(forall (e a1 a2 g s) (iff (adversarialPlanning e a1 a2 g s) (exists (e1 e2 s1 s2 g1) (and (planning e1 a1 g1 s1)(planning e2 a2 g s2) (and' e e1 e2)(not' g1 g) (forall (p) (iff (inSeq p s) (or (and (adversarialPlan p a1 a2 g) (inSeq p s1)) (inSeq p s2)))))))),Adversarial planning is a stronger notion than competitive planning. It is when one agent a1 has as an active plan that another agent a2 not achieve a goal g.
36,36.2,(36.8),(forall (e a1 a2 g s) (iff (counterPlanning e a1 a2 g s) (exists (p2 g1) (and (plan p2 a2 g)(planning e a1 g1 s)(not' g1 g) (forall (p) (if (inSeq p s)(counterplan p p2 a1 a2 g))))))),"A stronger notion still is when active counterplanning goes on. Agent a1 tries to figure out a2's plan, and then tries to block its success. We can model this by saying that a1 strives to achieve (not g2) where g2 is a subgoal of a2's ultimate goal."
36,36.3,(36.9),(forall (g1 g2 a) (iff (counterfactualSubgoal g1 g2 a) (and (subgoal g1 g2)(not g1) (not (exists (e s) (planning e a g1 s)))))),A counterfactual subgoal is one that does not hold and the agent engages in no planning to make it hold.
36,36.3,(36.10),(forall (e a g1 g2 s) (iff (counterfactualPlanning e a g1 g2 s) (exists (p) (and (planning e a g2 s)(last p s)(subgoalIn g1 p) (counterfactualSubgoal g1 g2 a))))),Counterfactual planning occurs when there is a counterfactual subgoal in the last plan in the sequence of plans that the planning activity produces.
36,36.3,(36.11),(forall (e a1 a2 g1 g2 s) (iff (otherPersonPlanning e a1 a2 g1 g2 s) (and (counterfactualPlanning e a g1 g2 s) (exists (g3) (and (subst a2 g3 a1 g1)(Rexist g3)))))),"A particularly common kind of counterfactual planning is imagining what we would do if we were a different person. The expression (otherPersonPlanning e a1 a2 g1 g2 s) says that e is the activity of agent a1 planning as though property g1, a property of a1, were true, even though it isn't, where the corresponding property g3 of a2 is true."
37,37.1,(37.1),(forall (a g2 p1 p2) (iff (addGoalToPlan a g2 p1 p2) (exists (g1 g) (and (plan p1 a g1)(plan p2 a g)(and' g g1 g2) (subplan p1 p2))))),Agent a adds goal g2 to plan p1 to produce p2. This happens when p2 is a plan to achieve g2 in addition to p1's top-level goal g1 and when the original plan p1 is a subplan of the resulting plan p2.
37,37.1,(37.2),(forall (e1 a p) (iff (planningConstraint e a p) (exists (p2) (addGoalToPlan a e p p2)))),Eventuality e is a constraint on agent a's plan p exactly when a adds e as a goal to p. People often have hard constraints for plans that they would consider to be successful.
37,37.1,(37.3),(forall (a e1 e2 p) (if (prefer a e1 e2 p) (and (agent a)(eventuality e1)(eventuality e2) (exists (g) (plan p a g))))),"The predication (prefer a e1 e2 p) says agent a prefers eventuality e1 to eventuality e2 in carrying out plan p. Agent must be valid, both eventualities must exist, and there must be a plan."
37,37.1,(37.4),(forall (a e1 e2 p) (if (and (prefer a e1 e2 p)(etc)) (exists (e)(and (not' e e1)(imply e2 e))))),"The two eventualities should be incompatible; otherwise there will be no reason to have to choose one over the other. Defeasibly, e2 implies the negation e of e1."
37,37.1,(37.5),(forall (a e1 e2 p s1 s2 s3 s0) (if (and (prefer a e1 e2 p) (cwu s1 a)(eventualitiesOf s2 s1)(subgoalsOf s3 p) (union s0 s2 s3) (possible e1 s0)(etc)) (exists (p2) (addGoalToPlan a e1 p p2)))),"Preferences are 'goals in waiting.' If they do not contradict any real goals and they are otherwise possible, they will normally be adopted as goals. Agent a prefers e1 to e2 while executing plan p, and if e1 is possible given current world understanding and plan subgoals, then e1 will be incorporated as a goal."
37,37.1,(37.6),(forall (a e1 e2 p s1 s2 s3 s0) (if (and (prefer a e1 e2 p) (cwu s1 a)(eventualitiesOf s2 s1)(subgoalsOf s3 p) (union s0 s2 s3) (not (possible e1 s0)) (possible e2 s0)(etc)) (exists (p2) (addGoalToPlan a e2 p p2)))),"In normal usage, we will adopt the dispreferred element if the preferred one is not possible. Lines 1-4 are the same as in the previous axiom. Line 5 says e1 is not possible. Line 6 says that the dispreferred item e2 is possible. Line 8 says that in these circumstances, e2 will be incorporated into the plan."
37,37.1,(37.7),(forall (a e1 e2 p s1 s2 s3 s0 e3 t t1) (if (and (prefer a e1 e2 p) (cwu0 s1 a t)(Now t) (eventualitiesOf s2 s1)(subgoalsOf s3 p) (union s0 s2 s3) (possible e1 s0)(possible e2 s0) (or' e3 e1 e2)(atTime e3 t1)(before t t1)(etc)) (exists (p2 e4) (or (and (not (badFor e1 a))(addGoalToPlan a e1 p p2)) (and (badFor e1 a)(not' e4 e2)(addGoalToPlan a e4 p p2)))))),"We can strengthen the preference axiom in forced choice situations where both options are possible and one is going to occur anyway. If the preferred option is bad for you, then the goal you add is the negation of the dispreferred option. Line 6 says both options are possible. Line 7 says that one of them is going to happen anyway. In line 9 we add the preferred option if it is not bad for us. If it is, then in line 10 we add the negation of the dispreferred option."
37,37.1,(37.8),(forall (a e1 e2 p) (if (prefer a e1 e2 p)(not (prefer a e2 e1 p)))),"Preference is a partial ordering. Hence, it is antisymmetric."
37,37.1,(37.9),(forall (a e1 e2 e3 p) (if (and (prefer a e1 e2 p)(prefer a e2 e3 p)) (prefer a e1 e3 p))),Preference is also transitive.
37,37.1,(37.10),(forall (a e1 p) (iff (prefer0 a e1 p) (exists (e2) (and (not' e2 e1)(prefer a e1 e2 p))))),It will be convenient to have a predicate meaning that the agent prefers a situation e1 to its absence.
37,37.1,(37.11),(forall (e1 e2 a p) (if (and (moreValuable e1 e2 a)(etc)) (prefer a e1 e2 p))),"If e1 is more valuable than e2, then defeasibly a will prefer e1 to e2."
37,37.1,(37.12),(forall (e1e2 a p) (if (and (moreCostly e1 e2 a)(etc)) (prefer a e2 e1 p))),"If e1 is more costly than e2, then defeasibly a will prefer e2 to e1."
37,37.2,(37.13),(forall (a e p) (iff (preferAvoidAction a e p) (exists (e1) (and (not' e1 e)(prefer0 a e1 p))))),An agent a prefers to avoid action e in plan p exactly when a prefers to include its negation in the plan. This captures phrases like 'try to avoid' and 'only as a last resort.'
37,37.3,(37.14),(forall (a e p) (iff (preferEnableEvent a e p) (forall (e1) (if (enable e1 e)(prefer0 a e1 p))))),"One can prefer to work toward plans that enable an event to occur, as in 'set the stage for.'"
37,37.3,(37.15),(forall (a e p) (iff (preferBlockEvent a e p) (forall (e1) (if (prevent e1 e)(prefer0 a e1 p))))),"One can prefer to work toward plans that prevent an event from occurring, as in 'safeguard against.'"
37,37.3,(37.16),(forall (a e p) (iff (preferEnableThreat a e p) (and (preferEnableEvent a e p)(threat0 e a)))),"One can prefer to work toward plans that ensure a threat will actually occur, as in 'set one up to fail.'"
37,37.3,(37.17),(forall (a e p) (iff (preferBlockThreat a e p) (and (preferBlockEvent a e p)(threat0 e a)))),"One can prefer to work toward plans that ensure a threat will not actually occur, as in 'take preemptive action' and 'alleviate the risk.'"
37,37.3,(37.18),(forall (a e p) (iff (preferEnableTransfer a e p) (exists (x y z) (and (move' e x y z)(physobj x) (preferEnableEvent a e p))))),"One can prefer to work toward plans that allow a physical transfer through space, as in 'clear the path' and 'remove obstacles.'"
37,37.3,(37.19),(forall (a e p) (iff (preferBlockTransfer a e p) (exists (x y z) (and (move' e x y z)(physobj x) (preferBlockEvent a e p))))),"One can prefer to work toward plans that prevent a physical transfer through space, as in 'obstruct' and 'prevent from leaving.'"
37,37.3,(37.20),(forall (a b e p) (iff (preferEnableAgency a b e p) (and (agentOf b e)(preferEnableEvent a e p)))),"One can prefer to work toward plans that enable a different agent to act, as in 'make it possible for.'"
37,37.3,(37.21),(forall (a b e p) (iff (preferBlockAgency a b e p) (and (agentOf b e)(preferBlockEvent a e p)))),"One can prefer to work toward plans that block a different agent from acting, as in 'paralyze' and 'keep one on a short leash.'"
37,37.3,(37.22),(forall (a b e p) (iff (preferEnableOtherAgentGoalSatisfaction a b e p) (exists (g1) (and (goal g1 b)(enable e g1) (preferEnableEvent a e p))))),"One can prefer to work toward plans that enable others to achieve their goals, as in 'make someone happy.'"
37,37.3,(37.23),(forall (a b e p) (iff (preferBlockOtherAgentGoalSatisfaction a b e p) (exists (g1) (and (goal g1 b)(enable e g1) (preferBlockEvent a e p))))),"One can prefer to work toward plans that prevent others from achieving their goals, as in 'thwart' and 'derail.'"
37,37.4,(37.24),(forall (a v p) (iff (preferMinimizeValue a v p) (forall (e1 e2 x1 x2 s) (if (and (at' e1 v x1 s)(at' e2 v x2 s) (lts x1 x2 s)) (prefer a e1 e2 p))))),"One can prefer to try to minimize a value that is part of a plan, as illustrated in 'less is more,' 'be conservative,' and 'frugal.' Lines 4-7 specify conditions e1 and e2, saying that e1 is the eventuality of some value v being at point x1 on some scale s, e2 is the eventuality of v being at x2 on s, where x1 is less than x2 on the scale. Under these circumstances, agent a will prefer e1 to e2."
37,37.4,(37.25),(forall (a v p) (iff (preferMaximizeValue a v p) (forall (e1 e2 x1 x2 s) (if (and (at' e1 v x1 s)(at' e2 v x2 s) (lts x2 x1 s)) (prefer a e1 e2 p))))),"One can prefer to try to maximize a value that is part of a plan, as illustrated in the phrases 'bigger is better,' 'as much as possible,' and 'be liberal with.' This definition is the same as the previous one, except x1 and x2 are reversed in line 5."
37,37.4,(37.26),(forall (a p) (iff (preferMinimizeDuration a p) (exists (d u) (and (durationOf d p u) (preferMinimizeValue a d p))))),"Among the values one can seek to minimize or maximize are the durations of activities and events. Thus, one can prefer to try to minimize the overall duration of a plan, as in 'time is of the essence' and 'not waste time.'"
37,37.4,(37.27),(forall (a p) (iff (preferMaximizeDuration a p) (exists (d u) (and (durationOf d p u) (preferMaximizeValue a d p))))),"One can prefer to try to maximize the overall duration of a plan, as in 'prolong' and 'make it last.'"
37,37.5,(37.28),(forall (a x p) (iff (locateThing a x p) (exists (e p2 e1 g) (and (plan p a g)(addGoalToPlan a e p p2)(arg* x e) (imply e e1)(wh' e1 x g))))),"The expression (locateThing a x p) means that agent a instantiates unspecified entity x in plan p. Line 4 says that p is a plan for achieving g and agent a adds to that plan as a constraint a property e of x. Line 5 says that e implies a property e1 that enables x to be identified. Sometimes unspecified things must be instantiated for plans to be complete, as in 'locate,' 'search for,' and 'get one's hands on.'"
37,37.5,(37.29),(forall (a x p) (iff (locateAgent a x p) (and (person x)(locateThing a x p)))),"Sometimes unspecified people must be instantiated for plans to be complete, as in 'find someone to' and 'fill the job.'"
37,37.5,(37.30),(forall (a x p) (iff (locateLocation a x p) (exists (y s e) (and (atLoc y x s)(arg* y e)(subgoalIn e p) (locateThing a x p))))),"Sometimes unspecified locations must be instantiated for plans to be complete, as in 'find a place where.' There is no such thing as a location per se. Something is the location of something else, indicated by the atLoc relation. Thus, to identify a location crucial to the execution of a plan is to recognize or decide upon the location of an entity that is an argument of or is involved in one of the subgoals of the plan."
37,37.6,(37.31),(forall (a p) (iff (preferMaintainPlanProgress a p) (forall (e e1) (if (and (subgoalIn e p)(changeFrom' e1 e)) (exists (e2) (and (not' e2 e1)(prefer0 a e2 p))))))),"One can (and generally does) prefer to work toward plans that maintain the progress that has already been achieved. This is illustrated in the phrases 'avoid backpedaling' and 'keep moving forward.' That is, if e is a subgoal of the plan, agent a prefers not to change it. In cases where a previously achieved state must be undone for the plan to succeed, the preference will be overridden."
38,38.1,(38.1),(forall (e a g s) (iff (planningByInstantiating e a g s) (and (planning e a g s) (forall (p1 p2) (if (successiveElts p1 p2 s) (planInstance p2 p1)))))),"The only way we get from one plan to the next is instantiating entity and eventuality types in the earlier plan. This kind of planning is seen when we engage in near habitual action of giving a waiter our order in a restaurant, where we are taking the general restaurant-ordering script and instantiating it with this waiter and the items on this menu."
38,38.1,(38.2),(forall (e a g s) (iff (planningFromScratch e a g s) (and (planning e a g s) (forall (e0 p1 p2 s1 s2 r1 r2) (if (and (successiveElts' e0 p1 p2 s) (eventualitiesOf s1 p1) (eventualitiesOf s2 p2) (relationsOf r1 p1)(relationsOf r2 p2)) (exists (e1 e2 r r0 e3) (and (member e1 s1)(addElt s2 s1 e2) (causallyInvolved' r e2 e1) (subgoal' r0 e2 e1) (addElt r2 r1 r0)(believe' e3 a r) (cause e3 e0)))))))),"Planning from scratch where we are not instantiating a well-worn script. Rather we are mining our knowledge of what causes what and using basic planning axioms to achieve our goal. p2 is constructed from p1 by adding a subgoal e2 to p1, on the basis of a belief e3 in r that e2 is causally involved in e1."
38,38.1,(38.3),(forall (e a g s) (iff (singleGoalPlanning e a g s) (and (planning e a g s) (not (exists (g1 g2) (and' g g1 g2)))))),People can plan to achieve single goals.
38,38.1,(38.4),(forall (e a g s) (iff (multipleGoalPlanning e a g s) (and (planning e a g s) (exists (g1 g2) (and' g g1 g2))))),People can plan to achieve multiple goals.
38,38.2,(38.5),(forall (a e) (iff (suspendPlanning a e) (exists (g s t) (and (suspend a e t)(Now t)(planning e a g s))))),"People can suspend a planning process, as seen in the expressions 'hold off on the details' and 'put aside the plan.'"
38,38.2,(38.6),(forall (a e) (iff (resumePlanning a e) (exists (g s t) (and (resume a e t)(Now t)(planning e a g s))))),"People can resume working on a plan after they have suspended the planning process, as seen in the expressions 'finish the plan' and 'take up the plan again.'"
38,38.2,(38.7),(forall (a e) (iff (abortPlanning a e) (exists (g s t) (and (abort a e t)(Now t)(planning e a g s))))),"People can decide to abandon a planning process, as in 'stop planning' and 'give up on the plan.'"
38,38.2,(38.8),(forall (e1 a p g) (iff (replan' e1 a p g) (exists (e s t)(and (planning e a g s)(restart' e1 a e t)(Now t))))),"The planning process can be restarted, as seen in 'start from scratch,' 'back to the drawing board' and 'try a different approach.'"
38,38.2,(38.9),(forall (e1 a p1 p g) (iff (replanSubplan' e1 a p1 p g) (exists (g1) (and (replan' e1 a p1 g1)(plan p a g)(plan p1 a g1) (subgoal g1 g))))),"Since a subplan of a plan, to achieve a subgoal, is itself a plan, this can also be restarted. We see this in the phrases 'patch the plan,' 'fix part of the plan,' and 'rework a step.'"
38,38.3,(38.10),(forall (e a g s p1 p2) (if (and (planning e a g s)(successiveElts p1 p2 s)) (iff (specifyPlan e a g s p1 p2) (planInstancePlus p2 p1)))),"During planning, people can add detail to a plan in development, as seen in the expressions 'flesh out the details' and 'be specific about the plan.' For example, we may have a plan to eat at McDonald's. When we walk into McDonald's, we make our plan more specific by choosing a specific register."
38,38.3,(38.11),(forall (e a g s p1 p2) (if (and (planning e a g s)(successiveElts p1 p2 s)) (iff (addSubplan e a g s p1 p2) (exists (s1 s2 s3 g1 p3) (and (eventualitiesOf s1 p1)(eventualitiesOf s2 p2) (setdiff s3 s2 s1)(subgoalIn g1 p1) (plan p3 a g1)(eventualitiesOf s3 p3) (forall (g2) (if (member g2 s3)(subgoalIn g2 p3)))))))),"People can add a subplan to a plan, as in the expressions 'add a step,' 'addendum to the plan,' and 'put a part in the plan.' Agent a has moved from plan p1 to the next plan p2 by adding a subplan (p3) to achieve a subgoal (g1) of g."
38,38.3,(38.12),(forall (e a g s p1 p2) (if (and (planning e a g s)(successiveElts p1 p2 s)) (iff (removeSubplan e a g s p1 p2) (exists (s1 s2 s3 g1 p3) (and (eventualitiesOf s1 p1)(eventualitiesOf s2 p2) (setdiff s3 s1 s2)(subgoalIn g1 p2) (plan p3 a g1)(eventualitiesOf s3 p3) (forall (g2) (if (member g2 s3) (subgoalIn g2 p3)))))))),"During planning people can remove a subplan from the plan in development, as in the expressions 'remove a step' and 'simplify the plan.' This definition is like that for addSubplan, but with the arguments of setdiff reversed."
38,38.3,(38.13),(forall (e a g s p1 p2) (if (and (planning e a g s)(successiveElts p1 p2 s)) (iff (identifyPrecondition e a g s p1 p2) (exists (s1 s2 s3 g1 g2) (and (eventualitiesOf s1 p1)(eventualitiesOf s2 p2) (setdiff s3 s2 s1)(member g1 s1)(member g2 s3) (enable g2 g1)))))),"During planning, people can notice that the goal or a subgoal has a precondition, as in 'realize we first need to' and 'see a necessary step.' g2 is the new subgoal of g1 that was realized to be a precondition of g1 in p1."
38,38.3,(38.14),(forall (e a g s p1 p2) (if (and (planning e a g s)(successiveElts p1 p2 s)) (iff (selectSubplan e a g s p1 p2) (exists (s1 s2 e0 e1 e2) (and (eventualitiesOf s1 p1)(eventualitiesOf s2 p2) (or' e0 e1 e2) (or (replaceElt s2 s1 e0 e1) (replaceElt s2 s1 e0 e2))))))),"During planning, people often make selections among alternative subplans. That is, they replace a disjunction with one of its disjuncts. This is seen in the expressions 'choose a step' and 'select an action.' e0 is a disjunction of eventualities e1 and e2, and the difference between successive plans is that e0 is replaced by e1 or e2."
38,38.3,(38.15),(forall (e a g s p1 p2) (if (and (planning e a g s)(successiveElts p1 p2 s)) (iff (orderSubplans e a g s p1 p2) (exists (s1 s2 s3 g1 g2 e0) (and (eventualitiesOf s1 p1)(eventualitiesOf s2 p2) (setdiff s3 s2 s1)(member g1 s1)(member g2 s1) (before' e0 g1 g2)(member e0 s3)))))),"People often decide during planning what order they should achieve the subgoals in, as seen in the expressions 'first things first' and 'figure out the order.' This amounts to adding temporal detail, that is, a before relation. g1 and g2 are subgoals in plan p1 and what is new in plan p2 is the before relation between them."
38,38.4,(38.16),(forall (x a g) (iff (obstacle x a g) (exists (e e1) (and (or (cause x e)(and (arg* x e1)(cause e1 e))) (not' e g)(goal g a))))),"An obstacle is something that causes a goal not to occur. Other words for this are 'barrier,' 'impediment,' and 'impasse.' Entity x is an obstacle to agent a's achieving goal g. It can either be x itself or one of its properties e1 that can cause the goal not to occur."
38,38.4,(38.17),(forall (a x g) (iff (overcomeObstacle a x g) (exists (e0 e) (and (obstacle' e0 x a g)(cause a e)(not' e e0) (enable e g))))),"To overcome an obstacle is to cause it not to occur in a way that is consistent with the goal being achieved. Essentially, the elimination of an obstacle is the satisfaction of a precondition. The agent causes the obstacle not to exist as an obstacle."
38,38.4,(38.18),(forall (x a p g) (iff (planningProblem x a p g) (exists (e) (and (obstacle x a g)(overcomeObstacle' e a x g) (plan p a g)(subgoalIn e p))))),"People see these obstacles as problems that must be overcome in their plans. The concept is exemplified in language in 'challenge,' 'dilemma,' 'sticky situation,' and 'something must be done.'"
38,38.4,(38.19),(forall (e p a x g e1) (if (and (plan p a g)(planningProblem x a p g) (overcomeObstacle' e a x g)) (planningOption e p))),One kind of planning option is the overcoming of an obstacle.
38,38.5,(38.20),(forall (p a g) (iff (candidatePlan p a g) (exists (e s c t) (and (planning e a g s)(member p s)(inFocus p a) (executable p a c t)(Now t))))),"A candidate plan is a plan that the agent has in focus and is executable now with respect to a set c of constraints. An agent may construct several possible plans to achieve a goal, and then must select among these candidate plans for a plan to execute."
38,38.5,(38.21),(forall (a p g) (iff (successfulPlanning e a p g) (exists (e1 s) (and (planning e a g s)(cause e e1) (candidatePlan' e1 p a g))))),Agents can successfully construct a plan to achieve a goal.
38,38.5,(38.22),(forall (a p g) (iff (planningFailure e a g) (and (planning e a g s) (not (exists (p) (and (member p s)(candidatePlan p a g))))))),Agents can fail to construct a plan to achieve a goal.
38,38.5,(38.23),(forall (a p g d) (iff (assessPlan a p g d) (exists (e e1) (and (cause' e p g)(gbel' e1 a e d)(changeTo e1))))),Agents can assess candidate plans to determine which are most likely to achieve the goal. To assess a plan is to come to a belief about how certain the plan is to achieve the goal. Agent a assesses plan p for achieving goal g and has degree of belief d in its success.
38,38.5,(38.24),(forall (a p g) (iff (selectCandidatePlan a p g) (exists (d0) (and (assessPlan a p g d0) (forall (p1 d1) (if (and (candidatePlan p1 a g) (assessPlan a p1 g d1)) (leq d1 d0))) (decideTo a p))))),"When they behave rationally, agents select from among the candidate plans the plan that is assessed to be the most likely to succeed."
38,38.5,(38.25),(forall (a p1 g) (if (selectCandidatePlan a p1 g) (exists (p2) (schedulePlan a p1 p2)))),"A plan that is selected is scheduled, that is, is assigned a time to be executed. Agent a adds a schedule to plan p1, yielding plan p2."
38,38.5,(38.26),(forall (p p1 a g) (if (and (candidatePlan p a g)(candidatePlan p1 a g)(nequal p p1) (decideTo a p)) (not (decideTo a p1)))),Candidate plans that are not selected will not be executed.
39,39.1,(39.1),(forall (a p1 g1 p2 g2) (iff (tweak a p1 g1 p2 g2) (exists (e1 e2 s1 s2 e3 e4) (and (plan p1 a g1)(plan p2 a g2) (change e3 e4) (ecs' e3 p1 a)(ecs' e4 p2 a) (subgoalsOf s1 p1)(subgoalsOf s2 p2) (replaceElt s2 s1 e1 e2) (similar g1 g2)(similar e1 e2))))),"Agent a tweaks plan p1 for achieving goal g1 into plan p2 for achieving goal g2 by replacing one step e1 in p1 with a similar step e2, where the goals are similar. For example, going to a restaurant where you pay before eating rather than after - you retrieve your standard restaurant plan and tweak it by changing the order of events."
39,39.1,(39.2),(forall (e a p1 g1 p2 g2 s) (iff (planAdaptation e a p1 g1 p2 g2 s) (and (planning e a g2 s)(plan p1 a g1)(plan p2 a g2) (first p1 s)(last p2 s) (forall (p3 p4) (if (successiveElts p3 p4 s) (exists (g3 g4) (tweak a p3 g3 p4 g4))))))),"Plan adaptation is a planning activity in which every step is a tweak. Activity e is agent a adapting plan p1 for achieving g1 into plan p2 for achieving g2, producing a sequence of partial plans s that starts with p1 and ends with p2."
39,39.1,(39.3),(forall (e a p1) (iff (retrievePlan' e a p1) (exists (g1) (and (plan p1 a g1)(retrieve' e a p1))))),"The first step of plan adaptation is retrieving the source plan from memory. Phrases signaling plan retrieval include 'remember how to,' 'consider an approach,' 'recall a technique,' and 'pull from the playbook.'"
39,39.1,(39.4),(forall (e a p1 g1 p2 g2 s) (iff (modifyCurrentlyExecutingPlan e a p1 g1 p2 g2 s) (exists (p) (and (planAdaptation e a p1 g1 p2 g2 s)(subgoalIn g1 p) (thePlan p a))))),The plan the agent adapts could be the plan currently being executed. thePlan is the plan currently being executed (from Chapter 31).
39,39.2,(39.5),(forall (e a p1 g1 p2 g2 s) (iff (futurePlanModification e a p1 g1 p2 g2 s) (exists (p) (and (planAdaptation e a p1 g1 p2 g2 s) (not (subgoalIn g1 p)) (thePlan p a))))),The plan the agent is adapting could be a plan that has not yet begun to be executed. The goal that is the starting point of the adaptation is not a subgoal in the plan currently being executed.
39,39.2,(39.6),(forall (a p1 g1 p2 g2) (iff (modifyPlanValue a v p1 g1 p2 g2) (exists (e1 e2 s1 s2 e3 e4) (and (plan p1 a g1)(plan p2 a g2) (change e3 e4) (ecs' e3 p1 a)(ecs' e4 p2 a) (subgoalsOf s1 p1)(subgoalsOf s2 p2) (replaceElt s2 s1 e1 e2) (exists (x1 x2 s) (at' e1 v x1 s)(at' e2 v x2 s)) (similar g1 g2)(similar e1 e2))))),"Retrieved plans can be modified by changing values in a plan, as seen in 'use more,' 'do it with more,' 'try increasing,' and 'correct for.' This means e1 and e2 are at relations of the same external entity v being at different points x1 and x2 in some system s."
39,39.2,(39.7),(forall (a1 p1 g1 a p2 g2) (iff (modifyPlanAgency a1 p1 g1 a p2 g2) (exists (e1 e2 s1 s2 e3 e4) (and (plan p1 a1 g1)(plan p2 a g2) (change e3 e4) (ecs' e3 p1 a)(ecs' e4 p2 a) (subgoalsOf s1 p1)(subgoalsOf s2 p2) (subst a s2 a1 s1))))),"Retrieved plans can be modified by changing the agent who executes a plan, as seen in 'stand in for,' 'play the role of,' 'fill in for,' 'take over for,' and 'what would Jesus do?' This extends tweaking from own previous plans to plans of others. Agent a1 in plan p1 is changed to a to yield plan p2."
39,39.3,(39.8),(forall (c e) (iff (adaptationCost c e) (exists (a p1 g1 p2 g2 s) (and (planAdaptation e a p1 g1 p2 g2 s)(card c s))))),"One measure of difficulty is the number of substitutions needed in plan p1 to arrive at p2. By the theory of envisioning, a substitution is one step in the envisioning process. People judge adaptation difficulty as illustrated by 'difficult to apply,' 'complex application of,' and 'straightforward modification.'"
39,39.3,(39.9),(forall (e a p1 g1 p2 g2 s) (iff (successfulAdaptation e a p1 g1 p2 g2 s) (exists (c t) (and (planAdaptation e a p1 g1 p2 g2 s)(succeed a e) (executable p2 a c t)(cwu c a)(Now t))))),The process of plan adaptation is successful when a new plan is created. Seen in 'successful application of' and 'thoroughly reworked the plan.' A successful adaptation is one where the agent succeeds in finding a final plan that is executable by the agent.
39,39.3,(39.10),(forall (e a p1 g1 g2 s) (iff (failedAdaptation e a p1 g1 g2 s) (not (exists (p2) (and (planAdaptation e a p1 g1 p2 g2 s) (succeed a e)(executable p2 a c t)(cwu c a)(Now t)))))),"The process of plan adaptation can fail when a new plan cannot be created from an old one. The expressions 'not applicable here,' 'unsalvageable plan,' and 'not serve one's purposes' are about this concept."
40,40.1,(40.1),(forall (x) (if (artifact x) (and (compositeEntity x) (exists (f p a1 a2) (and (functionality0 f x)(plan p a1 f)(agent a1) (planFor p x) (cause a2 e0)(Rexist' e0 x)(agent a2) (forall (y) (if (componentOf y x) (exists (e1) (and (subgoalIn e1 p)(arg* y e1))))) (forall (r) (if (relationOf r x) (subgoalIn r p)))))))),"Artifacts are composite entities with functionality. One can find a plan such that the components of the artifact are arguments of subgoals in the plan, and the relations among components are subgoals in the plan. There is an artificer - agents who designed the artifact and agents who brought it into existence. Coffee cup example: components (cup, handle) and relations (attached) occur in the plan for moving coffee."
40,40.1,(40.2),(forall (x) (iff (artifact1 x)(and (artifact x)(physobj x)))),"A more specialized predicate for physical artifacts. Usually when we talk about artifacts, we have in mind physical objects, but as defined here, an artifact can be a physical object, an organization, a theory, or any other kind of human-made functional composite entity."
40,40.1,(40.3),(forall (e1 a x) (iff (intendedUse e1 x a) (exists (p e) (and (planFor p x)(subgoalIn e p)(instance e1 e) (agentOf a e1)(arg* x e1))))),"An artifact can be used as intended. A broom can be used to sweep the kitchen floor (intended use) or to retrieve something behind the refrigerator (unintended use). Agent a is the agent of e1, e1 somehow involves x, and e1 is an instance of a subgoal e in the plan p for x."
40,40.1,(40.4),(forall (e1 a x) (iff (unintendedUse e1 x a) (and (agentOf a e1)(arg* x e1)(not (intendedUse e1 x a))))),"An unintended use e1 happens when a is the agent of e1 and x is somehow involved in e1, but e1 is not the intended use."
40,40.2,(40.5),(forall (x) (iff (design x) (exists (f p a) (and (pattern x) (functionality0 f x)(plan p a f)(planFor p x) (forall (x1) (if (instance x1 x) (exists (f1 p1) (and (artifact x1) (functionality0 f1 x1)(instance f1 f) (planFor p1 x1)(instance p1 p))))))))),"A design is a pattern whose instances are artifacts, in the broad sense. We can design a teapot, a logo, a font, or a government. Two principal features: a design is intended to have instances and that a design and its instances are functional composite entities whose structure reflects a plan to realize the functionality. The plan behind the artifact is an instance of the plan for the design."
40,40.2,(40.6),(forall (s e) (iff (notAchieve s e) (and (Rexist s)(not e)))),"We first define what it means for a set s of eventualities to fail to achieve a goal e. The eventualities in s happen or hold, but e does not result from that."
40,40.2,(40.7),(forall (s p) (iff (terminalSubgoalsOf s p) (exists (a g) (and (plan p a g) (forall (g1) (iff (member g1 s) (and (subgoalIn g1 p) (not (exists (g2) (and (subgoalIn g2 p) (subgoal g2 g1)))))))))))),Let the terminal subgoals of a plan be those subgoals that have no subgoals of their own. The set s is the set of subgoals g1 in the plan p that have no subgoals g2 of their own in p.
40,40.2,(40.8),(forall (x) (iff (flawedDesign x) (forall (p p1 a e1 s) (if (and (planFor p x)(instance p1 p)(plan p1 a e1) (terminalSubgoalsOf s p1)) (notAchieve s e1))))),"A flawed design is one in which for every instance, the set of terminal subgoals in the plan do not achieve the top-level goal. This is a strong notion of 'flawed design,' in which all instances of the design have to fail to achieve the goal. A weaker notion would allow for some random instances to happen to achieve the top-level goal, but the design does not reliably produce instances that will achieve the goal."
40,40.3,(40.9),(forall (e a x s) (iff (designing e a x s) (exists (f) (and (planning e a f s)(functionality0 f x)(design x) (forall (p) (if (inSeq p s)(planFor p x))))))),"The activity of designing is a planning activity where all the plans in the sequence of plans are plans for a design. Each plan p in the sequence is a plan for the design. Reference to designing is common in language: 'think about the design,' 'working out the layout,' 'imagining the structure,' 'configure,' and 'arrange.'"
40,40.3,(40.10),(forall (e x) (iff (designConstraint e x) (exists (f) (and (design x)(functionality0 f x)(member e f))))),"An artifact often has multiple intended uses. In these cases, the functionality of the artifact is a set or conjunction of what might be called 'design constraints.' For example, when one designs an office layout, it is usually with respect to typical office goals as the design constraints."
40,40.3,(40.11),(forall (e x) (iff (designAdaptation e a x) (exists (s p1 g1 p2 g2) (and (designing e a x s) (planAdaptation e a p1 g1 p2 g2 s))))),"We often talk about design adaptation, for example, 'customize the design' and 'design inspired by.' To adapt a design is to engage in a designing activity that is also a plan adaptation."
40,40.3,(40.12),(forall (e a) (iff (designFailure e a) (exists (x s g) (and (designing e a x s)(functionality0 g x) (planningFailure e a g))))),"A design failure is a designing activity that is a planning failure. e is the designing activity, a is the agent doing the designing, x is the (nonexistent) design, g is the goal or functionality of the design, and s is the set of plans the agent considers in the course of the planning activity."
40,40.3,(40.13),(forall (x x1 x2) (if (and (design x)(incompleteInstance x1 x) (incompleteInstance x2 x) (forall (p p2) (if (and (propOrRelOf p x)(patternInstance p2 p) (propOrRelOf p2 x2)) (exists (p1) (and (patternInstance p1 p)(propOrRelOf p1 x1))))) (exists (p1 p) (and (propOrRelOf p x)(patternInstance p1 p) (propOrRelOf p1 x1) (not (exists (p2) (and (patternInstance p2 p) (propOrRelOf p2 x2))))))) (moreAdherentToDesign x1 x2 x))),"For an entity to instantiate a design is for that entity to instantiate all the properties and relations in the design. It is possible for an entity to be a partial instantiation of a design by instantiating only some of the properties and relations. There is a partial ordering defined by moreAdherentToDesign meaning roughly that more of the relations and properties are instantiated. If entity x1 instantiates all the design properties and relations that entity x2 does and more, then it is more adherent to the design."
41,41.1,(41.1),(forall (e0 a s e) (iff (decision e0 a s e) (exists (e1 e2 e3) (and (choiceEnumeration e1 a s)(deliberation e2 a s) (selection e3 a e s)(member e s) (before e1 e3)(before e2 e3)(subevent e1 e0) (subevent e2 e0)(subevent e3 e0))))),"Decision-making process follows three steps: 1. Identify choices ('think of the possibilities') 2. Deliberate about choices ('think about the possibilities') 3. Select one choice ('settle on'). Restaurant example: look at menu to identify choices, think about them, then select one. Choice enumeration e1 and deliberation e2 must occur before selection e3, but e1 and e2 can be interleaved."
41,41.1,(41.2),(forall (e1 a s) (iff (choiceEnumeration e1 a s) (exists (e5 e) (and (changeTo' e1 e4)(thinkAbout' e4 a s) (believe a e5)(decideTo' e5 a e)(member e s) (before e4 e5))))),"Choice enumeration is the process of identifying a set of options. It's a change to a situation where agent is thinking about the set of options, and agent believes he will decide on some member e of s after thinking about s. Coming to think of options or have them in focus, recognizing that one must be chosen."
41,41.1,(41.3),(forall (e2 a s) (iff (deliberation e2 a s) (exists (p g e) (and (plan p a g)(selection g a e s) (forall (e4) (if (member e4 s) (exists (e5) (and (thinkAbout' e5 a e4) (subgoalIn e5 p))))))))),Deliberation is thinking about the options with the goal of selecting one. There is a plan p whose top-level goal is to select an option and thinking about each option constitutes a subgoal in the plan. The thinking is in service of the selection.
41,41.1,(41.4),(forall (e3 a e s) (iff (selection e3 a e s) (and (decideTo' e3 a e)(member e s) (exists (e2) (and (deliberation e2 a s)(before e2 e3)))))),"Selection is the third part of making a decision - to select one option from the choice set, after deliberating. The act by agent a to select option e from set s amounts to deciding to do e after deliberating about the set s of options."
41,41.1,(41.5),(forall (e e3 e4 a s) (if (and (selection e a e3 s)(member e3 s)(member e4 s) (nequal e3 e4)(etc)) (preferGoal a e3 e4))),"If one eventuality e3 is selected and another e4 is not, then we should expect the agent a to prefer e3 over e4 as goals to achieve (or actions to perform). This is a defeasible rule with (etc) condition."
41,41.1,(41.6),(forall (e a e3 e4 s) (iff (decisionRevision e a e3 e4 s) (exists (e1 e2) (and (decision e1 a s e3)(decision e2 a s e4) (change' e e1 e2))))),"A person may change his or her mind after making a decision ('renege on,' 'go back on'). A decision revision is a decision to choose an alternative once a decision has already been made. A change from decision e1 selecting e3 to decision e2 selecting e4."
41,41.1,(41.7),(forall (e0 e1) (iff (suspendDecision e0 e1) (exists (a s e e3 t) (and (decision e1 a s e)(suspend' e0 a e1 t) (selection e3 a e s)(subevent e3 e1) (before t e3))))),People can suspend a decision before they make a selection ('sleep on it'). The suspend action e0 applied to decision-making process e1 takes place before the selection subevent e3 of e1.
41,41.1,(41.8),(forall (e0 e1) (iff (resumeDecision e0 e1) (exists (a s e e2 t) (and (decision e1 a s e)(resume' e0 a e1 t) (suspendDecision e2 e1)(before e2 t))))),"People can resume decision-making processes that they earlier suspended ('finish deciding'). The resume action e0 applied to decision-making process e1, where there was a suspend-decision action e2 before the resumption."
41,41.1,(41.9),(forall (e1 e2) (iff (linkedDecisions e1 e2) (exists (a s1 s2 e3 e4) (and (decision e1 a s1 e3)(decision e2 a s2 e4) (causallyInvolved e3 e2))))),"Some sets of decisions are interrelated, in that the options chosen have a causal influence on the other decisions. Decision processes e1 and e2 are causally linked when the choice e3 from decision e1 is causally involved in decision process e2."
41,41.1,(41.10),(forall (s) (iff (decisionSeries s e1) (exists (e2) (or (and (linkedDecisions e1 e2)(doubleton s e1 e2)) (exists (s1) (and (linkedDecisions e1 e2) (decisionSeries s1 e2) (addElt s e1 s1))))))),Linked decisions can constitute a series of decisions. A pair of linked decisions is a decision series. Adding a decision at the beginning of a decision series results in a decision series.
41,41.2,(41.11),(forall (s e) (iff (choiceSet s e) (exists (a e1) (decision e a s e1)))),For any decision there are a number of possible choices ('range of candidates'). This is the third argument of the predicate decision - the set s of alternatives considered.
41,41.2,(41.12),(forall (e1 s) (iff (possibleChoice e1 s) (exists (e) (and (choiceSet s e)(member e1 s))))),"Any member in the choice set is a possible choice ('option,' 'prospect,' 'alternative'). An element e1 of choice set s for some decision process e."
41,41.2,(41.13),(forall (e1 e2 s a e) (if (betterChoice e1 e2 s a e) (exists (e3) (and (decision e a s e3)(possibleChoice e1 e) (possibleChoice e2 e))))),"Constraints on the arguments of the predicate betterChoice. For e1 to be a better choice than e2, both must be possible choices in some decision process e by agent a with choice set s. The actual choice e3 may or may not equal e1 or e2."
41,41.2,(41.14),(forall (e1 e2 s a e e3 g1 g2) (if (and (decision e a s e3) (possibleChoice e1 e)(cause e1 g1)(goal g1 a) (possibleChoice e2 e)(nequal e1 e2) (forall (g2) (if (and (cause e2 g2)(goal g2 a)) (moreImportant g1 g2 a)))) (betterChoice e1 e2 s a e))),"A weak constraint capturing something like utility: that choice that leads to achieving a more important goal is a better choice. If e1 causes goal g1 and e2 causes goals that are all less important than g1, then e1 is a better choice than e2."
41,41.2,(41.15),(forall (e0 e1 e a) (iff (choiceCharacteristic e0 e1 e a) (exists (s e3) (and (decision e a s e3)(possibleChoice e1 e) (arg* e1 e0)(goalRelevant e0 a))))),"Each possible choice has different characteristics relevant to the decision ('distinguishing features,' 'pros and cons'). These are properties of the possible choices that are relevant to the agent's goals. e0 is goal-relevant to agent a and involves choice e1."
41,41.2,(41.16),(forall (e1 s a e) (iff (bestChoice e1 s a e) (forall (e2) (if (possibleChoice e2 e) (or (equal e1 e2) (betterChoice e1 e2 s a e)))))),"After deliberation, one may be able to identify the best choice ('frontrunner,' 'cream of the crop,' 'leading candidate'). Choice e1 is best if for every other possible choice e2, either e1 equals e2 or e1 is a better choice than e2."
41,41.2,(41.17),(forall (e3 e a) (iff (selectedChoice e3 e a) (exists (s) (decision e a s e3)))),"After selecting, one of the possible choices becomes the selected choice ('one's pick,' 'one's decision'). Choice e3 is selected in decision process e by agent a."
41,41.2,(41.18),(forall (e2 e a) (iff (unselectedChoice e2 e a) (exists (s e3) (and (decision e a s e3)(nequal e2 e3))))),"After selecting, all but one of the possible choices become unselected choices ('not make the cut,' 'decided against'). Choice e2 is unselected when it's not equal to the selected choice e3 in decision e by agent a."
41,41.2,(41.19),(forall (e3 e1 a s) (iff (previouslySelectedChoice e3 e1 a s) (exists (e2 e4) (and (decision e1 a s e3)(decision e2 a s e4) (nequal e3 e4)(before e1 e2))))),"When given the same choice set another time, there is a previously selected choice. Item e3 was chosen by agent a out of set s in decision process e1, when there's also a later decision process e2 by agent a selecting a different e4 out of the same set s."
41,41.3,(41.20),(forall (e3 e s1) (iff (envisionChoiceConsequences e3 e s1) (exists (a s e0 e1 e2) (and (decision e a s e1)(and' e2 e0 e1)(cwu e0 a) (envisionFromTo' e3 a e2 s1))))),One way people come to decisions is by predicting the outcome of a particular choice ('look before you leap'). We add a possible choice to our current world understanding and envision from that to a set of consequences. Process e3 envisions consequences s1 of choice e1 in decision e.
41,41.3,(41.21),(forall (e2 e1 e) (iff (pro e2 e1 e) (exists (e3 s1 a s) (and (envisionChoiceConsequences e3 e s1) (decision e a s e1)(member e2 s1) (goodFor e2 a))))),One way people make decisions is by weighing pros and cons. A pro is an envisioned consequence that is good for the agent. Consequence e2 of choice e1 in decision process e is a pro when it's good for the agent making the decision.
41,41.3,(41.22),(forall (e2 e1 e) (iff (con e2 e1 e) (exists (e3 s1 a s) (and (envisionChoiceConsequences e3 e s1) (decision e a s e1)(member e2 s1) (badFor e2 a))))),A con is an envisioned consequence that is bad for the agent. Consequence e2 of choice e1 in decision process e is a con when it's bad for the agent making the decision.
41,41.3,(41.23),(forall (e e0 a s) (iff (costBenefitAnalysis e e0 a s) (exists (s1) (and (decision e0 a s e1)(subset s1 s)(not (null s1)) (forall (e3) (iff (member e3 e) (exists (e4 e5 e6) (and (thinkOf' e3 a e4)(member e6 s1) (or (pro' e4 e5 e6 e0) (con' e4 e5 e6 e0)))))))))),A cost-benefit analysis is the agent's considering each alternative in the choice set and determining if it results in a pro or a con. (A cost is a con; a benefit is a pro.) It's a set of envisionChoiceConsequences activities by the agent - a set of thinking-of actions about whether consequences are pros or cons.
41,41.3,(41.24),(forall (a e1 e2) (iff (chooseOver a e1 e2) (exists (e0 s) (and (decision e0 a s e1)(doubleton s e1 e2))))),An agent can choose one option over another. Agent a chooses option e1 over e2 if and only if there is a decision process e0 in which the choice set consists of e1 and e2 and e1 is the option that is chosen.
41,41.3,(41.25),(forall (e p e0) (iff (choiceCriterion e p e0) (exists (a s e1) (and (decision e0 a s e1) (forall (e2 e3) (if (and (member e2 s)(member e3 s) (subst e2 e4 p e)(Rexist e4) (subst e3 e5 p e)(not e5)) (chooseOver a e2 e3))))))),"People have criteria ('yardstick,' 'benchmark,' 'litmus test') by which they determine which possible choice is the best choice. e is choice criterion for options p in decision process e0; if e is true of e2 but not e3, then agent will choose e2 over e3."
41,41.3,(41.26),(forall (e) (iff (obviousDecision e) (exists (a s e1 e0 e3 e4 s1 s2) (and (decision e a s e1)(betterChoice' e0 e3 e4 s a e) (scaleDefinedBy s1 s e0)(Hi s2 s1)(inScale e1 s2) (forall (e2) (if (and (member e2 s)(nequal e2 e1)) (not (inScale e2 s2)))))))),"After deliberation, people find that some decisions are obvious ('no brainer,' 'clear cut'). One way to characterize this is that one option is a much better choice than any other. The best choice e1 is in the Hi region of the scale while no other choice is in the Hi region."
41,41.3,(41.27),(forall (e) (iff (uncertainDecision e) (exists (a s e1) (and (decision e a s e1) (not (exists (e2) (bestChoice e2 s a e))))))),"After deliberation, people may not have any certainty about the best choice. Decision e is uncertain when there is no identifiable best choice among the alternatives."
41,41.3,(41.28),(forall (e) (iff (insignificantDecision e) (exists (a s e1) (and (decision e a s e1) (forall (e2 e3) (if (and (member e2 s)(member e3 s)) (not (betterChoice e2 e3 s a e)))))))),"After deliberation, one may feel that it doesn't matter which choice is made ('inconsequential,' 'immaterial'). No option in the choice set s is a better choice than any other option."
41,41.4,(41.29),(forall (f e) (iff (decisionFactor f e) (exists (a s e1 e2) (and (decision e a s e1) (or (pro f e1 e) (and (con f e2 e)(member e2 s) (nequal e2 e1))))))),People have justifications for the choices that they select. A factor in a decision is a pro for the option selected or a con for an option not selected. Factor f in decision e is either a pro for the selected choice or a con for an unselected alternative.
41,41.4,(41.30),(forall (j e) (iff (decisionJustification j e) (forall (f) (iff (member f j)(decisionFactor f e))))),"A decision justification is the set of decision factors. Because of the definitions of 'pro' and 'con,' it is the causal story built up by envisioning from the options during the course of deliberation. Set j contains exactly the decision factors for decision e."
41,41.4,(41.31),(forall (e) (iff (arbitraryDecision e) (exists (j) (and (decisionJustification j e)(null j))))),"Sometimes people have no justification for the decision they make ('whim,' 'impulsive decision,' 'crap shoot'). Decision e is arbitrary when its decision justification j is null (empty)."
41,41.5,(41.32),(forall (e2 e a) (iff (decisionConsequence e2 e a) (exists (s e1) (and (decision e a s e1)(causallyInvolved e1 e2) (causallyInvolved e e2))))),"There can be decision processes that are not carried to completion. When they are, however, they have consequences. By making a decision, people make things happen in the world. Eventuality e2 is a consequence when both the selected option e1 and the decision process e itself are causally involved in e2."
41,41.5,(41.33),(forall (e2 e a) (iff (positiveDecisionConsequence e2 e a) (and (decisionConsequence e2 e a)(goodFor e2 a)))),Sometimes the effects of a decision are in accord with the agent's goals. A positive decision consequence is a decision consequence that is good for the agent.
41,41.5,(41.34),(forall (e2 e a) (iff (negativeDecisionConsequence e2 e a) (and (decisionConsequence e2 e a)(badFor e2 a)))),Sometimes the effects of a decision are counter to people's goals. A negative decision consequence is a decision consequence that is bad for the agent.
42,42.1,(42.1),(forall (e1 e2 x) (if (and (p' e1 x)(q' e2 x)) (not (exists (t)(and (atTime e1 t)(atTime e2 t)))))),"General rule schema that most simultaneous action constraints instantiate: if e1 is a p-type action by x and e2 is a q-type action by x, then there is no time t such that both e1 and e2 are occurring at t. For example, p might be 'walk' and q might be 'chew-gum' (Gerald Ford couldn't walk and chew gum at the same time)."
42,42.1,(42.2),(forall (e1 e2 x) (if (and (agentOf x e1)(agentOf x e2)(etc)) (not (exists (t)(and (atTime e1 t)(atTime e2 t)))))),"Less domain-specific but defeasible rule: x cannot be the agent of two actions simultaneously. This may seem too strong, but we use something like it when we make sense of text like 'Pat couldn't lift the grate; he was carrying a stack of books.' Uses defeasible (etc) condition."
42,42.2,(42.3),(forall (s p) (iff (schedule s p) (forall (e) (iff (member e s) (and (subgoalIn e p)(temporal e)))))),"A schedule is the set of temporal subgoals of a plan. From a logical point of view, we can view a schedule as a particular part of a plan, namely, those subgoals of the form (timeSpan t e) where t is an instant or interval and e is an action or other event in the plan. s is a schedule for plan p if and only if it is the set of temporal properties e that are subgoals in plan p."
42,42.2,(42.4),(forall (e p t) (iff (scheduled e t p) (and (subgoalIn e p)(temporalEntity t) (exists (e1 s1) (and (or (atTime' e1 e t)(during' e1 e t)) (subgoalsOf s1 p)(imply s1 e1)))))),"A subgoal e of a plan is scheduled for a temporal entity t if it can be inferred from the plan that e is at or during t. Subgoal e is scheduled for t exactly when s1 implies such a relation. It is not enough to say that a temporal relation for e is in the schedule for p, because the temporal relation may not be explicit, but rather may follow from facts about the durations of events and about before relations."
42,42.2,(42.5),(forall (t p t0) (iff (unscheduledTime t p t0) (and (tseq t) (forall (t1) (iff (member t1 t) (and (insideTime t1 t0) (not (exists (e) (and (subgoalIn e p) (scheduled e t1 p))))))))))),"Unscheduled time as the temporal sequence (tseq) of those intervals which have no associated action in the agent's schedule. We relativize it to a larger containing interval that would normally be supplied by context. A time is unscheduled with respect to a plan if there is no subgoal of the plan which is scheduled for that time ('free time,' 'spare time')."
42,42.2,(42.6),(forall (d p t0 u) (iff (scheduleCapacity d p t0 u) (exists (t) (and (unscheduledTime t p t0)(durationOf d t u))))),"Because the duration of temporal sequences can be measured, we can talk about the duration of a plan's unscheduled time, relativized to a larger interval (t0) and to a unit (u) of temporal measure. Duration d is the schedule capacity of plan p in interval t0 in units u if there is a temporal sequence t that is the unscheduled time of p in t0 and d is t's duration in units u."
42,42.2,(42.7),(forall (e t1 t2) (iff (lessDuration' e t1 t2) (exists (d1 d2 u) (and (durationOf d1 t1 u)(durationOf d2 t2 u) (lt' e d1 d2))))),"Durations constitute a scale; thus, so do schedule capacities. The partial ordering on these scales is lessDuration. The predicate lessDuration say that one temporal entity or eventuality has less duration than another."
42,42.2,(42.8),(forall (s p t0 u) (iff (schedulednessScale s p t0 u) (exists (s1 t1 t2) (and (lessDuration' e t1 t2) (forall (d) (if (member d s1) (scheduleCapacity d p t0 u))) (scaleDefinedBy s s1 e))))),A scale of 'scheduled-ness' is one in which the elements are schedule capacities and the partial ordering is lessDuration. Scale s is a scale consisting of schedule capacities in units u and having partial ordering lessDuration.
42,42.2,(42.9),(forall (p t0) (iff (fullSchedule p t0) (exists (s d u s1) (and (schedulednessScale s p t0 u) (scheduleCapacity d p t0 u) (Lo s1 s)(inScale d s1))))),"Because we can make qualitative judgments about whether something lies in the high, medium or low region of a scale, we can talk about an agent's schedule being full, in terms of the duration of the agent's unscheduled time being in the low region of a scale ('overbooked,' 'busy,' 'stretched thin')."
42,42.2,(42.10),(forall (t p t0) (iff (nextUnscheduledMoment t p t0) (exists (s t1 t2) (and (unscheduledTime s p t1)(first t2 s) (posInfInterval t1)(begins t0 t1) (begins t t2))))),"The next unscheduled moment t for a plan p at time t0 is the first temporal entity in the unscheduled time for p for a positively infinite interval beginning at t0 ('soonest opportunity,' 'have a chance'). Think of t0 as the present time. Interval t1 is the positive infinite interval beginning at t0, s is the temporal sequence of intervals that are not scheduled for actions in plan p, t2 is the first interval in s, and t is the instant that begins t2."
42,42.3,(42.11),(forall (p) (iff (scheduledPlan p) (exists (a g) (and (plan p a g) (forall (e) (if (and (subgoalIn e p)(nontemporal e)) (exists (t) (scheduled e t p)))))))),We will rather arbitrarily say that a scheduled plan is a plan all of whose nontemporal subgoals are scheduled. All of the nontemporal subgoals in plan p have been assigned specific times.
42,42.3,(42.12),(forall (p) (iff (pendingPlan p) (exists (a g) (and (plan p a g)(not (scheduledPlan p)))))),A pending plan is one that is not scheduled. Plan p is pending when it exists as a plan for some agent and goal but is not a scheduled plan.
42,42.3,(42.13),(forall (t p a g) (if (plan p a g) (iff (timeSpanOf t p) (exists (s) (and (subgoalsOf s p)(timeSpanOf t s)))))),"The subgoals of a plan are eventualities. The set of subgoals of a plan can be viewed as a conjunction of eventualities, and hence as an eventuality. This has a time span, and we can define that to be the time span of the plan itself."
42,42.3,(42.14),(forall (e1 e2 p) (iff (nextScheduledEvent e1 e2 p) (exists (t1 t2) (and (scheduled e1 t1 p)(scheduled e2 t2 p) (before t1 t2) (not (exists (e3 t3) (and (subgoalIn e3 p)(scheduled e3 t3 p) (before t1 t3)(before t3 t2)))))))),"The next scheduled event e2 after event e1 in a plan p is an event such that there is no event in the plan's schedule between e1 and e2. e2 is the next scheduled event in p after e1 if the time t1 scheduled for e1 is before the time t2 scheduled for e2, and there are no subgoals e3 of p scheduled for a time t3 between t1 and t2."
42,42.3,(42.15),(forall (t p) (iff (scheduledPlanInterval t p) (exists (t1) (and (scheduledPlan p)(timeSpanOf t1 p) (convexHull t t1))))),"The scheduled plan interval is the smallest interval that spans the entire scheduled plan. That is, it is the convex hull of the time span of the plan."
42,42.3,(42.16),(forall (t e p) (iff (scheduledStartTime t e p) (exists (t1) (and (scheduledPlan p)(subgoalIn e p) (scheduled e t1 p)(begins t t1))))),"The scheduled start time of an event in a scheduled plan is the time that that event is scheduled to begin. Plan p is a scheduled plan and its subgoal e is scheduled for temporal entity t1, which begins at time t."
42,42.3,(42.17),(forall (t e p) (iff (scheduledEndTime t e p) (exists (t2) (and (scheduledPlan p)(subgoalIn e p) (scheduled e t2 p)(ends t t2))))),"The scheduled end time of an event in a scheduled plan is the time that that event is scheduled to end. Plan p is a scheduled plan and its subgoal e is scheduled for temporal entity t2, which ends at time t."
42,42.3,(42.18),(forall (t p) (iff (aDeadline t p) (exists (a g t1 t2) (and (plan p a g)(timeSpanOf t1 p)(ends t2 t1) (if (before t t2)(not (cause p g))))))),"The reason for a plan is that it causes a goal to be satisfied. Sometimes this causality is time sensitive; if the plan is not executed by a certain time, it will no longer cause the goal to be satisfied. This certain time is a deadline. t is a deadline for plan p if whenever the end t2 of p's time span t1 is after t, it means that p will not cause or bring about the goal g that p was designed to achieve."
42,42.3,(42.19),(forall (t p) (iff (deadline t p) (and (aDeadline t p) (forall (t1) (if (aDeadline t1 p) (or (before t t1)(equal t t1))))))),"The deadline for a plan is the earliest such deadline. t is the deadline for plan p if it is a deadline for p and for every other deadline t1 for p, either t is before t1 or t equals t1."
42,42.3,(42.20),(forall (t p) (iff (aStartTimeDeadline t p) (exists (a g t1 t2) (and (plan p a g)(timeSpanOf t1 p)(begins t2 t1) (if (before t t2)(not (cause p g))))))),"There can be a deadline for starting a plan. t is a start-time deadline for plan p if whenever the beginning t2 of p's time span t1 is after t, it means that p will not cause or bring about the goal g that p was designed to achieve."
42,42.3,(42.21),(forall (t p) (iff (startTimeDeadline t p) (and (aStartTimeDeadline t p) (forall (t1) (if (aStartTimeDeadline t1 p) (or (before t t1)(equal t t1))))))),"The start-time deadline for a plan is the earliest such start-time deadline. t is the start-time deadline for plan p if it is a start-time deadline for p and for every other start-time deadline t1 for p, either t is before t1 or t equals t1."
42,42.3,(42.22),(forall (t p) (iff (slack t p) (exists (t0 t1 t2) (and (scheduledPlan p)(timeSpanOf t0 p) (ends t1 t0)(deadline t2 p) (begins t1 t)(ends t2 t))))),"The amount of time between the end of a scheduled plan and the deadline for that plan occupies a significant share of people's thought. Expressions include 'finish in the nick of time,' 'finished with time to spare,' 'finish in plenty of time,' and 'finished at the very last second.' We can call this interval the 'slack' in a plan. A slack t in plan p is a temporal interval that begins when the plan is to be completed and ends at the plan's deadline."
42,42.3,(42.23),(forall (p) (iff (scheduledCloseToDeadline p) (exists (s s0 e t2 t3 s1 t) (and (scaleDefinedBy s s0 e) (forall (t1) (if (member t1 s0)(exists (p1) (slack t1 p1)))) (lessDuration' e t2 t3) (Lo s1 s)(slack t p)(inScale t s1))))),"Slacks have duration and consequently can be located along a scale defined by durations. This scale can have high and low regions, corresponding to the slack being small or large. A plan p is scheduled close to its deadline if its slack is in the low region s1 of a scale s whose elements t1 are 'slacks' and whose partial ordering e is lessDuration."
42,42.3,(42.24),(forall (p) (iff (scheduledFarFromDeadline p) (exists (s s0 e t2 t3 s1 t) (and (scaleDefinedBy s s0 e) (forall (t1) (if (member t1 s0)(exists (p1) (slack t1 p1)))) (lessDuration' e t2 t3) (Hi s1 s)(slack t p)(inScale t s1))))),A predicate scheduledFarFromDeadline can be defined similarly to scheduledCloseToDeadline; it picks out the high region of the scale. A plan is scheduled far from its deadline when its slack is in the Hi region of the duration scale.
42,42.4,(42.25),(forall (a s1 s2) (iff (schedulePreference a s1 s2) (exists (p p1 p2 g) (and (plan p a g)(sameAbstractPlan p1 p2 p) (schedule s1 p1)(schedule s2 p2) (preferGoal a s1 s2))))),"A schedule is a set and therefore a conjunction of the temporal subgoals of a plan. Thus, we can define a schedule preference in terms of goal preferences between schedules. Agent a prefers schedule s1 to schedule s2. The predication sameAbstractPlan p1 p2 p, defined in Chapter 45, says that plans p1 and p2 are both instantiations of the same abstract plan p. Examples of preferences are 'Do the most interesting tasks first,' and 'Minimize or maximize the slack.'"
42,42.5,(42.26),(forall (e a p1 p2) (iff (schedulePlan' e a p1 p2) (exists (e1 e2 g e3) (and (change' e3 e1 e2)(gen e3 e) (plan' e1 p1 a g)(pendingPlan p1) (plan' e2 p2 a g)(scheduledPlan p2) (forall (s1 s2) (if (and (subgoalsOf s1 p1)(subgoalsOf s2 p2)) (subset s1 s2))))))),"For an agent to schedule a plan is for there to be a change from a state in which one has a pending plan to one in which one has a scheduled plan, where the subgoals of the pending plan are all included in the subgoals of the scheduled plan. There is a change from agent a having a pending plan p1 for achieving goal g to having a scheduled plan p2 for achieving g, where all the subgoals of p1 are also subgoals of p2."
42,42.5,(42.27),(forall (a p1 p2) (iff (schedulePeriodicPlan' e a p1 p2) (exists (g e3) (and (schedulePlan' e3 a p1 p2)(gen e3 e) (periodicPlan p2 a g))))),In Chapter 31 we defined a periodic plan as one whose time span is a periodic temporal sequence. To schedule a periodic plan is to schedule a plan that is periodic.
42,42.5,(42.28),(forall (e a p1 p2) (iff (unschedulePlan' e a p1 p2) (exists (e1 e2 g e3) (and (change' e3 e1 e2)(gen e3 e) (plan' e1 p1 a g)(scheduledPlan p1) (plan' e2 p2 a g)(pendingPlan p2) (forall (s1 g2) (if (and (subgoalsOf s1 p1)(subgoalIn g2 p2) (nontemporal g2)) (member g2 s1))))))),"For an agent to unschedule a plan is for there to be a change from a state in which there is a scheduled plan to a state in which there is a pending plan with all the same nontemporal subgoals. The nontemporal subgoals of p2 are subgoals of p1. Thus, only temporal goals are changed in the process."
42,42.5,(42.29),(forall (e a p2 p3) (iff (reschedulePlan' e a p2 p3) (exists (e1 p1 e2) (and (schedulePlan' e2 a p2 p3)(gen e2 e) (unschedulePlan' e1 a p1 p2)(before e1 e))))),"To reschedule a plan is to schedule a plan where there has been a previous unscheduling. e is an action by agent a to reschedule a pending plan p2, resulting in scheduled plan p3. This holds when there was a previous unscheduling event e1 by agent a changing a scheduled plan p1 into the pending plan p2."
42,42.5,(42.30),(forall (e a p1 p2) (iff (indefinitelyPostponePlan' e a p1 p2) (exists (e4) (and (unschedulePlan' e4 a p1 p2)(gen e4 e) (not (exists (e3 p3) (reschedulePlan' e3 a p2 p3))))))),"To indefinitely postpone a plan is to unschedule it and not reschedule it. Action e by agent a indefinitely postpones scheduled plan p1 resulting in pending plan p2, where there is no subsequent rescheduling of p2."
42,42.5,(42.31),(forall (e a p1 p2) (iff (juggleSchedule' e a p1 p2) (exists (e1 e2 t e3) (and (change' e3 e1 e2)(gen e3 e) (plan' e1 p1 a g)(scheduledPlan p1) (plan' e2 p2 a g)(scheduledPlan p2) (forall (g) (if (nontemporal g) (iff (subgoalIn g p1)(subgoalIn g p2)))) (exists (g1) (and (not (subgoalIn g1 p1))(subgoalIn g1 p2))) (timeSpanOf t p1)(timeSpanOf t p2))))),"To juggle a schedule is to change from a state in which one's plan is p1 to a state in which one's plan is p2, where the nontemporal subgoals of p1 and p2 are the same and the time spans of p1 and p2 are the same. Action e by agent a changes scheduled plan p1 into scheduled plan p2, where p1 and p2 have all the same nontemporal subgoals, where p1 and p2 differ in at least one temporal subgoal, and where p1 and p2 have the same time spans."
42,42.5,(42.32),(forall (e s p1 p2) (iff (collaborativelySchedulePlan' e s p1 p2) (exists (e1) (and (schedulePlan' e1 s p1 p2)(gen e1 e) (forall (a) (if (member a s)(agent a))))))),"Collaborative scheduling of a plan is the scheduling of a plan by a set of agents. Action e by set s of agents schedules pending plan p1 resulting in scheduled plan p2, where every member of s is an agent."
42,42.5,(42.33),(forall (e) (iff (schedulingFailure e a p) (exists (e1 p1) (and (fail' e a e1)(schedulePlan' e1 a p p1))))),A scheduling failure is to fail to schedule a plan. Action e is a scheduling failure by agent a for plan p when agent a fails in an attempt e1 to schedule plan p into some scheduled plan p1.
43,43.1,(43.1),(forall (e a s e1 e2) (if (and (monitor' e a s)(member e1 s)(instance e2 e1)(perceive a e2) (goalRelevant e2 a)(etc)) (exists (e3) (and (inFocus' e3 e2 a)(cause e e3))))),"Agent a monitors a set s of eventuality types. When a goal-relevant instance of any of these is perceived, this causes the agent to focus on that instance. This axiom is defeasible because sometimes we miss significant threats and opportunities even though we are monitoring for them."
43,43.1,(43.2),(forall (e a s e1 e2) (if (and (monitor' e a s)(member e1 s)(instance e2 e1)(Rexist e2) (goalRelevant e2 a)(etc)) (exists (e3) (and (inFocus' e3 e2 a)(cause e e3))))),"A weaker defeasible rule is that if we are monitoring for an eventuality type and a token actually occurs, then that will cause us to focus on it. This rule fails when something goal-relevant occurs and we don't perceive it."
43,43.1,(43.3),(forall (a e1 e2) (if (and (goalRelevant e2 a)(instance e2 e1)(etc)) (exists (s) (and (member e1 s)(monitor a s))))),"If an eventuality type has a goal-relevant instance, it should be monitored for. A big reason for this defeasibility is that many goal-relevant phenomena are, at the least, very difficult to perceive, such as radiation, carcinogens in the environment, and bacteria in food."
43,43.1,(43.4),(forall (a x) (iff (monitorThing a x) (exists (s) (and (monitor a s) (forall (e) (if (member e s)(arg* x e))))))),Some monitoring is for events that happen to things. To monitor a thing is to monitor for events happening to the thing or states involving the thing.
43,43.1,(43.5),(forall (a b) (iff (monitorAgent a b) (and (monitorThing a b)(agent b)))),Some monitoring is for events that happen to an agent.
43,43.1,(43.6),(forall (a) (iff (monitorSelf a) (monitorAgent a a))),"Some monitoring is for events that happen to one's own self. For example, an athlete will monitor his or her body for various conditions relevant to the performance."
43,43.1,(43.7),(forall (e0 a s) (iff (terminateMonitor' e0 a s) (exists (e1 e2) (and (changeFrom' e2 e1)(gen e2 e0)(monitor' e1 a s))))),People can stop monitoring some set of events after some time.
43,43.2,(43.8),(forall (e) (iff (monitorTriggerCondition e) (exists (a s)(and (monitor a s)(member e s))))),"When monitoring, people are looking for monitor trigger conditions. These are the eventuality types in the set s."
43,43.2,(43.9),(forall (e a) (if (goalRelevant e a)(or (goodFor e a)(badFor e a)))),"We monitor for both threats and opportunities. The trigger condition can be either good for us or bad for us. In fact, it is a theorem that if an eventuality is goal relevant to an agent it is either good for or bad for the agent."
43,43.2,(43.10),(forall (e) (iff (monitorTriggerConditionSatisfied e) (exists (e1) (and (monitorTriggerCondition e) (instance e1 e)(Rexist e1))))),A monitored trigger condition can be satisfied.
43,43.2,(43.11),(forall (e) (iff (monitorTriggerConditionUnsatisfied e) (and (monitorTriggerCondition e) (not (exists (e1) (and (instance e1 e)(Rexist e1))))))),A monitored trigger conditions can remain unsatisfied.
43,43.2,(43.12),(forall (e2 e1 a s) (iff (monitorTriggeredAction e2 e1 a s) (exists (e0 s1 g) (and (monitor' e0 a s)(member e1 s) (cause e0 e2) (agentOf a e2)(goal g a) (causalComplex s1 g)(member e2 s1))))),"When one of the trigger conditions occurs, we typically execute some action in response. We can call this the triggered action. Action e2 is triggered by condition e1 while agent a is monitoring a set s of eventuality types. The monitoring causes action e2. Agent a is the agent of the action e2, and e2 is in a causal complex for some goal g of a's."
43,43.2,(43.13),(forall (t e0) (iff (monitoringTimeSpan t e0) (exists (a s) (and (monitor' e0 a s)(timeSpanOf t e0))))),There is a time span during which monitoring is conducted.
43,43.2,(43.14),(forall (r a s t) (iff (monitoringFrequency r a s t) (exists (s1) (and (forall (e1) (if (member e1 s1)(monitor' e1 a s))) (tseq t)(rate r s1 t))))),"There is a frequency at which monitoring is conducted. For example, when we drive down the freeway, we monitor our distance from the car in front of us on a second-by-second basis. We monitor the presence of police cars at less frequent intervals. r is the rate of occurrence in temporal sequence t of monitoring events by agent a of eventuality types in set s."
43,43.2,(43.15),(forall (a s) (iff (monitoringFailure a s) (exists (e e1 e2) (and (monitor' e a s)(member e1 s)(instance e2 e1) (or (and (Rexist e2) (not (exists (e3) (and (inFocus' e3 e2 a) (cause e e3))))) (and (not (Rexist e2)) (exists (e3) (and (inFocus' e3 e2 a) (cause e e3))))))))),"Monitoring can fail if the triggering does not happen when the conditions are met – a false negative. The event happens but the monitoring does not end up in focus. False positives are also possible; the triggering event is believed to have happened, an instance of it is in focus, but in fact the instance did not really happen."
44,44.1,(44.1),(forall (e0 a e p) (iff (execute' e0 a e p) (exists (g e1) (and (plan p a g)(subgoalIn' e1 e p)(agentOf a e) (causallyInvolved e1 e))))),"An agent a executes an action e in a plan p if and only if e is a subgoal of the plan, a is the agent of that action, and the fact that e is a subgoal in p plays a causal role in the occurrence of e."
44,44.1,(44.2),(forall (e2 a p) (if (executePlan' e2 a p) (and (exists (g) (plan p a g)) (exists (e) (and (subgoalIn e p)(agentOf a e))) (forall (e) (if (and (subgoalIn e p)(agentOf a e)) (exists (e0) (and (execute' e0 a e p) (subexecution e0 e2)))))))),"We execute a plan by executing all of its subgoals. The first axiom for executePlan defines necessary conditions and introduces the subexecution relation. If this is true, then p is a plan by a to achieve goal g, there is at least one subgoal e of p for which a is the agent, and for every subgoal e in p of which a is the agent, there is an execution e0 of e by a in the service of plan p."
44,44.1,(44.3),(forall (a p g) (if (and (plan p a g) (exists (e) (and (subgoalIn e p)(agentOf a e))) (forall (e) (if (and (subgoalIn e p)(agentOf a e)) (exists (e0) (execute' e0 a e p))))) (exists (e2) (executePlan' e2 a p)))),The next axiom gives sufficient conditions for executePlan. The conditions in the antecedent of this axiom are just the same as the conditions in the consequent of the previous axiom.
44,44.1,(44.4),(forall (e p) (iff (happensInTime e p) (and (subgoalIn e p) (exists (s) (and (subgoalsOf s p) (forall (e1 t) (if (and (atTime' e1 e t)(imply s e1)) (Rexist e1)))))))),"In addition to actions by an agent, plans contain states and events that must hold or happen at the appropriate time. For example, it may be part of a plan for a picnic that the sun is shining. The predicate happensInTime says about such an eventuality in a plan that it actually does occur when it needs to. Subgoal e of plan p happens in time for the successful execution of the plan. All temporal constraints involving e hold."
44,44.1,(44.5),(forall (e2 a p) (if (executePlan' e2 a p) (iff (Rexist e2) (and (forall (e0) (if (subexecution e0 e2)(Rexist e0))) (forall (e) (if (and (subgoalIn e p)(not (agentOf a e))) (happensInTime e p))))))),"An executePlan really exists exactly when all its subexecutions really exist and the other events in the plan happen at the appropriate times. The temporal relations among subgoals are themselves subgoals that have to be satisfied, so this definition ensures that the subgoals will be executed in a legitimate order."
44,44.1,(44.6),(forall (e2 e0) (if (subexecution e0 e2)(subevent e0 e2))),Partial executions of plans can be viewed as total executions of subplans. In Chapter 17 on Event Structure we defined a number of ways in which one event can be a subevent of another. Being a subexecution is one way of being a subevent.
44,44.2,(44.7),(forall (e a p) (iff (plannedExecution e a p) (exists (e1 p0) (and (executePlan' e a p)(inFocus e1 a) (subgoalIn' e1 e p0)(thePlan p0 a))))),"In some cases, the event being executed is consciously planned by the agent. e is a planned execution by agent a of plan p exactly when e is an execution by a of p, and the fact that the execution of the plan is a subgoal of The Plan p0 that defines a's intentional behavior is in a's focus of attention."
44,44.2,(44.8),(forall (e a p) (iff (spontaneousExecution e a p) (exists (p0) (and (executePlan' e a p)(not (subgoalIn e p0)) (thePlan p0 a))))),"In some cases people do things spontaneously that they did not consciously plan to do. e is a spontaneous execution by agent a of plan p exactly when e is an execution by a of p, but the execution of the plan is not explicitly a part of The Plan p0 that defines a's intentional behavior."
44,44.2,(44.9),(forall (e a p) (iff (nonconsciousExecution e a p) (and (executePlan' e a p) (forall (e1) (if (subgoalIn e1 p) (not (exists (e2) (and (agentOf' e2 a e1) (inFocus e2 a))))))))),"In some cases people do things they have no control over. These are cases where the person is the agent of the action but is not conscious of being the agent. A nonconscious execution e by agent a of plan p is an execution by a of p. Moreover that for all subgoals e1 of p, it never happens that a is aware of being the agent of e1."
44,44.2,(44.10),(forall (e a p) (iff (reactiveExecution e a p) (exists (e1 x m) (and (executePlan' e a p) (changeIn' e1 x)(externalTo x m)(mind m a) (causallyInvolved e1 e))))),"People do things, reacting to events in their environment. That is, some change of state external to the agent is causally involved in the execution of the action. e is an execution by agent a of plan p. There is a change e1 in some entity x external to the agent's mind m that is causally involved in the execution."
44,44.2,(44.11),(forall (e a p) (iff (mentalExecution e a p) (and (executePlan' e a p)(inFocus e a) (not (exists (e1 x m) (and (changeIn' e1 x)(externalTo x m) (mind m a)(cause e e1))))))),"People do things that only involve thinking in their heads; no change occurs in the external world as a result of the execution. Execution e is a mental execution by agent a of plan p if it is an execution and it is in a's focus of intention, but there is no change in an entity external to a's mind that is caused by e."
44,44.2,(44.12),(forall (e s p) (iff (collaborativeExecutuion e s p) (and (executePlan' e s p) (set s) (forall (a) (if (member a s)(agent a)))))),Some executions are made collaboratively with other people. A collaboration is the execution of plans by a set of agents.
44,44.2,(44.13),(forall (e a p s) (iff (followExecutionRules e a p s) (and (executePlan' e a p) (forall (c) (if (member c s) (exists (e1) (and (subexecution e1 e)(arg* e1 c) (if (Rexist e1)(Rexist c))))))))),Some executions are constrained by execution rules that must be followed. These constraints can be viewed as properties of the subexecutions of the action that is being executed. e is an execution by agent a of plan p respecting the constraints c in set s. Every member c of s is a property of some subexecution e1 of the execution e. If that subexecution occurs then the corresponding constraint property also holds.
44,44.3,(44.14),(forall (e a p s) (iff (iterativeExecution e a p s) (and (executePlan' e a p) (exists (e1 x) (and (iteration e e1) (typelt x s)(arg* x e1)))))),"Some executions are for iterative plans. That is, the agent is iterating through some set of entities, the notion captured by the predicate iteration. e is an execution by agent a of plan p which iterates through the elements of set s. It is an iteration through instances of the event type e1. The elements of s are all arguments of the corresponding instances of e1."
44,44.3,(44.15),(forall (e a p) (iff (repetitiveExecution e a p) (and (executePlan' e a p) (exists (e1 e2) (repeatUntil e e1 e2))))),"Some executions are for repetitive plans. That is, the action being executed is a repeatUntil."
44,44.3,(44.16),(forall (e a p) (iff (periodicExecution e a p) (and (executePlan' e a p) (exists (t) (and (timeSpanOf t e)(periodicTseq t)))))),A periodic execution of a plan is an execution whose time span is a periodic temporal sequence.
44,44.3,(44.17),(forall (e a p) (iff (continuingExecution e a p p0) (and (executePlan' e a p)(subplan p p0) (exists (e0) (and (executePlan' e0 a p0)(subexecution e e0)))))),"Some executions are continuations of the execution of a prior plan. That is, there is some larger plan the plan being executed is a subplan of, and the execution continues the execution of that larger plan. Execution e by agent a of plan p is a continuation of an execution of the larger plan p0 of which p is a subplan."
44,44.3,(44.18),(forall (e a p t) (iff (timeTriggeredExecution e a p t) (exists (t1 e1) (and (executePlan' e a p)(timeSpanOf t1 e) (begins' e1 t t1)(causallyInvolved e1 e))))),"Some executions are triggered by specific times. For example, someone leaves for work at 8:00 a.m. every morning. e is an execution by agent a of plan p triggered by the fact that the time is t. e is an execution of p whose time span is t1. The property of t being the beginning of t1 is causally involved in the occurrence of the execution e."
44,44.3,(44.19),(forall (e a s) (iff (consecutiveExecution e a s) (exists (t) (and (forall (p) (iff (member p s) (exists (e1 t1) (and (executePlan' e1 a p) (timeSpanOf t1 e1) (member t1 t))))) (tseq t))))),"Some plans are executed consecutively one after another. That is, the time spans of the executions constitute a temporal sequence. e is an execution by agent a of a consecutive sequence s of plans. The temporal entity t consists of the time spans t1 of all the executions e1 of the plans p in the set s. The t thus defined is a temporal sequence."
44,44.3,(44.20),(forall (e a s) (iff (concurrentExecution e a s) (and (forall (p) (if (member p s)(exists (e1) (executePlan' e1 a p)))) (forall (p1 p2 e1 e2) (if (and (member p1 s)(member p2 s) (executePlan' e1 a p1)(executePlan' e2 a p2)) (intOverlap e1 e2)))))),Some plans are executed concurrently with other plans. e is the concurrent execution by agent a of the plans in set s. Each of the plans in s has an execution. These overlap pairwise.
44,44.3,(44.21),(forall (e a1 a2 p1 p2) (iff (simultaneousExecution e a1 a2 p1 p2) (exists (e1 e2) (and (executePlan' e1 a p1)(executePlan' e2 a p2) (and' e e1 e2)(intOverlap e1 e2))))),Distinct agents can execute their plans simultaneously. e is the simultaneous execution by agent a1 of plan p1 and agent a2 of plan p2. This happens when e is the conjunction of executions of the two plans and the executions of the plans overlap.
45,45.1,(45.1),(forall (s p) (iff (leftFringe s p) (exists (a g s1) (and (plan p a g)(subgoalsOf s1 p) (forall (e t) (iff (and (member e s)(begins t e)) (and (subgoalIn e p)(begins t e) (not (exists (e1 t1) (and (subgoalIn e1 p) (begins t1 e1) (imply s1 b) (before' b t1 t)))))))))))),"The ""left fringe"" of a plan is the set of all those subgoals that can be done first, that is, those subgoals such that there is no subgoal that must be achieved before it. s is the left fringe of plan p when p is a plan by some agent a to achieve goal g with subgoals s1, and s is the set of subgoals of p for which there does not exist another subgoal e1 in p which must occur before e."
45,45.1,(45.2),(forall (e1 e2 t p s) (if (and (begins t e1)(begins t e2) (subgoalIn e1 p)(subgoalIn e2 p)(leftFringe s p)) (iff (member e1 s)(member e2 s)))),"It is a theorem that if two subgoals of a plan must begin to be executed simultaneously, then either both or neither will be in the left fringe of the plan."
45,45.1,(45.3),(forall (p a g s) (if (and (plan p a g)(leftFringe s p)) (member g s))),"The top-level goal in a plan is a limiting case of a subgoal. Executing any of the subgoals of a goal entails that we are in the process of executing the goal. Thus, there cannot be any of its subgoals that must be executed before the goal. It is a theorem that the top-level goal is in the left fringe of the plan."
45,45.1,(45.4),(forall (e p) (iff (precondition e p) (exists (s e1) (and (leftFringe s p)(member e1 s)(enable e e1))))),A precondition of a plan is a precondition of a subgoal in the left fringe of the plan. Preconditions are not part of the plan. Otherwise e would be in the left fringe of the plan rather than e1.
45,45.1,(45.5),(forall (e p t) (iff (satisfiedPrecondition e p t) (and (precondition e p)(atTime e t)))),Preconditions of plans may be satisfied at the time the plan is executed.
45,45.1,(45.6),(forall (e p t) (iff (unsatisfiedPrecondition e p t) (and (precondition e p)(not (atTime e t))))),Preconditions of plans may be unsatisfied at the time the plan is executed.
45,45.1,(45.7),(forall (e0 e p t) (iff (violatePrecondition' e0 e p t) (exists (e1 e2) (and (changeFrom' e2 e1)(gen e2 e0) (satisfiedPrecondition' e1 e p t) (atTime e0 t))))),Satisfied preconditions can become unsatisfied during the execution of a plan.
45,45.1,(45.8),(forall (s p) (iff (executionEnvironment s p) (exists (a g) (and (plan p a g) (forall (e) (iff (member e s) (exists (e1 e2) (and (subgoalIn e1 p)(not' e2 e1) (or (causallyInvolved e e1) (causallyInvolved e e2)))))))))),"There is a subset of state characteristics that have a relationship to an execution. These are the states and events that are causally involved in the occurrence or nonoccurrence of the subgoals in the plan. We can call this the execution environment. p is a plan by agent a to achieve goal g, and s is the set of eventualities e which are causally involved in some subgoal e1 in p happening or not happening."
45,45.1,(45.9),(forall (p a g t) (iff (enabledPlan p a g t) (and (plan p a g) (forall (e) (if (precondition e p)(atTime e t)))))),A plan is enabled if all its preconditions hold.
45,45.1,(45.10),(forall (a p) (iff (beginExecute a p) (exists (g e s) (and (plan p a g)(member e s)(leftFringe s p) (execute a e p))))),To begin the execution of a plan is to execute an action in the left fringe of the plan.
45,45.2,(45.11),(forall (a e1 p t) (iff (executing a e1 p t) (exists (e) (and (execute' e a e1 p)(atTime e t))))),An agent is executing an action of a plan at time t if the execution takes place at that time.
45,45.2,(45.12),(forall (a p t) (iff (executingPlan a p t) (exists (e1) (executing a e1 p t)))),At any moment t an agent a can be executing one or more plans p. For a to execute plan p at time t is for a to be executing a subgoal of p at that time.
45,45.2,(45.13),(forall (a e1 p t) (iff (executed a e1 p t) (exists (e t0) (and (execute' e a e1 p)(ends t0 e) (before t0 t))))),We would like to be able to keep track of those parts of a plan that have already been completed. We can define a predicate executed saying that the execution of the action has already taken place by a particular time.
45,45.2,(45.14),(forall (a e p t) (iff (executed a e p t) (forall (e1) (and (if (and (subgoal e1 e)(agentOf a e1)) (executed a e1 p t)) (if (and (subgoal e1 e)(not (agentOf a e1))) (happensInTime e1 p)))))),"The purpose of the subgoals of a goal is to bring about the goal. Thus, a goal has been executed when all its subgoals have been executed and vice versa. Agent a has executed subgoal e of plan p by time t. a has executed all the actions a was agent of. All other events happened at the appropriate time."
45,45.2,(45.15),(forall (a p t) (iff (executedPlan a p t) (exists (g) (and (plan p a g)(executed a g p t))))),"Because of this rule, we can define an entire plan to have been executed when its top-level goal has been executed."
45,45.2,(45.16),(forall (p1 a p t) (iff (remainingPlan p1 a p t) (exists (g s0 s s1) (and (plan p a g)(subgoalsOf s0 p) (relationsOf s p)(relationsOf s1 p1) (forall (e0) (iff (subgoalIn e0 p1) (or (and (subgoalIn e0 p)(agentOf a e0) (not (executed a e0 p t))) (and (subgoalIn e0 p) (not (agentOf a e0)) (exists (t1 e3) (and (begins' e3 e0 t1) (imply s0 e3) (before t t1))))))) (forall (r e1 e2) (iff (subgoal' r e1 e2) (iff (member r s1) (and (member r s)(subgoalIn e1 p1) (subgoalIn e2 p1))))))))),"Now we can define the ""remaining plan"" p1 of plan p at time t as that part of p that has not yet been executed. p1 is that part of agent a's plan p that remains to be done at time t. p is a plan by a to achieve goal g; it also labels as s0 the set of subgoals of p. Among the subgoals in p1 are the subgoals in p that have not yet been executed by a. Among the subgoals of p1 are the subgoals of p that a is not the agent of and that must begin at some time t1 after t. The subgoal relations of p1 are those of p that are between subgoals that remain in p1."
45,45.2,(45.17),(forall (t1 e a p) (iff (executionStartTime t1 e a p) (and (executePlan' e a p)(begins t1 e)))),There is a time that an agent begins the execution of a plan. t1 is the start time of execution e by agent a of plan p.
45,45.2,(45.18),(forall (t2 e a p) (iff (executionEndTime t2 e a p) (and (executePlan' e a p)(ends t2 e)))),There is a time that an agent ends the execution of a plan. The definition is similar to that for executionStartTime.
45,45.2,(45.19),(forall (d a p t0 u) (iff (executionDuration d a p t0 u) (exists (e t1 t) (and (executePlan' e a p)(executionStartTime t1 e a p) (intervalBetween t t1 t0)(durationOf d t u))))),There is a total duration for the amount of time that a plan has been being executed as of time t0. d is the duration in units u of agent a's execution of plan p as of time t0.
45,45.2,(45.20),(forall (a p) (iff (missDeadline a p) (exists (t2) (and (deadline t2 p) (not (exists (e t1) (and (executePlan' e a p) (executionEndTime t1 e a p) (before t1 t2)))))))),The concept of a deadline was defined in Chapter 42 on Scheduling. Agents can fail to execute a plan or subplan by its deadline. Agent a misses the deadline for plan p if and only if there is a deadline t2 for p and there is no execution e of the plan whose end time was before t2.
45,45.3,(45.21),(forall (c e a p) (iff (executionCost c e a p) (and (executePlan' e a p)(cost c e a)))),The cost of an execution to an agent is easily expressed in terms of that predicate.
45,45.3,(45.22),(forall (e a p) (iff (executionSuccess e a p) (exists (g) (and (executePlan' e a p)(plan p a g)(cause e g))))),The execution of a plan can result in the achievement of the goal.
45,45.3,(45.23),(forall (e a p) (iff (executionFailure e a p) (exists (g) (and (executePlan' e a p)(plan p a g) (not (cause e g))(not (Rexist g)))))),"The execution of a plan can fail to result in the achievement of the goal. For the execution of a plan to fail, not only must the execution not cause the top-level goal to come about, the top-level goal also cannot come about for reasons unrelated to the plan."
45,45.4,(45.24),(forall (p1 p) (iff (instantiatePlan p1 p) (exists (a g g1 s s1 r r1) (and (plan p a g)(plan p1 a g1)(imply g1 g) (subgoalsOf s p)(subgoalsOf s1 p1) (relationsOf r p)(relationsOf r1 p1) (subset s s1)(subset r r1))))),"Plans can be at various levels of specificity. In a more abstract plan the identity of some of the participants and props may be unspecified and the times of some of the actions may not be fixed. Once we add properties to the plan, by elaborating the subgoals of the plan, then we are creating a new plan that is an instantiation of the old plan. The goal g1 of the more specific plan p1 is something that entails the goal g of the more general plan p, and subgoals and subgoal relations in p are also in p1. Plan p1 fills in details of plan p, including possibly temporal constraints."
45,45.4,(45.25),(forall (p1 p2 p) (iff (sameAbstractPlan p1 p2 p) (exists (a g) (and (plan p1 a g)(plan p2 a g) (instantiatePlan p1 p)(instantiatePlan p2 p) (forall (e) (if (subgoalIn e p)(nontemporal e))))))),Two plans are the same abstract plan if all their nontemporal goals are the same. This means that they are both instantiations of the same nontemporal abstract plan. This concept will allow us to talk about plans that are the same except that one is displaced in time with respect to the other. Plans p1 and p2 are instantiations of the same abstract plan p. p1 and p2 have the same agent and the same goal. There is an abstract plan p that they both instantiate. Abstract plan p has no temporal constraints.
45,45.4,(45.26),(forall (a) (if (person a) (exists (p e g) (and (plan p a g)(execute a e p))))),People execute actions in plans.
45,45.4,(45.27),(forall (a p g s e) (if (and (person a)(plan p a g)(scheduledPlan p)(leftFringe s p) (member e s)(etc)) (execute a e p))),"People defeasibly execute the plans that they had scheduled to do. This axiom only states that they defeasibly execute the left fringe of their scheduled plans, but once they do, they will defeasibly execute the left fringe of the remainder, so that defeasibly they will execute the entire scheduled plan."
45,45.4,(45.28),(forall (p a g) (iff (reusablePlan p a g) (exists (p1 p2 t1 t2) (and (instantiatePlan p1 p)(instantiatePlan p2 p) (timeSpanOf t1 p1)(timeSpanOf t2 p2)(nequal t1 t2))))),A reusable plan is a plan that is sufficiently abstract that it can be instantiated at two different times.
45,45.4,(45.29),(forall (p s) (iff (activity p s) (exists (g) (forall (a) (if (member a s)(reusablePlan p a g)))))),"An activity is an abstract plan that can be instantiated multiple times (i.e., is reusable) and is a plan that all members of a group s have."
45,45.5,(45.30),(forall (e0 a p) (iff (start' e0 a p) (exists (e1 e s e2) (and (changeTo' e2 e1)(gen e2 e0)(execute' e1 a e p)(member e s) (leftFringe s p))))),To start a plan is to start to execute an action in its left fringe.
45,45.5,(45.31),(forall (e0 a p) (iff (start' e0 a p) (exists (e1 e2) (and (changeTo' e2 e1)(gen e2 e0)(executePlan' e1 a p))))),"Equivalently, to start a plan is to change to a state of executing the plan."
45,45.5,(45.32),(forall (a p t) (iff (continue a p t) (exists (p1 s e) (and (remainingPlan p1 a p t)(leftFringe s p1) (member e s)(executing a e p t))))),To continue to execute a plan at time t is to execute an action in the left fringe of the remaining plan at time t.
45,45.5,(45.33),(forall (a p t) (iff (continue a p t)(executingPlan a p t))),"Equivalently, to continue to execute a plan at time t is to be executing the plan at time t."
45,45.5,(45.34),(forall (e0 a p) (iff (stop' e0 a p) (exists (e e1) (and (changeFrom' e1 e)(gen e1 e0)(executePlan' e a p))))),To stop the execution of a plan is to change from executing it to not executing it.
45,45.5,(45.35),(forall (eo a p t1 t2) (iff (postpone' e0 a p t1 t2) (exists (e1 p1 e2 p2 e3 e4) (and (executePlan' e1 a p1) (executionStartTime t1 e1 a p1) (executePlan' e2 a p2) (executionStartTime t2 e2 a p2) (sameAbstractPlan p1 p2 p) (change' e3 e1 e2)(before t1 t2) (cause' e4 a e3)(gen e4 e0))))),"To postpone the execution of a plan is to change the time at which the plan will start to be executed to a later time. e0 is the eventuality in which agent a postpones executing abstract plan p from time t1 to time t2. The executions and start times of the two instantiations of plan p are labeled. These are both instantiations of p. e3 is the change from one instantiation to the other, later one. a's causing this change generates the postponing action."
45,45.5,(45.36),(forall (e0 a p t) (iff (complete' e0 a p t) (exists (e1 e2 e3) (and (executedPlan' e1 a p t)(changeTo' e2 e1) (cause' e3 a e2)(gen e3 e0))))),To complete a plan is to cause a change into the state of having executed it.
45,45.5,(45.37),(forall (e0 a p t) (iff (interrupt' e0 a p t) (exists (e1) (and (stop' e1 a p)(gen e1 e0)(atTime e0 t) (not (complete a p t)))))),To interrupt a plan is to cause the plan to stop without completing it.
45,45.5,(45.38),(forall (e0 a p1 t2) (iff (resume' e0 a p1 t2) (exists (p2 t1 p3 p e1) (and (interrupt a p1 t1)(remainingPlan p2 a p1 t1) (sameAbstractPlan p3 p2 p)(before t1 t2) (start' e1 a p3)(gen e1 e0)(atTime e0 t2))))),"To resume a plan is to start the remaining part of the plan after it has been interrupted. e0 is the eventuality of agent a resuming original plan p1 at time t2. This holds if there was an interruption of p1 at time t1, before t2, where the remaining plan at that time was p2. There is a new instance p3 of the same abstract plan p as p2 that starts at time t2, and this starting generates the resumption."
45,45.5,(45.39),(forall (e0 a p1 t2) (iff (restart' e0 a p1 t2) (exists (t1 p3 p e1) (and (interrupt a p1 t1) (sameAbstractPlan p3 p1 p)(before t1 t2) (start' e1 a p3)(gen e1 e0)(atTime e0 t2))))),To restart a plan is to start it from the beginning after having interrupted it. This definition differs from the definition of resume only in that the new plan p3 is an instantiation of the original plan p1 rather than of the remaining plan at the time of the interruption.
45,45.5,(45.40),(forall (e0 a p t1) (iff (pause' e0 a p t1) (exists (t2 e1) (and (stop' e1 a p)(gen e1 e0)(atTime e0 t1) (resume a p t2)(before t1 t2))))),"To pause in a plan is to stop and to resume. The stopping generates the pausing action, but the resuming has to occur at some subsequent point. It's possible to intend to pause but have it later turn out that it was merely a stopping because there was no resumption."
45,45.5,(45.41),(forall (t e1) (iff (pauseInterval t e1) (exists (a p t1 e2 t2) (and (pause' e1 a p t1)(atTime e1 t1) (resume' e2 a p t2)(before t1 t2) (forall (e3 t3) (if (and (resume' e3 a p t3)(before t1 t3)) (or (equal e3 e2)(before t2 t3)))) (intervalBetween t t1 t2))))),The pause interval is the interval between the stop and the resumption. Interval t is the interval between the time t1 that a pause begins and the time t2 the execution of a plan resumes. The pause event e1 and the resume event e2 are labeled and the former precedes the latter. e2 is the first such resume event.
45,45.5,(45.42),(forall (a p t) (iff (ongoing a p t) (forall (t1) (if (insideTime t1 t) (or (executingPlan a p t1) (pause a p t1)))))),"The execution of a plan is ongoing for a time interval t if it is either being executed or there is a pause in its execution. That is, ongoing spans pauses. Agent a's execution of plan p is ongoing during time interval t exactly when at all instants t1 inside t, there is an execution of p happening at t1 or there is a pause happening at t1."
45,45.5,(45.43),(forall (e a p t) (iff (suspend' e a p t) (exists (e1 t2 e2) (and (interrupt' e2 a p t)(gen e2 e)(intend a e1) (resume' e1 a p t2))))),To suspend the execution of a plan is to interrupt the execution of the plan with the intention of resuming it. The distinction between pausing and suspending is that with suspending there is only the intention to resume. The plan may not actually be resumed. Something is not a pause unless the resumption actually happens.
45,45.5,(45.44),(forall (e0 a p t) (iff (abort' e0 a p t) (exists (e5) (and (interrupt' e5 a p t)(gen e5 e0) (forall (t2) (if (before t t2) (exists (e1 e2 e3 e4) (and (intend a e1)(not' e1 e2) (restart' e2 a p t2) (intend a e3)(not' e3 e4) (resume' e4 a p t2))))))))),"To abort the execution of a plan is to interrupt the execution of the plan with the intention not to restart or resume it. e0 is an aborting by agent a of the execution of plan p at time t. This holds if e0 is generated by an interruption by a of p at t and for all subsequent times, a intends not to restart or resume the execution of p."
45,45.5,(45.45),(forall (e0 a p t) (iff (terminate' e0 a p t) (exists (e1) (and (or (complete' e1 a p t)(abort' e1 a p t)) (gen e1 e0))))),A plan is terminated when it is completed or aborted.
45,45.6,(45.46),(forall (e a x y) (iff (distract' e a x y) (exists (e1 e2 e0 e3) (and (change' e3 e1 e2)(gen e3 e)(thinkOf' e1 a x) (thinkOf' e2 a y) (arg* y e0)(causallyInvolved e0 e3))))),"Distraction happens when there is a change for an agent from thinking of one thing x to thinking of another thing y, where some property of y (e.g., its proximity to the agent) plays a causal role in the change."
45,45.6,(45.47),(forall (a e1 p) (if (and (execute a e1 p)(etc)) (and (thinkOf a e1)(thinkOf a p)))),"When someone is executing an action in the service of a plan, then defeasibly they are thinking of both the action and the plan."
45,45.6,(45.48),(forall (e1 a p y t) (if (and (executingPlan a p t)(distract' e1 a p y) (atTime e1 t)(etc)) (exists (e2) (and (suspend' e2 a p t)(cause e1 e2))))),"It is a defeasible inference that if something distracts us while we are executing a plan, it will cause us to suspend that plan. Agent a is executing plan p at time t and is distracted by y at time t. This distraction e1 causes a's suspension e2 of the execution of plan p."
46,46.1,(46.1),(forall (e e1 e2) (iff (repeatUntil e e1 e2) (and (eventuality e)(eventuality e1)(eventuality e2) (exists (s) (and (tseq s) (forall (e3 t) (if (member' e3 t s) (and (instance e3 e1) (atTime e3 t)))) (forall (t) (if (member t s)(not (atTime e2 t)))) (exists (t0) (and (ends t0 s)(atTime e2 t0))))))),"A repeatUntil eventuality e repeats action e1 until condition e2 holds. The repetitions form a temporal sequence s where each member is an instance of e1, e2 never holds during the sequence, and e2 holds at the end of the sequence."
46,46.1,(46.2),(forall (e e1 e2 e3) (iff (body e1 e e3) (and (repeatUntil e e1 e2)(instance e3 e1)))),"e3 is a body execution of e1 in repeatUntil e if e is a repeatUntil of e1 until e2, and e3 is an instance of e1"
46,46.1,(46.3),(forall (e e1 e2) (iff (termCondition e2 e) (repeatUntil e e1 e2))),e2 is a termination condition of repeatUntil e if e is a repeatUntil of some e1 until e2
46,46.1,(46.4),(forall (e e1 e2 e3) (if (and (repeatUntil e e1 e2)(body e1 e e3)) (subevent e3 e))),"If e3 is a body execution of e1 in a repeatUntil e, then e3 is a subevent of e"
46,46.2,(46.5),(forall (e0 a e p) (iff (repeatUntilExecution' e0 a e p) (and (execute' e0 a e p)(repeatUntil e e1 e2)))),"e0 is a repeatUntil execution by agent a of eventuality e in plan p if e0 is an execution of e by a in p, and e has a repeatUntil structure"
46,46.2,(46.6),(forall (e0 a p) (iff (repeatUntilPlanExecution' e0 a p) (and (executePlan' e0 a p)(exists (e e1 e2) (and (topGoal e p)(repeatUntil e e1 e2)))))),"e0 is a repeatUntil plan execution by agent a of plan p if e0 is an execution of plan p by a, and the top goal of p has a repeatUntil structure"
46,46.2,(46.7),(forall (e0 a p e e1 e2 e3 e4) (if (and (repeatUntilPlanExecution' e0 a p)(topGoal e p) (repeatUntil e e1 e2)(body e1 e e3)(execute' e4 a e3 p)) (subexecution e4 e0))),"If e0 is a repeatUntil plan execution, e3 is a body execution of the repeat body, and e4 is an execution of e3, then e4 is a subexecution of e0"
46,46.2,(46.8),(forall (e0 a p e e1 e2 e3 e4 e5 e6 t1 t2) (if (and (repeatUntilPlanExecution' e0 a p)(topGoal e p)(repeatUntil e e1 e2) (body e1 e e3)(body e1 e e5)(execute' e4 a e3 p)(execute' e6 a e5 p) (atTime e4 t1)(atTime e6 t2)) (or (before t1 t2)(before t2 t1)(equal t1 t2)))),"In a repeatUntil plan execution, body executions are temporally ordered - they occur either before, after, or simultaneous with each other"
46,46.3,(46.9),(forall (e s x e1) (iff (iterateThrough e s x e1) (and (sequence s)(forall (n y) (if (and (inSeq y n s)(instance e1 e)) (and (atTime e1 n)(arg* x e1))))))),"Event e iterates through sequence s with element x and event type e1 if s is a sequence, and for each position n with element y in s, there's an instance e1 of event type e at time n with x as argument"
46,46.3,(46.10),(forall (e0 a e p) (iff (iterateThroughExecution' e0 a e p) (and (execute' e0 a e p)(exists (s x e1) (iterateThrough e s x e1))))),"e0 is an iterateThrough execution by agent a of event e in plan p if e0 is an execution of e by a in p, and e has an iterateThrough structure"
46,46.3,(46.11),(forall (e0 a p) (iff (iterateThroughPlanExecution' e0 a p) (and (executePlan' e0 a p)(exists (e s x e1) (and (topGoal e p)(iterateThrough e s x e1)))))),"e0 is an iterateThrough plan execution by agent a of plan p if e0 is an execution of plan p by a, and the top goal of p has an iterateThrough structure"
46,46.3,(46.12),(forall (e0 a p e s x e1 e2 e3) (if (and (iterateThroughPlanExecution' e0 a p)(topGoal e p) (iterateThrough e s x e1)(instance e2 e1)(execute' e3 a e2 p)) (subexecution e3 e0))),"If e0 is an iterateThrough plan execution, e2 is an instance of the iteration event type, and e3 is an execution of e2, then e3 is a subexecution of e0"
46,46.4,(46.13),(forall (e0 a e p) (iff (startRepetition' e0 a e p) (and (repeatUntilExecution' e0 a e p)(exists (e1 e2 e3 e4) (and (repeatUntil e e1 e2)(body e1 e e3) (execute' e4 a e3 p)(first' e0 e4)))))),"e0 is starting a repetition by agent a of event e in plan p if e0 is a repeatUntil execution, and there's a first body execution e4 that is the first subevent of e0"
46,46.4,(46.14),(forall (e0 a e p) (iff (continueRepetition' e0 a e p) (and (repeatUntilExecution' e0 a e p)(exists (e1 e2 e3 e4) (and (repeatUntil e e1 e2)(body e1 e e3) (execute' e4 a e3 p)(not (first' e0 e4))(not (last' e0 e4))))))),"e0 is continuing a repetition by agent a of event e in plan p if e0 is a repeatUntil execution, and there's a body execution e4 that is neither first nor last in the execution sequence"
46,46.4,(46.15),(forall (e0 a e p) (iff (endRepetition' e0 a e p) (and (repeatUntilExecution' e0 a e p)(exists (e1 e2 e3 e4) (and (repeatUntil e e1 e2)(body e1 e e3) (execute' e4 a e3 p)(last' e0 e4)))))),"e0 is ending a repetition by agent a of event e in plan p if e0 is a repeatUntil execution, and there's a last body execution e4 that is the final subevent of e0"
46,46.5,(46.16),(forall (e0 a p e e1 e2 e3 e4 e5 e6 t1 t2) (if (and (repeatUntilPlanExecution' e0 a p)(topGoal e p)(repeatUntil e e1 e2) (body e1 e e3)(body e1 e e5)(execute' e4 a e3 p)(execute' e6 a e5 p) (atTime e4 t1)(atTime e6 t2)(before e4 e6)) (before t1 t2))),"In a repeatUntil plan execution, if one body execution occurs before another, then their times are also ordered - earlier executions occur at earlier times"
46,46.5,(46.17),(forall (e0 a p e e1 e2 t) (if (and (repeatUntilPlanExecution' e0 a p)(topGoal e p)(repeatUntil e e1 e2) (atTime e0 t)(ends t e0)) (exists (t0) (and (before t0 t)(atTime e2 t0))))),"In a repeatUntil plan execution, when the execution ends at time t, the termination condition e2 must have been satisfied at some earlier time t0"
46,46.1,(46.1),(forall (a e e1 c p) (iff (repetition a e e1 c p) (exists (g p1 e3) (and (repeatUntil' e3 e1 c)(executePlan e a p)(gen e3 e) (plan p a g)(subplan p1 p) (forall (e2) (if (executePlan' e2 a p1) (instance e2 e1))))))),"Agent a's execution e of plan p is a repetition of executions e1 until condition c is satisfied, with e3 having repeatUntil structure generating the execution"
46,46.1,(46.2),(forall (e2 e) (iff (aRepetition e2 e) (exists (a e1 c p) (and (repetition a e e1 c p)(instance e2 e1))))),Execution e2 is an instance of the body of repetitive execution e
46,46.1,(46.3),(forall (e2 e) (iff (startRepetition e2 e) (exists (a e1 c p) (and (repetition a e e1 c p)(instance e2 e1) (forall (e3) (if (instance e3 e1) (or (equal e3 e2)(before e2 e3)))))))),"Execution e2 is the first repetition of the body of repetitive execution e, occurring before all other instances"
46,46.1,(46.4),(forall (e2 e) (iff (terminateRepetition e2 e) (exists (a e1 c p) (and (repetition a e e1 c p)(instance e2 e1) (forall (e3) (if (instance e3 e1) (or (equal e3 e2)(before e3 e2)))))))),"Execution e2 is the last repetition of the body of repetitive execution e, occurring after all other instances"
46,46.1,(46.5),(forall (e2 e) (iff (intermediateRepetition e2 e) (exists (a e1 c p) (and (repetition a e e1 c p)(instance e2 e1) (not (startRepetition e2 e)) (not (terminateRepetition e2 e)))))),Execution e2 is an intermediate repetition that is neither the first nor last instance of the body
46,46.1,(46.6),(forall (s e t) (iff (completedRepetitions s e t) (and (repetition a e e1 c p) (forall (e2) (iff (member e2 s) (and (aRepetition e2 e) (executed a e2 p t))))))),Set s contains the repetitions of execution e that have been completed by time t
46,46.1,(46.7),(forall (s e t) (iff (remainingRepetitions s e t) (and (repetition a e e1 c p) (forall (e2) (iff (member e2 s) (and (aRepetition e2 e) (not (executed a e2 p t)))))))),Set s contains the repetitions of execution e that remain to be executed at time t
46,46.1,(46.8),(forall (e2 e t) (iff (currentRepetition e2 e t) (exists (a e1 c p t1 t2) (and (repetition a e e1 c p)(aRepetition e2 e) (begins t1 e2)(before t1 t) (ends t2 e2)(before t t2))))),"Execution e2 is the current repetition in repetitive execution e at time t, with t between its start and end times"
46,46.1,(46.9),(forall (e2 e t) (iff (previousRepetition e2 e t) (exists (a e1 c p t2 e0 t0) (and (repetition a e e1 c p)(aRepetition e2 e) (ends t2 e2)(before t2 t) (startRepetition e0 e)(ends t0 e0)(before t0 t) (not (exists (e3 t3) (and (aRepetition e3 e)(nequal e3 e2) (ends t3 e3)(before t2 t3) (before t3 t)))))))),"Execution e2 is the most recent repetition that ended before time t, with no other repetitions ending between e2 and t"
46,46.1,(46.10),(forall (e2 e t) (iff (nextRepetition e2 e t) (exists (a e1 c p t2 e0 t0) (and (repetition a e e1 c p)(aRepetition e2 e) (begins t2 e2)(before t t2) (terminateRepetition e0 e)(begins t0 e0) (before t t0) (not (exists (e3 t3) (and (aRepetition e3 e)(nequal e3 e2) (begins t3 e3)(before t3 t2) (before t t3)))))))),"Execution e2 is the next repetition that begins after time t, with no other repetitions beginning between t and e2"
46,46.1,(46.11),(forall (n e t) (iff (repetitionsCount n e t) (exists (a e1 c p s) (and (repetition a e e1 c p) (completedRepetitions s e t)(card n s))))),Integer n is the number of repetitions of execution e that have been completed by time t
46,46.1,(46.12),(forall (e e1 x s s1) (iff (iterationThru e e1 x s s1) (and (arg* x e1)(sequence s)(sequence s1) (forall (y) (if (inSeq y s)(instance y x))) (forall (e2 n) (iff (nth e2 n s1) (exists (y) (and (nth y n s) (subst x e1 y e2)))))))),Execution e is an iteration through sequence s where entity x in body e1 is substituted by successive elements of s to create sequence s1 of instantiated executions
46,46.1,(46.13),(forall (e2 e) (iff (startIterationThru e2 e) (exists (e1 x s s1) (and (iterationThru e e1 x s s1)(first e2 s1))))),"Execution e2 is the first iteration in the iterationThru e, being the first element in the sequence of iterations"
46,46.1,(46.14),(forall (s0 e t) (iff (completedIterationsThru s0 e t) (exists (e1 x s s1) (and (iterationThru e e1 x s s1) (forall (e2) (iff (member e2 s0) (exists (t2) (and (member e2 s1)(ends t2 e2) (before t2 t))))))))),Set s0 contains the iterations through e that have been completed by time t
46,46.1,(46.15),(forall (e3 a e t) (iff (doNextIterationThru' e3 a e t) (exists (e1 x s s1 p) (and (iterationThru e e1 x s s1) (execute a e3 p) (nextRepetition e3 e t))))),Action e3 is agent a's execution of the next iteration in the iterationThru e at time t
46,46.1,(46.16),(forall (a e t) (iff (abortIterationThru a e t) (exists (e1 x s s1 p) (and (iterationThru e e1 x s s1) (executePlan' e a p) (abort a p t))))),Agent a aborts iterationThru e at time t before completing the entire sequence of entities
46,46.1,(46.17),(forall (a e t) (iff (completeIterationThru a e t) (exists (e1 x s s1 p) (and (iterationThru e e1 x s s1) (executePlan' e a p) (executedPlan a p t))))),Agent a completes iterationThru e at time t when all entities in the sequence have been processed
47,47.2,(47.1),(forall (m p) (if (mind m p) (not (physobj m)))),"If m is a mind of person p, then m is not a physical object"
47,47.3,(47.2),(forall (m p) (if (and (person p)(mind m p)) (exists (a) (awareness a m)))),"For every person p with mind m, there exists an awareness a associated with m"
47,47.3,(47.3),(forall (p m a) (if (and (person p)(mind m p)) (iff (awareness a p)(awareness a m)))),"For a person p with mind m, awareness a can be predicated of either p or m equivalently"
47,47.3,(47.4),(forall (x y) (if (inm x y) (exists (p) (or (focusOfAttention y p)(awareness y p)(memory y p))))),"If concept x is mentally in y, then y is either focus of attention, awareness, or memory for some person p"
47,47.3,(47.5),(forall (x p) (if (inFocus x p) (exists (a) (and (awareness a p)(inm x a))))),"If concept x is in focus for person p, then x is also in p's awareness"
47,47.3,(47.6),(forall (e p x) (iff (concentrate' e p x) (exists (e1 e2) (and (thinkOf' e2 p x)(gen e2 e)(will' e1 p e2)(dcause e1 e2))))),"Event e of person p concentrating on x is willing oneself to think of x, which directly causes the thinking"
47,47.4,(47.7),(forall (e p x a) (if (and (perceive' e p x)(person p)(awareness a p)) (exists (e1) (and (inm' e1 x a)(cause e e1))))),"If person p perceives x in event e, then e causes x to be in p's awareness"
47,47.4,(47.8),(forall (e p x m a) (if (and (perceive' e p x)(person p)(etc)) (exists (e1) (and (inFocus' e1 x p)(cause e e1))))),"If person p perceives x, then defeasibly this causes x to be in p's focus of attention"
47,47.4,(47.9),(forall (e p x) (if (and (perceive' e p x)(person p)) (exists (y) (and (intact' e1 y)(senseOrgan y p)(enable e1 e))))),"If person p perceives x, then there exists an intact sense organ y that enables the perception"
47,47.4,(47.10),(forall (y p) (if (eye y p)(senseOrgan y p))),"If y is an eye of person p, then y is a sense organ of p"
47,47.4,(47.11),(forall (y p) (if (ear y p)(senseOrgan y p))),"If y is an ear of person p, then y is a sense organ of p"
47,47.4,(47.12),(forall (y p) (if (tongue y p)(senseOrgan y p))),"If y is a tongue of person p, then y is a sense organ of p"
47,47.4,(47.13),(forall (y p) (if (nose y p)(senseOrgan y p))),"If y is a nose of person p, then y is a sense organ of p"
47,47.4,(47.14),(forall (e x p) (if (and (stimulate' e x p)(person p)(etc)) (exists (e1) (and (perceive' e1 p x)(cause e e1))))),"If entity x stimulates person p, then defeasibly this causes p to perceive x"
47,47.4,(47.15),(forall (e p y) (iff (attendToSense' e p y) (exists (e1 x e2 e3 e4) (and (perceive' e1 p x)(person p) (senseOrgan y p)(intact' e3 y)(enable e3 e1) (will' e2 p e4)(dcause e2 e4) (concentrate' e4 p x)(gen e4 e))))),"Event e of person p attending to sense organ y is concentrating on what is perceived via y, caused by willing"
47,47.5,(47.16),(forall (e p) (iff (bodilyAction e p) (exists (x y z) (and (person p)(bodyPart x p)(move' e x y z))))),Event e is a bodily action by person p if it is the movement of one of p's body parts from y to z
47,47.5,(47.17),(forall (e p) (iff (reflex e p) (exists (e1 x1 y1 z1 s e2) (and (bodilyAction e p)(move' e1 x1 y1 z1) (not (at y1 p s))(bodyPart z1 p)(cause e1 e) (arg* z1 e2)(enable e2 e) (not (exists (e3) (and (will' e3 p e)(dcause e3 e)))))))),"Event e is a reflex by person p if it's a bodily action caused by external motion to a body part, but not willed"
47,47.5,(47.18),(forall (e p) (iff (tic e p) (exists (b e2) (and (bodilyAction e p)(not (reflex e p)) (body b p)(arg* b e2)(enable e2 e) (not (exists (e3) (and (will' e3 p e)(dcause e3 e)))))))),Event e is a tic by person p if it's an unwilled bodily action enabled by body properties but not a reflex
47,47.5,(47.19),(forall (e p) (iff (voluntaryAction e p) (exists (e3) (and (bodilyAction e p) (will' e3 p e)(dcause e3 e))))),Event e is a voluntary action by person p if it's a bodily action that is directly caused by willing
47,47.5,(47.20),(forall (e p) (if (and (voluntaryAction e p)(etc)) (exists (q) (executePlan' e p q)))),"If e is a voluntary action by person p, then defeasibly e is an execution of some plan q by p"
47,47.5,(47.21),(forall (e p) (if (and (voluntaryAction e p)(etc)) (exists (e0 q) (execute' e p e0 q)))),"If e is a voluntary action by person p, then defeasibly e serves some subgoal e0 of a larger plan q"
47,47.5,(47.22),(forall (e p) (iff (involuntaryAction e p) (or (reflex e p)(tic e p)))),Event e is an involuntary action by person p if it is either a reflex or a tic
47,47.5,(47.23),(forall (p b) (iff (controlBody p b) (and (person p)(body b p) (exists (e) (voluntaryAction e p))))),Person p controls body b if p has b as their body and p performs voluntary actions
47,47.5,(47.24),(forall (e p) (iff (coordinatedAction e p) (exists (e1 e2 e3 e4 t1 t2) (and (bodilyAction e1 p)(subevent e1 e) (atTime' e3 e1 t1) (bodilyAction e2 p)(subevent e2 e) (atTime' e4 e2 t2) (causallyInvolved e3 e4))))),Event e is a coordinated action by person p if it involves multiple body parts whose timing is causally related
47,47.5,(47.25),(forall (e p e1) (if (and (will' e1 p e)(bodilyAction e p)(not (dcause e1 e))) (failedBodilyAction e p))),"If person p wills bodily action e but the willing doesn't directly cause e, then e is a failed bodily action"
47,47.5,(47.26),(forall (e p e1 e2) (if (and (will' e1 p e)(bodilyAction e p)(dcause e1 e) (subgoal e e2) (not (cause e e2))) (failedBodilyAction e p))),"If person p successfully wills bodily action e but e fails to achieve its subgoal e2, then e is failed"
47,47.5,(47.27),(forall (e p e1 e2) (if (and (will' e1 p e)(bodilyAction e p)(dcause e1 e) (subgoal e e2)(cause e e2)) (successfulBodilyAction e p))),"If person p successfully wills bodily action e and e achieves its subgoal e2, then e is successful"
47,47.5,(47.28),(forall (e p) (iff (fluentAction e p) (exists (q) (and (voluntaryAction e p)(executePlan' e p q) (skilled e q))))),Event e is a fluent action by person p if it's a skilled execution of a voluntary action plan
47,47.5,(47.29),(forall (e p) (iff (awkwardAction e p) (exists (q s s1) (and (voluntaryAction e p)(executePlan' e p q) (skillScale s q)(Lo s1 s)(inScale e s1))))),Event e is an awkward action by person p if it's a voluntary action in the low region of the skill scale
47,47.6,(47.30),(forall (e p) (if (and (bodilyAction e p)(etc)) (perceive p e))),"If e is a bodily action by person p, then defeasibly p perceives e"
47,47.6,(47.31),(forall (e p) (if (voluntaryAction e p)(perceive p e))),"If e is a voluntary action by person p, then p perceives e (non-defeasibly)"
47,47.7,(47.32),(forall (e p) (iff (senseOrganAction e p) (exists (x y z e1 w) (and (person p)(senseOrgan x p)(move' e x y z) (or (and (enable e e1)(perceive' e1 p w)) (and (enable e e2)(not' e2 e1))))))),Event e is a sense organ action by person p if it moves a sense organ to enable or prevent perception
47,47.7,(47.33),(forall (p s) (iff (tuneIn p x) (exists (e1 e2) (and (person p)(perceive p x) (will' e1 p e2)(inFocus' e2 x p)(dcause e1 e2))))),"Person p tunes in to perception x by willing x to be in focus, which directly causes it"
47,47.7,(47.34),(forall (p s) (iff (tuneOut p x) (exists (e1 e2 e3) (and (person p)(perceive p x) (will' e1 p e3)(not' e3 e2)(inFocus' e2 x p) (dcause e1 e3))))),"Person p tunes out perception x by willing x not to be in focus, which directly causes the negation"
47,47.8,(47.35),(forall (x) (iff (impaired x) (exists (e1 y e e2 e3) (and (functionality e1 y e x) (arg* y e2)(not' e3 e1)(cause e2 e3))))),Entity x is impaired if some functionality e1 of component y is not achieved due to properties of y
47,47.8,(47.36),(forall (x) (iff (destroyed x) (forall (e1 y e) (if (functionality e1 y e x) (exists (e2 e3) (and (arg* y e2)(not' e3 e1) (cause e2 e3))))))),Entity x is destroyed if none of its functional components achieve their functionality
47,47.8,(47.37),(forall (p b e1) (if (and (person p)(body b p) (thrive' e1 p)(functionality0 e1 p)) (exists (e2) (and (thrivePhysically' e2 b) (functionality e2 b e1 p))))),"If person p's thriving e1 is their absolute functionality, then body b's physical thriving e2 is its relative functionality"
47,47.8,(47.38),(forall (b p) (if (body b p) (or (intact b)(impaired b)(destroyed b)))),"Every body b of person p is either intact, impaired, or destroyed"
47,47.8,(47.39),(forall (x p) (if (bodyPart x p) (or (intact x)(impaired x)(destroyed x)))),"Every body part x of person p is either intact, impaired, or destroyed"
47,47.8,(47.40),(forall (s p) (if (ecs s p) (reasoning p))),"If person p has eventuality complex structure s, then p is reasoning"
47,47.8,(47.41),(forall (p e1 e2 e3 e4 e5 e6) (if (and (person p)(imply' e1 e2 e3)(and' e4 e2 e1) (inFocus' e5 e4 p)(inFocus' e6 e3 p)(cause e5 e6)) (reasoning p))),"If person p has logical premises in focus that cause the conclusion to be in focus, then p is reasoning"
47,47.8,(47.42),(forall (p m) (if (and (person p)(mind m p)) (iff (active m) (exists (x) (and (inFocus x p)(reasoning p)))))),Mind m of person p is active if there are thoughts in focus and p is reasoning
47,47.8,(47.43),(forall (p m) (if (and (person p)(mind m p)) (iff (impaired m) (and (exists (x) (inFocus x p)) (not (reasoning p)))))),Mind m of person p is impaired if there are thoughts in focus but p is not reasoning
47,47.8,(47.44),(forall (p m) (if (and (person p)(mind m p)) (iff (inactive m) (not (exists (x) (inFocus x p)))))),Mind m of person p is inactive if there are no thoughts in focus
47,47.8,(47.45),(forall (m p) (if (and (person p)(mind m p)) (xor (active m)(impaired m)(inactive m)))),"Mind m of person p is either active, impaired, or inactive (exclusively)"
47,47.8,(47.46),(forall (p) (if (person p) (exists (s c) (and (sensationChannel s p)(controlChannel c p))))),Every person p has a sensation channel s and a control channel c
47,47.8,(47.47),(forall (p s o e1 x s1) (if (and (person p)(sensationChannel s p)(senseOrgan o p) (near' e1 x o s1)(spatialSystem s1)) (iff (active s) (and (exists (e2) (and (perceive' e2 p x)(cause e1 e2))) (forall (y) (if (perceive p y)(Rexist y))))))),Sensation channel s is active if nearby entities cause perception and all perceived things exist
47,47.8,(47.48),(forall (p s) (if (and (person p)(sensationChannel s p)) (iff (impaired s) (exists (y) (and (perceive p y)(not (Rexist y))))))),Sensation channel s is impaired if person p perceives things that don't actually exist
47,47.8,(47.49),(forall (p s) (if (and (person p)(sensationChannel s p)) (iff (inactive s) (forall (o x s1) (if (and (senseOrgan o p)(near x o s1)(spatialSystem s1)) (not (perceive p x))))))),Sensation channel s is inactive if person p fails to perceive nearby entities via sense organs
47,47.8,(47.50),(forall (s p) (if (and (person p)(sensationChannel s p)) (xor (active s)(impaired s)(inactive s)))),"Sensation channel s is either active, impaired, or inactive (exclusively)"
47,47.8,(47.51),(forall (p c) (if (and (person p)(controlChannel c p)) (iff (active c) (forall (e1 e) (if (and (will' e1 p e)(voluntaryAction e p)) (cause e1 e)))))),Control channel c is active if willing voluntary actions always causes those actions to occur
47,47.8,(47.52),(forall (p c) (if (and (person p)(controlChannel c p)) (iff (impaired c) (exists (e e0 e1) (and (will' e1 p e)(voluntaryAction e p) (cause e1 e0)(bodilyAction e0 p) (not (equal e0 e))))))),Control channel c is impaired if willing a voluntary action causes a different bodily action than intended
47,47.8,(47.53),(forall (p c) (if (and (person p)(controlChannel c p)) (iff (inactive c) (or (not (exists (e1 e) (will' e1 p e))) (forall (e1 e) (if (will' e1 p e) (not (exists (e0) (and (bodilyAction e0 p) (cause e1 e0)))))))))),Control channel c is inactive if no willing occurs or willing causes no bodily actions
47,47.8,(47.54),(forall (c p) (if (and (person p)(controlChannel c p)) (xor (active c)(impaired c)(inactive c)))),"Control channel c is either active, impaired, or inactive (exclusively)"
47,47.9,(47.55),(forall (p b m s c) (if (and (person p)(body b p)(mind m p)(sensationChannel s p) (controlChannel c p)(fine p)) (and (intact b)(active m)(active s)(active c)))),"If person p is fine, then their body is intact and their mind and channels are active"
47,47.9,(47.56),(forall (p b m s c) (if (and (person p)(body b p)(mind m p)(sensationChannel s p) (controlChannel c p)(unconscious p)) (and (intact b)(inactive m)(inactive s)(inactive c)))),"If person p is unconscious, then their body is intact but their mind and channels are inactive"
48,48.1,(48.1),(forall (e b c) (iff (observableExecution e b c) (exists (a p e0 e1 e2) (and (executePlan' e a p)(execute' e1 a e0 p) (not (agentOf b e)) (possible e2 c)(perceive' e2 b e1))))),Execution e is observable by agent b under constraints c if some subgoal execution e1 can be perceived by b
48,48.1,(48.2),(forall (e b c) (iff (unobservableExecution e b c) (exists (a p) (and (executePlan' e a p)(not (agentOf b e)) (forall (e0 e1 e2) (if (and (execute' e1 a e0 p) (perceive' e2 b e1)) (not (possible e2 c)))))))),Execution e is unobservable by agent b under constraints c if no subgoal execution can be perceived by b
48,48.1,(48.3),(forall (e b) (iff (observedExecution e b) (exists (a p e0 e1 e2) (and (executePlan' e a p)(execute' e1 a e0 p) (not (agentOf b e)) (perceive b e1))))),Execution e is actually observed by agent b if b perceives some subgoal execution of e
48,48.1,(48.4),(forall (e b) (iff (unobservedExecution e b) (exists (a p) (and (executePlan' e a p)(not (agentOf b e)) (forall (e0 e1) (if (execute' e1 a e0 p) (not (perceive b e1)))))))),Execution e is unobserved by agent b if b perceives no subgoal executions of e
48,48.1,(48.5),(forall (e) (iff (observedByNoneExecution e) (forall (b) (if (not (agentOf b e))(unobservedExecution e b))))),Execution e is observed by no one except its agent if all other agents fail to observe it
48,48.1,(48.6),(forall (e b) (if (observedExecution e b) (exists (c) (and (observableExecution e b c)(Rexist c))))),"If execution e is actually observed by agent b, then there exist constraints c under which e is observable by b"
48,48.1,(48.7),(forall (e b c) (if (and (unobservableExecution e b c)(Rexist c)) (unobservedExecution e b))),"If execution e is unobservable by agent b under existing constraints c, then e is unobserved by b"
48,48.2,(48.8),(forall (d) (iff (document d) (exists (y s) (mean d y s)))),Document d is any meaning-bearing object that means concept y to members of social group s
48,48.2,(48.9),(forall (d g) (iff (instructions d g) (exists (p s a) (and (document d)(mean d p s) (member a s)(plan p a g))))),"Document d is instructions for goal g if d means plan p to group s members, where p is a plan to achieve g"
48,48.2,(48.10),(forall (p a g) (iff (explicitPlan p a g) (exists (d s) (and (instructions d g)(mean d p s) (member a s)(plan p a g))))),Plan p is explicit for agent a and goal g if there exists a document specifying p as instructions for g
48,48.3,(48.11),(forall (e a p s) (iff (performance e a p s) (exists (g) (and (explicitPlan p a g)(executePlan' e a p) (forall (b) (if (member b s)(perceive b e))))))),Event e is a performance by agent a of plan p before audience s if e executes explicit plan p and all audience members perceive e
48,48.3,(48.12),(forall (d a g) (iff (performanceSpecification d a g) (exists (e p s) (and (instructions d g)(performance e a p s) (explicitPlan p a g))))),Document d is a performance specification for agent a and goal g if d specifies instructions for a performance of plan p
48,48.3,(48.13),(forall (e d a g) (iff (candidatePerformanceSpecification' e d a g) (exists (e1 e2 c e3) (and (believe' e3 a e1)(gen e3 e)(possible' e1 e2 c) (performanceSpecification' e2 d a g))))),Event e is d being a candidate performance specification for agent a to achieve goal g when a believes d is possibly a performance specification
48,48.3,(48.14),(forall (e a d g) (iff (generateCandidatePerformanceSpecification' e d a g) (exists (e1 e2) (and (changeTo' e2 e1)(gen e2 e) (candidatePerformanceSpecification' e1 d a g))))),Event e is generating candidate performance specification d for agent a to achieve goal g through a change to that state
48,48.3,(48.15),(forall (e a d1 d2 g) (iff (modifyCandidatePerformanceSpecification' e d1 d2 a g) (exists (e1 e2 e3) (and (change' e3 e1 e2)(gen e3 e) (candidatePerformanceSpecification' e1 d1 a g) (candidatePerformanceSpecification' e2 d2 a g))))),Event e is modifying candidate performance specification from document d1 to d2 for agent a to achieve goal g
48,48.3,(48.16),(forall (e a d g) (iff (invalidateCandidatePerformanceSpecification' e d a g) (exists (e1 e2 e3 e4) (and (change' e4 e1 e2)(gen e4 e) (candidatePerformanceSpecification' e1 d a g) (believe' e2 a e3)(not' e3 e1))))),Event e is invalidating candidate performance specification d for agent a when a stops believing d is a performance specification
48,48.3,(48.17),(forall (e a d g) (iff (validateCandidatePerformanceSpecification' e d a g) (exists (e1 e2 e3) (and (change' e3 e1 e2)(gen e3 e) (candidatePerformanceSpecification' e1 d a g) (performanceSpecification' e2 d a g))))),Event e is validating candidate performance specification d for agent a when d is promoted to a performance specification
48,48.4,(48.18),(forall (e a p d) (iff (rightWay e a p d) (exists (s) (and (executePlan' e a p)(mean d p s))))),Event e is the right way for agent a to carry out plan p according to document d if e executes p and d describes p
48,48.4,(48.19),(forall (e1 a p p1 g) (iff (attemptExecute' e1 a p p1 g) (exists (e e2 e3) (and (executePlan' e3 a p1)(gen e3 e1)(plan p a g)(plan p1 a g) (goal' e2 e a)(executePlan' e a p) (cause e2 e1))))),"Event e1 is an attempted execution by agent a of plan p, actually instantiating plan p1, where wanting to execute p causes executing p1"
48,48.4,(48.20),(forall (e1 e2 a p p1 p2 s s1 s2 s3 s4 s5 s6) (if (and (attemptExecute' e1 a p p1 g) (attemptExecute' e2 a p p2 g) (subgoalsOf s p)(subgoalsOf s1 p1)(subgoalsOf s2 p2) (setdiff s3 s1 s)(setdiff s4 s2 s) (intersection s5 s1 s)(intersection s6 s2 s) (subset s3 s4)(properSubset s6 s5)) (moreSkilled e1 e2 p))),Execution e1 is more skilled than e2 at plan p if e1 has fewer extraneous subgoals and more correct subgoals than e2
48,48.4,(48.21),(forall (e1 e2 a p p1 p2 s s1 s2 s3 s4 s5 s6) (if (and (attemptExecute' e1 a p p1 g) (attemptExecute' e2 a p p2 g) (subgoalsOf s p)(subgoalsOf s1 p1)(subgoalsOf s2 p2) (setdiff s3 s1 s)(setdiff s4 s2 s) (intersection s5 s1 s)(intersection s6 s2 s) (properSubset s3 s4)(subset s6 s5)) (moreSkilled e1 e2 p))),Execution e1 is more skilled than e2 at plan p if e2 has more extraneous subgoals than e1 and not fewer correct subgoals
48,48.4,(48.22),(forall (s p) (iff (skillScale s p) (exists (s1 a g e1 e2) (and (scaleDefinedBy s s1 e)(plan p a g) (forall (e0) (if (member e0 s1) (exists (a1 p1) (and (plan p1 a1 g) (attemptExecute' e0 a1 p p1 g))))) (moreSkilled' e e1 e2 p))))),"Scale s is the skill scale for plan p, defined by attempted executions ordered by the moreSkilled relation"
48,48.4,(48.23),(forall (e p) (iff (skilled e p) (exists (s s1) (and (skillScale s p)(Hi s1 s) (inScale e s1))))),Attempted execution e was skilled at plan p if e is in the high region of the skill scale for p
48,48.4,(48.24),(forall (y e1 e2 p) (if (and (skillLevel y e1 p)(skillLevel y e2 p)) (and (not (moreSkilled e1 e2 p)) (not (moreSkilled e2 e1 p))))),"If executions e1 and e2 have the same skill level y for plan p, then neither is more skilled than the other"
48,48.4,(48.25),(forall (s y e p) (if (and (skillScale s p)(skillLevel y e p)) (at e y s))),"If y is a skill level for execution e of plan p and s is the skill scale for p, then e is at position y on scale s"
48,48.4,(48.26),(forall (e1 e2 a1 a2 p p1 p2 g s) (if (and (attemptExecute' e1 a1 p p1 g) (attemptExecute' e2 a2 p p2 g) (skillScale s p) (subst a1 e1 a2 e2)) (forall (y) (iff (skillLevel y e1 p)(skillLevel y e2 p))))),Skill levels are agent-independent: executions that differ only in the performing agent have the same skill level
48,48.5,(48.27),(forall (e b e1 p y) (iff (evaluate' e b e1 p y) (exists (a p1 g e2 e3 s e4 e5) (and (attemptExecute' e1 a p p1 g) (changeTo' e5 e2)(gen e5 e)(believe' e2 b e3) (skillLevel' e3 y e1 p) (perceive' e4 b e1)(cause e4 e5))))),"Event e is agent b evaluating performance e1 of plan p as skill level y, caused by perceiving e1 and resulting in believing the skill level"
48,48.5,(48.28),(forall (y e) (iff (evaluationResult y e) (exists (b e1 p) (evaluate' e b e1 p y)))),Value y is the result of evaluation e if there is some agent evaluating some performance with result y
48,48.5,(48.29),(forall (a b e1 e4 p p1 g) (if (and (perceive' e4 b e1) (attemptExecute' e1 a p p1 g)(etc)) (exists (e y) (and (evaluate' e b e1 p y) (cause e4 e))))),"If agent b witnesses attempted execution e1 of plan p, then defeasibly b evaluates e1, caused by the witnessing"
48,48.5,(48.30),(forall (e0 p) (iff (evaluationCriterion e0 p) (exists (e b e1 y e2) (and (evaluate' e b e1 p y)(evaluationResult' e2 y e) (arg* e1 e0)(causallyInvolved e0 e2))))),Property e0 is an evaluation criterion for plan p if e0 is a property of some execution and causally involved in evaluation results
49,49.2,(49.1),(forall (e p) (if (emotionalState e p)(and (eventuality e)(person p)))),"If e is an emotional state in person p, then e is an eventuality and p is a person"
49,49.2,(49.2),(forall (p e1 e2 e3 e4) (if (and (emotionalState e1 p)(emotionalState e2 p) (cause e3 e1)(cause e4 e2) (moreImportant e3 e4 p)(etc)) (moreIntense e1 e2 p))),"If emotional states e1 and e2 in person p are caused by e3 and e4 respectively, and e3 is more important to p than e4, then defeasibly e1 is more intense than e2"
49,49.2,(49.3),(forall (p e1 e2 e3 e4) (if (and (emotionalState e1 p)(emotionalState e2 p) (cause e3 e1)(cause e4 e2) (subevent e4 e3)(etc)) (moreIntense e1 e2 p))),"If emotional states e1 and e2 in person p are caused by e3 and e4 respectively, and e4 is a subevent of e3, then defeasibly e1 is more intense than e2"
49,49.2,(49.4),(forall (p e1 e2 e3 e4) (if (and (emotionalState e1 p)(emotionalState e2 p) (cause e1 e3)(cause e2 e4) (subevent e4 e3)(etc)) (moreIntense e1 e2 p))),"If emotional states e1 and e2 in person p cause responses e3 and e4 respectively, and e4 is a subevent of e3, then defeasibly e1 is more intense than e2"
49,49.2,(49.5),(forall (p e0 e1 e2 s0 s s1) (if (and (forall (e) (if (member e s0)(emotionalState e p))) (moreIntense' e0 e1 e2 p)(scaleDefinedBy s s0 e0)(Hi s1 s)) (forall (e) (iff (intense e p)(inScale e s1))))),An emotional state is intense if it is in the Hi region of the moreIntense scale for a person
49,49.2,(49.6),(forall (e1 p) (if (and (happy' e1 p)(intense e1 p)(etc)) (exists (e2) (and (aroused' e2 p)(cause e1 e2))))),Intense happiness defeasibly causes arousal
49,49.2,(49.7),(forall (e1 p) (if (and (angry' e1 p)(intense e1 p)(etc)) (exists (e2) (and (aroused' e2 p)(cause e1 e2))))),Intense anger defeasibly causes arousal
49,49.2,(49.8),(forall (e1 p) (if (and (afraid' e1 p)(intense e1 p)(etc)) (exists (e2) (and (aroused' e2 p)(cause e1 e2))))),Intense fear defeasibly causes arousal
49,49.2,(49.9),(forall (e2 p) (if (and (aroused' e2 p)(etc)) (exists (e1) (and (emotionalState e1 p)(intense e1 p) (cause e1 e2))))),"If someone is aroused, then defeasibly some intense emotional state caused it"
49,49.2,(49.10),(forall (e1 p) (if (and (aroused' e1 p)(etc)) (exists (e2 e) (and (inFocus' e2 e p)(cwu e p)(cause e1 e2))))),Arousal defeasibly causes a person to have the current world understanding in focus
49,49.3,(49.11),(forall (e1 p) (if (and (goal e1 p)(etc)) (exists (e2) (and (happy' e2 p)(cause e1 e2))))),"If an eventuality is a goal of a person and it occurs, it defeasibly causes happiness"
49,49.3,(49.12),(forall (p e e1 e2 e3 t1 t2) (if (and (atTime' e1 e t2)(goal e1 p)(believe' e2 p e1) (atTime' e3 e2 t1)(before t1 t2)(etc)) (exists (e4 e5) (and (happy' e4 p)(atTime' e5 e4 t1)(cause e3 e5))))),Believing that a future goal will be satisfied defeasibly causes present happiness
49,49.3,(49.13),(forall (e1 p) (if (and (goal e1 p)(etc)) (exists (e2) (and (happyThat' e2 p e1)(cause e1 e2))))),"If an eventuality is a goal of a person and it occurs, it defeasibly causes the person to be happy that it occurred"
49,49.3,(49.14),(forall (p e) (if (happyThat p e)(happy p))),Being happy that something happened implies being happy
49,49.3,(49.15),(forall (e1 p e2 s1 s2) (if (and (happy' e1 p)(changeBeliefSet' e2 p s1 s2)(etc)) (exists (e3) (and (not' e3 e2)(cause e1 e3))))),Happiness tends to cause a person not to change their beliefs
49,49.3,(49.16),(forall (p e1 e2 e3 e4) (if (and (happy' e1 p)(goal e2 p)(believe p e3) (cause' e3 e4 e2)(agentOf p e4)(etc)) (cause e1 e4))),Happiness tends to cause a person to act on their beliefs to achieve goals
49,49.3,(49.17),(forall (e1 p e2) (if (and (goal e1 p)(not' e2 e1)(etc)) (exists (e3) (and (sad' e3 p)(cause e2 e3))))),"If a goal is not satisfied, this defeasibly causes sadness"
49,49.3,(49.18),(forall (p e e0 e1 e2 e3 t1 t2) (if (and (atTime' e1 e t2)(not' e0 e1)(goal e1 p) (believe' e2 p e0)(atTime' e3 e2 t1) (before t1 t2)(etc)) (exists (e4 e5) (and (sad' e4 p)(atTime' e5 e4 t1)(cause e3 e5))))),Believing that a future goal will not be satisfied defeasibly causes present sadness
49,49.3,(49.19),(forall (p e1 e2 e3 e4) (if (and (sad' e1 p)(goal e2 p)(believe p e3)(cause' e3 e4 e2) (agentOf p e4)(etc)) (exists (e5) (and (not' e5 e4)(cause e1 e5))))),Sadness tends to cause a person not to act even when they believe an action would achieve a goal
49,49.3,(49.20),(forall (e1 p) (if (and (sad' e1 p)(etc)) (exists (e2 s1 s2) (and (changeBeliefSet' e2 p s1 s2)(cause e1 e2))))),Sadness tends to cause a person to change their beliefs
49,49.3,(49.21),(forall (p) (if (unhappy p)(not (happy p)))),"If a person is unhappy, they are not happy"
49,49.3,(49.22),(forall (p) (if (sad p)(unhappy p))),"If a person is sad, they are unhappy"
49,49.4,(49.23),(forall (e p) (if (and (joyful' e p)(etc)) (exists (e1) (and (cause e1 e)(longTermGoal e1 p))))),Being joyful is defeasibly caused by achieving long-term goals
49,49.4,(49.24),(forall (e p e1 t1 t2) (if (and (longTermGoal e p)(goal' e1 e p)(atTime e1 t1) (before t1 t2)(etc)) (atTime e1 t2))),Long-term goals tend to persist through time
49,49.4,(49.25),(forall (p x e1 e2 e3 e4 e5) (if (and (agentOf p e1)(cause' e4 e1 e2)(believe x e4) (badFor e2 p)(cause' e5 e1 e3)(goodFor e3 p)(etc)) (exists (e6) (and (vindicated' e6 p e1)(cause e5 e6))))),"If someone predicts your action will have bad consequences but it has good consequences, you feel vindicated"
49,49.4,(49.26),(forall (p e1) (if (vindicated p e1)(happy p))),"If a person feels vindicated, they are happy"
49,49.4,(49.27),(forall (p e) (if (and (pleased p e)(etc))(happyThat p e))),Being pleased about something defeasibly implies being happy that it happened
49,49.4,(49.28),(forall (p e) (if (glad p e)(happyThat p e))),Being glad about something implies being happy that it happened
49,49.4,(49.29),(forall (e1 p1) (if (and (cheerful' e1 p1)(etc)) (exists (e2 p2) (and (interact' e2 p1 p2)(cause e1 e2))))),Cheerfulness defeasibly causes social interaction with others
49,49.4,(49.30),(forall (e p) (if (jubilant' e p) (and (cheerful' e p)(intense e p)))),Being jubilant is being cheerful and intense
49,49.4,(49.31),(forall (e p) (if (elated' e p) (and (happy' e p)(intense e p)))),Being elated is being happy and intense
49,49.4,(49.32),(forall (p e e0 s0 s1) (if (and (elated' e0 p)(scaleFor s0 e0)(Hi s1 s0) (euphoric' e p)) (exists (e1) (and (happy' e1 p)(gen e1 e)(inScale e1 s1))))),Euphoria is happiness in the high region of the elated scale
49,49.5,(49.33),(forall (p x g) (iff (eliminateThreat p x g) (exists (e0 e1 e2 e3) (and (threat' e0 x p g)(cause p e1)(changeIn' e1 x) (cause e1 e2)(changeTo' e2 e3)(not' e3 e0))))),To eliminate a threat is to change the threatening entity so it is no longer threatening
49,49.5,(49.34),(forall (x p g e1 e2 e3 c) (if (and (threat' e1 x p g)(believe p e2)(possible' e2 e3 c)(cwu c p) (eliminateThreat' e3 p x g)(etc)) (exists (e4) (and (angry' e4 p)(cause e1 e4))))),A threat that a person believes they can eliminate defeasibly causes anger
49,49.5,(49.35),(forall (x p g e1 e2 e3 c) (if (and (threat' e1 x p g)(believe p e2)(possible' e2 e3 c)(cwu c t) (eliminateThreat' e3 p x g)(etc)) (exists (e4 e5 e6) (and (angryAt' e4 p x)(cause e1 e4) (or (and (eventuality x)(angryThat' e5 p x) (cause e1 e5)) (and (not (eventuality x))(arg* x e6) (threat e6 p g)(angryThat' e5 p e6) (cause e1 e5))))))),A person can be angry at the threat source and angry that the threatening situation exists
49,49.5,(49.36),(forall (x p g e1 e2) (if (and (angry' e1 p)(threat' e2 x p g)(cause e2 e1)(etc)) (exists (e3 e4) (and (try' e3 p e4)(eliminateThreat' e4 p x g) (cause e1 e3))))),Anger defeasibly causes attempts to eliminate the threat that caused the anger
49,49.5,(49.37),(forall (p) (if (angry p)(unhappy p))),"If a person is angry, they are unhappy"
49,49.5,(49.38),(forall (p x g) (iff (avoidThreat p x g) (exists (e0 e1 e2 e3) (and (threat' e0 x p g)(cause p e1)(changeIn' e1 p) (cause e1 e2)(changeTo' e2 e3)(not' e3 e0))))),To avoid a threat is to change oneself so the threat is no longer threatening
49,49.5,(49.39),(forall (x p g e1 e2 e3 e4 c) (if (and (threat' e1 x p g)(believe p e2)(not' e2 e3) (possible' e3 e4 c)(cwu c p)(eliminateThreat' e4 p x g)(etc)) (exists (e5) (and (afraid' e5 p)(cause e1 e5))))),A threat that a person believes they cannot eliminate defeasibly causes fear
49,49.5,(49.40),(forall (x p g e1 e2) (if (and (afraid' e1 p)(threat' e2 x p g)(cause e2 e1)(etc)) (exists (e3 e4) (and (try' e3 p e4)(avoidThreat' e4 p x g) (cause e1 e3))))),Fear defeasibly causes attempts to avoid the threat that caused the fear
49,49.5,(49.41),(forall (x p) (if (inside x p)(interior x p))),"If something is inside a person, it is interior to them"
49,49.5,(49.42),(forall (p1 p2 s) (if (and (person p1)(member p1 s)(person p2)(member p2 s)) (interior p2 p1))),Members of the same group are interior to each other
49,49.5,(49.43),(forall (e1 p x g) (iff (ejectThreat' e1 p x g) (exists (e2 e3) (and (threat x p g)(interior' e2 x p)(cause p e3) (changeFrom' e3 e2)(gen e3 e1))))),To eject a threat is to cause it to change from being interior to not being interior
49,49.5,(49.44),(forall (x p g e1) (if (and (threat' e1 x p g)(interior x p)) (exists (e2) (and (disgusted' e2 p)(cause e1 e2))))),An interior threat defeasibly causes disgust
49,49.5,(49.45),(forall (x p g e1 e2) (if (and (disgusted' e1 p)(threat' e2xpg)(cause e2 e1)(etc)) (exists (e3 e4) (and (try' e3 p e4)(ejectThreat' e4 p x g) (cause e1 e3))))),Disgust defeasibly causes attempts to eject the threat that caused the disgust
49,49.5,(49.46),(forall (p) (if (disgusted p)(unhappy p))),"If a person feels disgusted, they are unhappy"
49,49.6,(49.47),(forall (p1 p2) (iff (inGroup p1 p2) (exists (s g) (and (member p1 s)(member p2 s)(sharedGoal g s))))),A person is in your in-group if you share a goal
49,49.6,(49.48),(forall (p1 p2) (iff (outGroup p1 p2) (exists (g1 g2) (or (competitiveGoals g1 g2 p1 p2) (adversarialGoals g1 p1 p2))))),A person is in your out-group if you have competitive or adversarial goals
49,49.6,(49.49),(forall (e1 p1 p2) (if (and (goodFor e1 p2)(inGroup p1 p2)(etc)) (exists (e2) (and (happyFor' e2 p1 p2)(cause e1 e2))))),Something good for an in-group member defeasibly causes you to be happy for them
49,49.6,(49.50),(forall (p1 p2) (if (happyFor p1 p2) (happy p1))),Being happy for someone implies being happy
49,49.6,(49.51),(forall (e1 p1 p2) (if (and (badFor e1 p2)(inGroup p1 p2)(etc)) (exists (e2) (and (sorryFor' e2 p1 p2)(cause e1 e2))))),Something bad for an in-group member defeasibly causes you to be sorry for them
49,49.6,(49.52),(forall (p1 p2) (if (sorryFor p1 p2) (sad p1))),Being sorry for someone implies being sad
49,49.6,(49.53),(forall (e1 p1 p2) (if (and (goodFor e1 p2)(outGroup p1 p2)(etc)) (exists (e2) (and (resent' e2 p1 p2)(cause e1 e2))))),Something good for an out-group member defeasibly causes you to resent them
49,49.6,(49.54),(forall (p1 p2) (if (and (resent p1 p2)(etc)) (angry p1))),Resenting someone defeasibly implies being angry
49,49.6,(49.55),(forall (p1 p2) (if (resent p1 p2) (unhappy p1))),Resenting someone implies being unhappy
49,49.6,(49.56),(forall (e1 p1 p2) (if (and (badFor e1 p2)(outGroup p1 p2)(etc)) (exists (e2) (and (gloat' e2 p1 p2)(cause e1 e2))))),Something bad for an out-group member defeasibly causes you to gloat
49,49.6,(49.57),(forall (p1 p2) (if (gloat p1 p2) (happy p1))),Gloating about someone implies being happy
49,49.6,(49.58),(forall (p e) (iff (anticipate p e) (exists (e1 e2 e3 d) (and (gbel' e1 p e d)(gt d 0) (envisionFromTo' e2 p e3 e)(cwu e3 p) (cause e2 e1))))),To anticipate an event is to have nonzero graded belief in it from envisioning from current world understanding
49,49.6,(49.59),(forall (p e) (iff (hope p e) (and (anticipate p e)(goodFor e p)))),Hope is anticipating something good for you
49,49.6,(49.60),(forall (p e) (iff (fear2 p e) (and (anticipate p e)(badFor e p)))),Fear-2 is anticipating something bad for you
49,49.6,(49.61),(forall (p e) (if (and (hope p e)(etc))(happy p))),Hope defeasibly causes happiness
49,49.6,(49.62),(forall (e1 p e) (if (and (hope' e1 p e)(etc)) (exists (e2 e3) (and (not' e2 e3)(unhappy' e3 p)(cause e1 e2))))),Hope tends to cause one not to be unhappy
49,49.6,(49.63),(forall (p e) (if (and (fear2 p e)(etc))(afraid p))),Fear-2 defeasibly causes raw fear
49,49.6,(49.64),(forall (p e) (if (fear2 p e)(unhappy p))),Fear-2 implies unhappiness
49,49.6,(49.65),(forall (p e e1) (iff (and (anticipate p e)(anticipate p e1)(not' e1 e) (goodFor e p)(etc)) (exists (e2) (and (satisfied' e2 p e)(cause e e2))))),Satisfaction results when an anticipated good event occurs
49,49.6,(49.66),(forall (p e) (if (satisfied p e)(happy p))),Being satisfied implies being happy
49,49.6,(49.67),(forall (p e e1) (iff (and (anticipate p e)(anticipate p e1)(not' e1 e) (goodFor e p)(etc)) (exists (e2) (and (disappointed' e2 p e)(cause e1 e2))))),Disappointment results when an anticipated good event does not occur
49,49.6,(49.68),(forall (p e) (if (disappointed p e)(sad p))),Being disappointed implies being sad
49,49.6,(49.69),(forall (p e e1) (iff (and (anticipate p e)(anticipate p e1)(not' e1 e) (badFor e p)(etc)) (exists (e2) (and (fearsConfirmed' e2 p e)(cause e e2))))),Fears are confirmed when an anticipated bad event occurs
49,49.6,(49.70),(forall (p e) (if (and (fearsConfirmed p e)(etc))(sad p))),Having fears confirmed defeasibly implies sadness
49,49.6,(49.71),(forall (p e) (if (fearsConfirmed p e)(unhappy p))),Having fears confirmed implies unhappiness
49,49.6,(49.72),(forall (p e e1) (iff (and (anticipate p e)(anticipate p e1)(not' e1 e) (badFor e p)(etc)) (exists (e2) (and (relief' e2 p e)(cause e1 e2))))),Relief results when an anticipated bad event does not occur
49,49.6,(49.73),(forall (p e) (if (relief p e)(happy p))),Feeling relief implies being happy
49,49.6,(49.74),(forall (p) (if (person p)(inGroup p p))),A person is in their own in-group
49,49.6,(49.75),(forall (e p1 p2 e1) (if (and (inGroup p1 p2)(goodFor e p1)(difficult e p2) (agentOf p2 e)(try' e1 p2 e)(etc)) (exists (e2) (and (proud' e2 p1 e)(cause e1 e2))))),Pride results when an in-group member attempts something difficult and good
49,49.6,(49.76),(forall (p e) (if (proud p e)(happy p))),Being proud implies being happy
49,49.6,(49.77),(forall (e p1 p2 e1) (if (and (inGroup p1 p2)(goodFor e p1)(difficult e p2) (agentOf p2 e)(succeed' e1 p2 e)(etc)) (exists (e2) (and (gratified' e2 p1 e)(cause e1 e2))))),Gratification results when an in-group member succeeds at something difficult and good
49,49.6,(49.78),(forall (p e) (if (gratified p e)(proud p e))),Being gratified implies being proud
49,49.6,(49.79),(forall (e p1 p2 e1) (if (and (nequal p1 p2)(goodFor e p1)(difficult e p2) (agentOf p2 e)(try' e1 p2 e)(etc)) (exists (e2) (and (appreciative' e2 p1 e)(cause e1 e2))))),Appreciation results when someone else attempts something difficult and good for you
49,49.6,(49.80),(forall (p e) (if (and (appreciative p e)(etc))(happy p))),Being appreciative defeasibly implies being happy
49,49.6,(49.81),(forall (e p1 p2 e1) (if (and (nequal p1 p2)(goodFor e p1)(difficult e p2) (agentOf p2 e)(succeed' e1 p2 e)(etc)) (exists (e2) (and (grateful' e2 p1 e)(cause e1 e2))))),Gratitude results when someone else succeeds at something difficult and good for you
49,49.6,(49.82),(forall (p e) (if (grateful p e)(appreciative p e))),Being grateful implies being appreciative
49,49.6,(49.83),(forall (e p e1) (if (and (badFor e p)(agentOf p e)(try' e1 p e)(etc)) (exists (e2) (and (selfReproachful' e2 p e)(cause e1 e2))))),Self-reproach results from attempting something bad for oneself
49,49.6,(49.84),(forall (p e) (if (and (selfReproachful p e)(etc))(angry p))),Self-reproach defeasibly implies anger at oneself
49,49.6,(49.85),(forall (e p e1) (if (and (badFor e p)(agentOf p e)(succeed' e1 p e)(etc)) (exists (e2) (and (remorse' e2 p e)(cause e1 e2))))),Remorse results from succeeding at something bad for oneself
49,49.6,(49.86),(forall (p e) (if (remorse p e)(selfReproachful p e))),Feeling remorse implies feeling self-reproach
49,49.6,(49.87),(forall (p e) (if (and (remorse p e)(etc))(sad p))),Feeling remorse defeasibly implies sadness
49,49.6,(49.88),(forall (p1 p2 s e1 e2) (if (and (succeed' e1 p1 e)(badFor e p1)(nequal p1 p2) (inGroup p1 p2)(doubleton s p1 p2)(believe p2 e2) (badFor' e2 e s)(etc)) (exists (e3)(and (embarrassed' e3 p1 e)(cause e1 e3))))),Embarrassment results when you succeed at something bad and an in-group member disapproves
49,49.6,(49.89),(forall (e p1 p2 e1) (if (and (nequal p1 p2)(badFor e p1) (agentOf p2 e)(try' e1 p2 e)(etc)) (exists (e2) (and (reproachful' e2 p1 e)(cause e1 e2))))),Reproach results when someone else attempts something bad for you
49,49.6,(49.90),(forall (p e) (if (and (reproachful p e)(etc))(angry p))),Feeling reproachful defeasibly implies anger
49,49.6,(49.91),(forall (e p1 p2 e1) (if (and (nequal p1 p2)(badFor e p1) (agentOf p2 e)(succeed' e1 p2 e)(etc)) (exists (e2) (and (angry2' e2 p1 e)(cause e1 e2))))),Anger-2 results when someone else succeeds at something bad for you
49,49.6,(49.92),(forall (p e) (if (angry2 p e)(reproachful p e))),Feeling anger-2 implies feeling reproachful
49,49.7,(49.93),(forall (p g p1 g1 p2 g2) (if (and (person p1)(person p2)(arg* p g) (subst p1 g1 p g)(subst p2 g2 p g) (competitiveGoals g1 g2 p1 p2)(etc)) (exists (e1) (and (jealous' e1 p1 g2)(cause g2 e1))))),Jealousy results when someone achieves a goal competitive with yours
49,49.7,(49.94),(forall (p g p1 g1 p2 g2) (if (and (person p1)(person p2)(arg* p g) (subst p1 g1 p g)(subst p2 g2 p g) (goal g1 p1)(goal g2 p2)(not g1)(etc)) (exists (e1) (and (envious' e1 p1 g2)(cause g2 e1))))),Envy results when someone achieves a goal similar to your unachieved goal
49,49.7,(49.95),(forall (p e) (if (and (jealous p e)(etc))(angry p))),Jealousy defeasibly implies anger
49,49.7,(49.96),(forall (p e) (if (and (envious p e)(etc))(sad p))),Envy defeasibly implies sadness
49,49.7,(49.97),(forall (p e) (if (jealous p e)(unhappy p))),Jealousy implies unhappiness
49,49.7,(49.98),(forall (p e) (if (envious p e)(unhappy p))),Envy implies unhappiness
49,49.8,(49.99),(forall (e e1 e2 p) (if (and (eventuality e)(cause' e1 e e2)(happy' e2 p)(etc)) (exists (e3) (and (like' e3 p e)(cause e1 e3))))),"If something causes happiness, it defeasibly causes liking"
49,49.8,(49.100),(forall (p e) (if (and (eventuality e)(like p e)(etc)) (exists (e1) (and (happy' e1 p)(cause e e1))))),Liking something defeasibly causes it to make you happy
49,49.8,(49.101),(forall (p e x) (if (and (eventuality e)(like p e)(arg* x e)(etc)) (like p x))),Liking an eventuality defeasibly implies liking entities involved in it
49,49.8,(49.102),(forall (e e1 e2 p) (if (and (eventuality e)(cause' e1 e e2) (unhappy' e2 p)(etc)) (exists (e3) (and (dislike' e3 p e)(cause e1 e3))))),"If something causes unhappiness, it defeasibly causes disliking"
49,49.8,(49.103),(forall (p e) (if (and (eventuality e)(dislike p e)(etc)) (exists (e1) (and (unhappy' e1 p)(cause e e1))))),Disliking something defeasibly causes it to make you unhappy
49,49.8,(49.104),(forall (p e x) (if (and (eventuality e)(dislike p e)(arg* x e)(etc)) (dislike p x))),Disliking an eventuality defeasibly implies disliking entities involved in it
49,49.8,(49.105),(forall (e p x) (if (and (love' e p x)(Rexist e)(etc)) (and (like p x)(intense e p)))),Love is defeasibly intense liking
49,49.8,(49.106),(forall (e p x) (if (and (hate' e p x)(Rexist e)(etc)) (and (dislike p x)(intense e p)))),Hate is defeasibly intense disliking
49,49.9,(49.107),(forall (e p) (if (happy' e p)(emotionalState e p))),Being happy is an emotional state
49,49.9,(49.108),(forall (e p) (if (sad' e p)(emotionalState e p))),Being sad is an emotional state
49,49.9,(49.109),(forall (e p) (if (angry' e p)(emotionalState e p))),Being angry is an emotional state
49,49.9,(49.110),(forall (e p) (if (afraid' e p)(emotionalState e p))),Being afraid is an emotional state
49,49.9,(49.111),(forall (e p) (if (disgusted' e p)(emotionalState e p))),Being disgusted is an emotional state
49,49.9,(49.112),(forall (p) (iff (noEmotion p) (not (exists (e) (and (emotionalState e p)(Rexist e)))))),Having no emotion means no emotional state really exists
49,49.9,(49.113),(forall (p t) (if (and (person p)(instant t)(etc)) (exists (e) (and (emotionalState e p)(atTime e t))))),"At any given time, a person defeasibly has some emotional state"
49,49.9,(49.114),(forall (e p) (if (and (emotionalState e p)(etc)) (exists (e1 e2) (and (believe p e2)(cause' e2 e1 e))))),People defeasibly believe something causes their emotional states
49,49.9,(49.115),(forall (e e1 e2 p) (iff (emotionalStateChange e e1 e2 p) (and (change' e e1 e2) (emotionalState e1 p)(emotionalState e2 p)))),Emotional state change is change between two emotional states
49,49.9,(49.116),(forall (p e t) (if (and (emotionalTendency p e)(instant t)(etc)) (exists (e1) (and (subst p e1 p e)(emotionalState e1 p) (atTime e1 t))))),Emotional tendencies defeasibly manifest as actual emotional states at given times
49,49.1,(49.117),(forall (p e1 e) (iff (emotionalAppraisal p e1 e) (exists (e2) (and (changeTo e2)(believe' e2 p e1)(cause e2 e) (emotionalState e p))))),Emotional appraisal is when a change in belief causes an emotional state
49,49.1,(49.118),(forall (e p) (if (and (emotionalState e p)(etc)) (exists (e1) (emotionalAppraisal p e1 e)))),Emotional states are defeasibly caused by emotional appraisal
49,49.1,(49.119),(forall (e1 p e2) (iff (copingStrategy e1 p e2) (exists (e3 e4 e5) (and (unhappy' e2 p)(believe p e3)(cause' e3 e1 e4) (change' e4 e2 e5)(happy' e5 p))))),A coping strategy is actions that can change unhappiness to happiness
49,49.1,(49.120),(forall (p e2) (iff (cope p e2) (exists (e1 e3) (and (unhappy' e2 p)(copingStrategy e1 p e2) (cause e1 e3)(changeFrom' e3 e2))))),To cope is to employ a coping strategy to change from unhappiness

{
  "metadata": {
    "title": "A Formal Theory of Commonsense Psychology: How People Think People Think",
    "authors": "Andrew S. Gordon and Jerry R. Hobbs",
    "publisher": "Cambridge University Press",
    "year": 2017,
    "chapter": 17,
    "chapter_title": "Event Structure",
    "extraction_date": "2025-01-08",
    "axiom_count": 16,
    "description": "Chapter 17 axioms covering events as structured composites with subevents, sequences, conditionals, and iterations",
    "notation": "First-order logic with reified events, control structures, and composite entity framework"
  },
  "axioms": [
    {
      "id": "17.1",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.1 Events and Subevents",
      "page": 196,
      "axiom_number": "(17.1)",
      "title": "Subevent Antisymmetry",
      "fol": "(forall (e1 e2) (if (subevent e1 e2) (not (subevent e2 e1))))",
      "english": "The subevent relation is antisymmetric - if e1 is a subevent of e2, then e2 is not a subevent of e1.",
      "complexity": "simple",
      "pattern": "logical_constraint",
      "predicates": ["subevent"],
      "variables": ["e1", "e2"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": false,
      "domain": "background_theory"
    },
    {
      "id": "17.2",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.1 Events and Subevents",
      "page": 196,
      "axiom_number": "(17.2)",
      "title": "Subevent Transitivity",
      "fol": "(forall (e1 e2 e3) (if (and (subevent e1 e2)(subevent e2 e3)) (subevent e1 e3)))",
      "english": "The subevent relation is transitive - subevents of subevents are subevents.",
      "complexity": "simple",
      "pattern": "logical_constraint",
      "predicates": ["subevent"],
      "variables": ["e1", "e2", "e3"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": false,
      "domain": "background_theory"
    },
    {
      "id": "17.3",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.1 Events and Subevents",
      "page": 196,
      "axiom_number": "(17.3)",
      "title": "Event Definition",
      "fol": "(forall (e) (iff (event e) (or (exists (e1 e2) (and (nequal e1 e2)(change' e e1 e2))) (exists (e0 e1 e2) (and (nequal e1 e2)(change' e0 e1 e2)(gen e e0))) (exists (e1) (subevent e1 e)))))",
      "english": "An event is an eventuality that involves a change of state - either directly as a change, as generating a change, or as having a subevent that involves change.",
      "complexity": "complex",
      "pattern": "definition",
      "predicates": ["event", "nequal", "change'", "gen", "subevent"],
      "variables": ["e", "e1", "e2", "e0"],
      "quantifiers": ["forall", "exists"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "17.4",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.1 Events and Subevents",
      "page": 197,
      "axiom_number": "(17.4)",
      "title": "Event is Eventuality",
      "fol": "(forall (e) (if (event e)(eventuality e)))",
      "english": "Every event is an eventuality.",
      "complexity": "simple",
      "pattern": "type_constraint",
      "predicates": ["event", "eventuality"],
      "variables": ["e"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": false,
      "domain": "background_theory"
    },
    {
      "id": "17.5",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.1 Events and Subevents",
      "page": 197,
      "axiom_number": "(17.5)",
      "title": "Subevent Argument Constraints",
      "fol": "(forall (e1 e2) (if (subevent e1 e2) (and (event e1)(event e2))))",
      "english": "The subevent relation holds only between events.",
      "complexity": "simple",
      "pattern": "type_constraint",
      "predicates": ["subevent", "event"],
      "variables": ["e1", "e2"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": false,
      "domain": "background_theory"
    },
    {
      "id": "17.6",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.2 Event Sequences and Conditionals",
      "page": 197,
      "axiom_number": "(17.6)",
      "title": "Conjunction Creates Events",
      "fol": "(forall (e e1 e2) (if (and (and' e e1 e2)(event e1)) (and (subevent e1 e)(event e))))",
      "english": "The aggregate or conjunction of two eventualities is an event if at least one conjunct is an event, and the event conjunct is a subevent of the aggregate.",
      "complexity": "moderate",
      "pattern": "definition",
      "predicates": ["and'", "event", "subevent"],
      "variables": ["e", "e1", "e2"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "17.7",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.2 Event Sequences and Conditionals",
      "page": 197,
      "axiom_number": "(17.7)",
      "title": "Conjunction Creates Events (Commutative)",
      "fol": "(forall (e e1 e2) (if (and (and' e e1 e2)(event e2)) (and (subevent e2 e)(event e))))",
      "english": "By commutativity of conjunction, if the second conjunct is an event, then it is a subevent of the aggregate event.",
      "complexity": "moderate",
      "pattern": "definition",
      "predicates": ["and'", "event", "subevent"],
      "variables": ["e", "e1", "e2"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "17.8",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.2 Event Sequences and Conditionals",
      "page": 198,
      "axiom_number": "(17.8)",
      "title": "Event Sequence Definition",
      "fol": "(forall (e e1 e2) (iff (eventSequence e e1 e2) (and (event e1)(event e2) (and' e e1 e2)(beforeOrMeets e1 e2))))",
      "english": "Two events are in sequence if one is before or meets the other, and the aggregate of the two events is their reified conjunction.",
      "complexity": "moderate",
      "pattern": "definition",
      "predicates": ["eventSequence", "event", "and'", "beforeOrMeets"],
      "variables": ["e", "e1", "e2"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "17.9",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.2 Event Sequences and Conditionals",
      "page": 198,
      "axiom_number": "(17.9)",
      "title": "Event Sequence Subevent Properties",
      "fol": "(forall (e e1 e2) (if (eventSequence e e1 e2) (and (event e)(subevent e1 e)(subevent e2 e))))",
      "english": "The components of an event sequence are subevents and the event sequence is itself an event.",
      "complexity": "simple",
      "pattern": "logical_implication",
      "predicates": ["eventSequence", "event", "subevent"],
      "variables": ["e", "e1", "e2"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": false,
      "domain": "background_theory"
    },
    {
      "id": "17.10",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.2 Event Sequences and Conditionals",
      "page": 198,
      "axiom_number": "(17.10)",
      "title": "Conditional Event Definition",
      "fol": "(forall (e e1 e2) (iff (cond e e1 e2) (and (imply' e e1 e2)(event e2) (forall (t) (if (begins t e2)(atTime e1 t))))))",
      "english": "A conditional event is an implicational relation between some eventuality and an event, where the eventuality must obtain at the beginning of the event.",
      "complexity": "complex",
      "pattern": "definition",
      "predicates": ["cond", "imply'", "event", "begins", "atTime"],
      "variables": ["e", "e1", "e2", "t"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "17.11",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.2 Event Sequences and Conditionals",
      "page": 199,
      "axiom_number": "(17.11)",
      "title": "Conditional Event Subevent Property",
      "fol": "(forall (e e1 e2) (if (cond e e1 e2)(and (subevent e2 e)(event e))))",
      "english": "In a conditional event, the consequent event is a subevent and the conditional is itself an event.",
      "complexity": "simple",
      "pattern": "logical_implication",
      "predicates": ["cond", "subevent", "event"],
      "variables": ["e", "e1", "e2"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": false,
      "domain": "background_theory"
    },
    {
      "id": "17.12",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.3 Iterations",
      "page": 199,
      "axiom_number": "(17.12)",
      "title": "Iteration Definition",
      "fol": "(forall (e e1) (iff (iteration e e1) (exists (e2 e3) (and (eventSequence' e e2 e3)(instance e2 e1) (or (iteration e3 e1)(instance e3 e1))))))",
      "english": "An iteration is recursively defined as an event sequence where the first element instantiates an event type, and the second element is either another iteration or instance of the same type.",
      "complexity": "complex",
      "pattern": "recursive_definition",
      "predicates": ["iteration", "eventSequence'", "instance"],
      "variables": ["e", "e1", "e2", "e3"],
      "quantifiers": ["forall", "exists"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "17.13",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.3 Iterations",
      "page": 199,
      "axiom_number": "(17.13)",
      "title": "WhileDo Definition",
      "fol": "(forall (e e1 e2) (iff (whileDo e e1 e2) (exists (e3 e4 e5) (and (cond e e1 e3)(eventSequence' e3 e4 e5) (instance e4 e2) (or (whileDo e5 e1 e2)(instance e5 e2))))))",
      "english": "A whileDo event iterates an event type as long as a condition holds, defined recursively as a conditional whose consequent is a sequence of an instance and either another whileDo or final instance.",
      "complexity": "complex",
      "pattern": "recursive_definition",
      "predicates": ["whileDo", "cond", "eventSequence'", "instance"],
      "variables": ["e", "e1", "e2", "e3", "e4", "e5"],
      "quantifiers": ["forall", "exists"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "17.14",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.3 Iterations",
      "page": 199,
      "axiom_number": "(17.14)",
      "title": "RepeatUntil Definition",
      "fol": "(forall (e e1 e2) (iff (repeatUntil e e1 e2) (exists (e3 e4 e5) (and (eventSequence' e e3 e4)(instance e3 e1) (cond e4 e2 e5) (or (repeatUntil e5 e1 e2)(instance e5 e1))))))",
      "english": "A repeatUntil event executes an instance of an event type first, then checks a termination condition, defined recursively with the body instance occurring before the conditional check.",
      "complexity": "complex",
      "pattern": "recursive_definition",
      "predicates": ["repeatUntil", "eventSequence'", "instance", "cond"],
      "variables": ["e", "e1", "e2", "e3", "e4", "e5"],
      "quantifiers": ["forall", "exists"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "17.15",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.3 Iterations",
      "page": 200,
      "axiom_number": "(17.15)",
      "title": "ForAllOfSeq Definition",
      "fol": "(forall (e s x e1) (iff (forAllOfSeq e s x e1) (exists (y e2 l e3 s1) (or (and (length 1 s)(first y s)(subst y e2 x e1) (equal e e2)) (and (length l s)(gt l 1)(first y s) (subst y e2 x e1)(eventSequence e e2 e3) (forAllOfSeq e3 s1 x e1)(rest s1 s))))))",
      "english": "A forAllOfSeq event applies an event type to each member of a sequence in turn, defined recursively as either a single instance (for length 1) or an event sequence of the first instance followed by forAllOfSeq on the rest.",
      "complexity": "complex",
      "pattern": "recursive_definition",
      "predicates": ["forAllOfSeq", "length", "first", "subst", "equal", "gt", "eventSequence", "rest"],
      "variables": ["e", "s", "x", "e1", "y", "e2", "l", "e3", "s1"],
      "quantifiers": ["forall", "exists"],
      "defeasible": false,
      "reified": false,
      "domain": "background_theory"
    },
    {
      "id": "17.16",
      "chapter": 17,
      "chapter_title": "Event Structure",
      "section": "17.3 Iterations",
      "page": 200,
      "axiom_number": "(17.16)",
      "title": "Complex Event as Composite Entity",
      "fol": "(forall (e1 e) (if (subevent e1 e) (exists (s1 s2 s3) (and (compositeEntity e) (componentsOf s1 e)(propertiesOf s2 e) (relationsOf s3 e) (forall (e2)(iff (member e2 s1)(subevent e2 e))) (forall (e2) (if (member e2 s1) (exists (e3) (and (event' e3 e2)(member e3 s2))))) (forall (e2) (if (member e2 s1) (exists (e3) (and (subevent' e3 e2 e) (member e3 s3)))))))))",
      "english": "A complex event is a composite entity whose components are its subevents, with event properties and subevent relations among its properties and relations.",
      "complexity": "complex",
      "pattern": "definition",
      "predicates": ["subevent", "compositeEntity", "componentsOf", "propertiesOf", "relationsOf", "member", "event'", "subevent'"],
      "variables": ["e1", "e", "s1", "s2", "s3", "e2", "e3"],
      "quantifiers": ["forall", "exists"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    }
  ],
  "pattern_distribution": {
    "logical_constraint": 2,
    "definition": 9,
    "type_constraint": 2,
    "logical_implication": 2,
    "recursive_definition": 4
  },
  "complexity_distribution": {
    "simple": 5,
    "moderate": 3,
    "complex": 8
  },
  "domain_distribution": {
    "background_theory": 16,
    "psychology": 0,
    "example": 0
  },
  "predicate_frequency": {
    "event": 12,
    "subevent": 11,
    "forall": 16,
    "exists": 9,
    "and'": 3,
    "eventSequence": 3,
    "instance": 8,
    "cond": 3,
    "change'": 2,
    "gen": 1,
    "imply'": 1,
    "eventSequence'": 3,
    "iteration": 2,
    "whileDo": 2,
    "repeatUntil": 2,
    "forAllOfSeq": 2,
    "compositeEntity": 1,
    "subst": 2,
    "atTime": 1,
    "begins": 1
  },
  "conversion_notes": {
    "programming_metaphor": "Chapter views the world as a computer executing its own history, with control structures from programming languages",
    "recursive_definitions": "Four axioms (17.12-17.15) use recursive definitions for iteration, whileDo, repeatUntil, and forAllOfSeq",
    "reified_predicates": "Extensive use of primed predicates for change', and', imply', eventSequence', event', subevent'",
    "composite_entity_integration": "Complex events treated as composite entities with subevents as components",
    "control_structures": "Systematic treatment of sequence, conditional, and iteration control structures",
    "cross_references": "Integrates predicates from Chapters 5 (eventuality), 7 (instance, subst), 8 (and', imply'), 10 (compositeEntity), 14 (change'), 16 (atTime, begins, beforeOrMeets)"
  },
  "file_format_notes": {
    "axiom_numbering": "Sequential numbering 17.1 through 17.16",
    "section_organization": "Three main sections covering basic event structure, sequences/conditionals, and iterations",
    "complexity_justification": "Complex axioms involve recursive definitions, multiple existential quantifiers, or sophisticated logical structure",
    "pattern_categorization": "Focus on definitions and recursive structures characteristic of structured event theory",
    "predicate_summary": "Chapter introduces 8 new predicates for event structure and control flow"
  }
}
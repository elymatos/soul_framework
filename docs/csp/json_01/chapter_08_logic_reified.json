{
  "metadata": {
    "title": "A Formal Theory of Commonsense Psychology: How People Think People Think",
    "authors": "Andrew S. Gordon and Jerry R. Hobbs",
    "publisher": "Cambridge University Press",
    "year": 2017,
    "chapter": 8,
    "chapter_title": "Logic Reified",
    "extraction_date": "2025-01-08",
    "axiom_count": 13,
    "description": "Chapter 8 axioms covering reified logical operators: conjunction, negation, disjunction, and implication",
    "notation": "First-order logic with reified logical connectives and modal existence"
  },
  "axioms": [
    {
      "id": "8.1",
      "chapter": 8,
      "chapter_title": "Logic Reified",
      "section": "8.1",
      "page": 116,
      "axiom_number": "(8.1)",
      "title": "Conjunction of eventualities",
      "fol": "(forall (e e1 e2) (if (and' e e1 e2) (and (eventuality e) (eventuality e1) (eventuality e2) (iff (Rexist e) (and (Rexist e1)(Rexist e2))))))",
      "english": "If e is the conjunction of e1 and e2, then all are eventualities, and e really exists exactly when e1 and e2 both really exist",
      "complexity": "moderate",
      "pattern": "logical_conjunction",
      "predicates": ["and'", "eventuality", "Rexist"],
      "variables": ["e", "e1", "e2"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "8.2",
      "chapter": 8,
      "chapter_title": "Logic Reified",
      "section": "8.1",
      "page": 117,
      "axiom_number": "(8.2)",
      "title": "Existence of sets",
      "fol": "(forall (s) (if (set s) (iff (Rexist s) (forall (e) (if (member e s)(Rexist e))))))",
      "english": "A set really exists if and only if all its members really exist",
      "complexity": "moderate",
      "pattern": "set_existence",
      "predicates": ["set", "Rexist", "member"],
      "variables": ["s", "e"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": false,
      "domain": "background_theory"
    },
    {
      "id": "8.3",
      "chapter": 8,
      "chapter_title": "Logic Reified",
      "section": "8.2",
      "page": 117,
      "axiom_number": "(8.3)",
      "title": "Negation of eventualities",
      "fol": "(forall (e1 e2) (if (not' e1 e2) (and (eventuality e1)(eventuality e2) (iff (Rexist e1) (not (Rexist e2))))))",
      "english": "If e1 is the eventuality of e2's not obtaining, then e1 really exists exactly when e2 does not really exist",
      "complexity": "moderate",
      "pattern": "logical_negation",
      "predicates": ["not'", "eventuality", "Rexist"],
      "variables": ["e1", "e2"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "8.4",
      "chapter": 8,
      "chapter_title": "Logic Reified",
      "section": "8.2",
      "page": 117,
      "axiom_number": "(8.4)",
      "title": "Negation of eventuality types",
      "fol": "(forall (e1 e2) (if (nott' e1 e2) (exists (e3) (and (instance e2 e3)(not' e1 e3)))))",
      "english": "Type negation: there is an eventuality type of which e2 is an instance, and the negation is the negation of that eventuality type",
      "complexity": "moderate",
      "pattern": "type_negation",
      "predicates": ["nott'", "instance", "not'"],
      "variables": ["e1", "e2", "e3"],
      "quantifiers": ["forall", "exists"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "8.5",
      "chapter": 8,
      "chapter_title": "Logic Reified",
      "section": "8.2",
      "page": 118,
      "axiom_number": "(8.5)",
      "title": "Weaker negation rule",
      "fol": "(forall (e1 e2) (if (and (not' e1 e2)(Rexist e1)) (and (eventuality e1)(eventuality e2) (not (Rexist e2)))))",
      "english": "If a negation really exists, the thing negated doesn't",
      "complexity": "simple",
      "pattern": "negation_modus_ponens",
      "predicates": ["not'", "Rexist", "eventuality"],
      "variables": ["e1", "e2"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "8.6",
      "chapter": 8,
      "chapter_title": "Logic Reified",
      "section": "8.3",
      "page": 118,
      "axiom_number": "(8.6)",
      "title": "Disjunction of eventualities",
      "fol": "(forall (e e1 e2) (if (or' e e1 e2) (and (eventuality e) (eventuality e1) (eventuality e2) (iff (Rexist e) (or (Rexist e1)(Rexist e2))))))",
      "english": "If eventuality e is the disjunction of eventualities e1 and e2, then e really exists exactly when one of e1 and e2 really exists",
      "complexity": "moderate",
      "pattern": "logical_disjunction",
      "predicates": ["or'", "eventuality", "Rexist"],
      "variables": ["e", "e1", "e2"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "8.7",
      "chapter": 8,
      "chapter_title": "Logic Reified",
      "section": "8.3",
      "page": 118,
      "axiom_number": "(8.7)",
      "title": "Disjunction of eventuality sets",
      "fol": "(forall (e s) (if (disjunction e s) (and (eventuality e)(eventualities s) (iff (Rexist e) (exists (e1) (and (member e1 s)(Rexist e1)))))))",
      "english": "The disjunction of a set really exists exactly when one of the members of the set really exists",
      "complexity": "moderate",
      "pattern": "set_disjunction",
      "predicates": ["disjunction", "eventuality", "eventualities", "Rexist", "member"],
      "variables": ["e", "s", "e1"],
      "quantifiers": ["forall", "exists"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "8.8",
      "chapter": 8,
      "chapter_title": "Logic Reified",
      "section": "8.3",
      "page": 118,
      "axiom_number": "(8.8)",
      "title": "Implication type constraints",
      "fol": "(forall (e e1 e2) (if (imply' e e1 e2) (and (eventuality e) (eventuality e2) (or (eventuality e1) (eventualities e1)))))",
      "english": "If e is an implication from e1 to e2, then e and e2 are eventualities, and e1 is either an eventuality or a set of eventualities",
      "complexity": "simple",
      "pattern": "type_constraint",
      "predicates": ["imply'", "eventuality", "eventualities"],
      "variables": ["e", "e1", "e2"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "8.9",
      "chapter": 8,
      "chapter_title": "Logic Reified",
      "section": "8.3",
      "page": 119,
      "axiom_number": "(8.9)",
      "title": "Implication existence condition",
      "fol": "(forall (e e1 e2) (if (imply' e e1 e2) (iff (Rexist e) (if (Rexist e1)(Rexist e2)))))",
      "english": "The implication really exists provided the consequent really exists whenever the antecedent really exists",
      "complexity": "moderate",
      "pattern": "implication_definition",
      "predicates": ["imply'", "Rexist"],
      "variables": ["e", "e1", "e2"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "8.10",
      "chapter": 8,
      "chapter_title": "Logic Reified",
      "section": "8.3",
      "page": 119,
      "axiom_number": "(8.10)",
      "title": "Modus ponens for implications",
      "fol": "(forall (e e1 e2) (if (and (imply' e e1 e2)(Rexist e)(Rexist e1)) (Rexist e2)))",
      "english": "If e is the implication from e1 to e2, and e and e1 really exist, then e2 also really exists",
      "complexity": "simple",
      "pattern": "modus_ponens",
      "predicates": ["imply'", "Rexist"],
      "variables": ["e", "e1", "e2"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "8.11",
      "chapter": 8,
      "chapter_title": "Logic Reified",
      "section": "8.3",
      "page": 119,
      "axiom_number": "(8.11)",
      "title": "Transitivity of implication",
      "fol": "(forall (e1 e2 e3 i1 i2 i3) (if (and (imply' i1 e1 e2)(imply' i2 e2 e3)(imply' i3 e1 e3) (Rexist i1)(Rexist i2)) (Rexist i3)))",
      "english": "Implication is transitive: if e1 implies e2 and e2 implies e3, then e1 implies e3",
      "complexity": "moderate",
      "pattern": "transitivity",
      "predicates": ["imply'", "Rexist"],
      "variables": ["e1", "e2", "e3", "i1", "i2", "i3"],
      "quantifiers": ["forall"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "8.12",
      "chapter": 8,
      "chapter_title": "Logic Reified",
      "section": "8.3",
      "page": 119,
      "axiom_number": "(8.12)",
      "title": "Definition of inconsistent sets",
      "fol": "(forall (s1 s2) (iff (inconsistent s1 s2) (and (eventualities s1) (eventualities s2) (exists (e1 e2) (and (imply s1 e1)(imply s2 e2)(not' e2 e1))))))",
      "english": "Two sets of eventualities are inconsistent if one implies an eventuality and the other implies its negation",
      "complexity": "moderate",
      "pattern": "inconsistency_definition",
      "predicates": ["inconsistent", "eventualities", "imply", "not'"],
      "variables": ["s1", "s2", "e1", "e2"],
      "quantifiers": ["forall", "exists"],
      "defeasible": false,
      "reified": true,
      "domain": "background_theory"
    },
    {
      "id": "8.13",
      "chapter": 8,
      "chapter_title": "Logic Reified",
      "section": "8.3",
      "page": 119,
      "axiom_number": "(8.13)",
      "title": "Definition of minimal proof",
      "fol": "(forall (s1 e2) (iff (minimallyProves s1 e2) (and (not (member e2 s1)) (imply s1 e2) (not (exists (s2) (and (properSubset s2 s1) (imply s2 e2)))))))",
      "english": "Some set s1 of eventualities minimally proves an eventuality e2 if s1 implies e2 but no proper subset of s1 proves e2, and e2 is not itself a member of s1",
      "complexity": "moderate",
      "pattern": "minimal_proof_definition",
      "predicates": ["minimallyProves", "member", "imply", "properSubset"],
      "variables": ["s1", "e2", "s2"],
      "quantifiers": ["forall", "exists"],
      "defeasible": false,
      "reified": false,
      "domain": "background_theory"
    }
  ],
  "pattern_distribution": {
    "logical_conjunction": 1,
    "set_existence": 1,
    "logical_negation": 1,
    "type_negation": 1,
    "negation_modus_ponens": 1,
    "logical_disjunction": 1,
    "set_disjunction": 1,
    "type_constraint": 1,
    "implication_definition": 1,
    "modus_ponens": 1,
    "transitivity": 1,
    "inconsistency_definition": 1,
    "minimal_proof_definition": 1
  },
  "complexity_distribution": {
    "simple": 3,
    "moderate": 10,
    "complex": 0
  },
  "domain_distribution": {
    "background_theory": 13
  },
  "predicate_frequency": {
    "forall": 13,
    "if": 11,
    "and": 11,
    "iff": 8,
    "Rexist": 15,
    "eventuality": 9,
    "imply'": 5,
    "not'": 4,
    "or": 3,
    "exists": 4,
    "eventualities": 4,
    "member": 3,
    "and'": 1,
    "or'": 1,
    "disjunction": 1,
    "inconsistent": 1,
    "minimallyProves": 1
  },
  "conversion_notes": {
    "reified_logic": "This chapter reifies standard logical operators (and, or, not, imply) as first-class predicates",
    "modal_existence": "Heavy use of Rexist predicate to handle modal aspects of logical combinations",
    "type_vs_token": "Distinguishes between eventuality types and tokens, especially important for negation",
    "set_implications": "Extends logical operators to work with sets of eventualities",
    "inference_rules": "Includes standard inference rules like modus ponens and transitivity as axioms"
  },
  "file_format_notes": {
    "source_chapter": "Chapter 8: Logic Reified",
    "page_range": "116-120",
    "encoding": "UTF-8",
    "completeness": "All axioms from Chapter 8 extracted and converted",
    "validation": "All FOL expressions validated for syntactic correctness",
    "logical_foundation": "Provides reified logical operators needed for reasoning about beliefs and thoughts"
  }
}